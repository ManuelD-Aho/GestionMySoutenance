--------------------------------------------
Fichier : ./Public/index.php
--------------------------------------------
Fichier : ./routes/web.php
    $r->addGroup('/dashboard', function (RouteCollector $r) {
    $r->addGroup('/profile', function (RouteCollector $r) {
    $r->addGroup('/admin', function (FastRoute\RouteCollector $r) {
    $r->addGroup('/etudiant', function (RouteCollector $r) {
    $r->addGroup('/personnel-admin', function (RouteCollector $r) {
    $r->addGroup('/scolarite', function (RouteCollector $r) {
    $r->addGroup('/conformite', function (RouteCollector $r) {
    $r->addGroup('/commission', function (RouteCollector $r) {
    $r->addGroup('/admin', function (RouteCollector $r) {
    $r->addGroup('/utilisateurs', function (RouteCollector $r) {
    $r->addGroup('/habilitations', function (RouteCollector $r) {
    $r->addGroup('/referentiels', function (RouteCollector $r) {
    $r->addGroup('/config', function (RouteCollector $r) {
    $r->addGroup('/gestion-acad', function (RouteCollector $r) {
    $r->addGroup('/supervision', function (RouteCollector $r) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Admin/AnneeAcademiqueController.php
    class AnneeAcademiqueController extends BaseController
    public function __construct()
    public function index(): void
    private function getAdminMenuItems(): array
--------------------------------------------
Fichier : ./src/Backend/Controller/Administration/AdminDashboardController.php
    class AdminDashboardController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Administration/ConfigSystemeController.php
    class ConfigSystemeController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Administration/GestionAcadController.php
    class GestionAcadController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Administration/HabilitationController.php
    class HabilitationController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Administration/ReferentialController.php
    class ReferentialController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Administration/ReportingController.php
    class ReportingController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Administration/SupervisionController.php
    class SupervisionController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Administration/UtilisateurController.php
    class UtilisateurController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
    public function listerUtilisateurs(): void
--------------------------------------------
Fichier : ./src/Backend/Controller/AssetController.php
    class AssetController extends BaseController
    public function serveCss(string $filename): void
--------------------------------------------
Fichier : ./src/Backend/Controller/AuthentificationController.php
    class AuthentificationController extends BaseController
    public function __construct()
    protected function requireNoLogin(): void
    public function showLoginForm(): void
    public function handleLogin(): void
    public function logout(): void
    public function showForgotPasswordForm(): void
    public function handleForgotPasswordRequest(): void
    public function showResetPasswordForm(): void
    public function handleResetPasswordSubmission(): void
    public function show2FAForm(): void
    public function handle2FASubmission(): void
    public function showChangePasswordForm(): void
    public function handleChangePassword(): void
--------------------------------------------
Fichier : ./src/Backend/Controller/BaseController.php
    abstract class BaseController
    public function __construct()
    protected function render(string $view, array $data = [], string $layout = 'layout/app'): void
    protected function redirect(string $url): void
    protected function setFlashMessage(string $key, string $message): void
    protected function getFlashMessage(string $key): ?string
    protected function requireLogin(): void
    protected function requirePermission(string $permission): void
--------------------------------------------
Fichier : ./src/Backend/Controller/Commission/CommissionDashboardController.php
    class CommissionDashboardController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Commission/CommunicationCommissionController.php
    class CommunicationCommissionController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Commission/CorrectionCommissionController.php
    class CorrectionCommissionController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Commission/PvController.php
    class PvController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Commission/ValidationRapportController.php
    class ValidationRapportController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Common/NotificationController.php
    class NotificationController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/DashboardController.php
    class DashboardController extends BaseController // Assurez-vous que BaseController existe et est hérité
    public function index(): void
    private function getUserRoleLabel(?int $userTypeId): string
    private function getMenuItemsForRole(string $role): array
    private function getDashboardDataForRole(string $role, array $userSessionData): array
    private function getDashboardContentViewForRole(string $role): string
--------------------------------------------
Fichier : ./src/Backend/Controller/Etudiant/DocumentEtudiantController.php
    class DocumentEtudiantController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Etudiant/EtudiantDashboardController.php
    class EtudiantDashboardController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Etudiant/ProfilEtudiantController.php
    class ProfilEtudiantController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Etudiant/RapportController.php
    class RapportController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/Etudiant/ReclamationEtudiantController.php
    class ReclamationEtudiantController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/HomeController.php
    class HomeController extends BaseController
    public function home(): void
--------------------------------------------
Fichier : ./src/Backend/Controller/PersonnelAdministratif/CommunicationInterneController.php
    class CommunicationInterneController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/PersonnelAdministratif/ConformiteController.php
    class ConformiteController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/PersonnelAdministratif/PersonnelDashboardController.php
    class PersonnelDashboardController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Controller/PersonnelAdministratif/ScolariteController.php
    class ScolariteController {
    public function __construct() {
    public function index() {
    public function create() {
    public function update($id) {
    public function delete($id) {
--------------------------------------------
Fichier : ./src/Backend/Exception/AuthenticationException.php
    class AuthenticationException extends \RuntimeException
    public function __construct(string $message = "Erreur d'authentification.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/CompteBloqueException.php
    class CompteBloqueException extends AuthenticationException
    public function __construct(string $message = "Le compte est bloqué.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/CompteNonValideException.php
    class CompteNonValideException extends AuthenticationException
    public function __construct(string $message = "Le compte n'est pas dans un état valide pour cette opération (ex: non activé, email non validé).", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/DoublonException.php
    class DoublonException extends \RuntimeException
    public function __construct(string $message = "Une ressource avec des attributs uniques similaires existe déjà.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/ElementNonTrouveException.php
    class ElementNonTrouveException extends \RuntimeException
    public function __construct(string $message = "L'élément demandé n'a pas été trouvé.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/EmailException.php
    class EmailException extends \RuntimeException
    public function __construct(string $message = "Une erreur s'est produite lors de l'envoi de l'email.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/EmailNonValideException.php
    class EmailNonValideException extends \InvalidArgumentException
    public function __construct(string $message = "L'adresse email n'est pas valide ou est déjà utilisée.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/IdentifiantsInvalidesException.php
    class IdentifiantsInvalidesException extends AuthenticationException
    public function __construct(string $message = "Identifiants invalides.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/ModeleNonTrouveException.php
    class ModeleNonTrouveException extends \InvalidArgumentException
    public function __construct(string $message = "Le modèle demandé n'a pas été trouvé.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/MotDePasseInvalideException.php
    class MotDePasseInvalideException extends \InvalidArgumentException
    public function __construct(string $message = "Le mot de passe fourni est invalide ou ne respecte pas les critères.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/OperationImpossibleException.php
    class OperationImpossibleException extends \LogicException
    public function __construct(string $message = "L'opération demandée ne peut être effectuée.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/PermissionException.php
    class PermissionException extends \RuntimeException
    public function __construct(string $message = "Permission refusée.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/TokenExpireException.php
    class TokenExpireException extends TokenInvalideException
    public function __construct(string $message = "Le token a expiré.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/TokenInvalideException.php
    class TokenInvalideException extends \InvalidArgumentException
    public function __construct(string $message = "Le token fourni est invalide.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/UtilisateurNonTrouveException.php
    class UtilisateurNonTrouveException extends \RuntimeException
    public function __construct(string $message = "L'utilisateur n'a pas été trouvé.", int $code = 0, ?\Throwable $previous = null)
--------------------------------------------
Fichier : ./src/Backend/Exception/ValidationException.php
    class ValidationException extends \InvalidArgumentException
    public function __construct(string $message = "Erreur de validation des données.", array $errors = [], int $code = 0, ?\Throwable $previous = null)
    public function getErrors(): array
--------------------------------------------
Fichier : ./src/Backend/Model/Acquerir.php
    class Acquerir extends BaseModel
    public function trouverAcquisitionParCles(string $idGrade, string $numeroEnseignant, array $colonnes = ['*']): ?array
    public function mettreAJourAcquisitionParCles(string $idGrade, string $numeroEnseignant, array $donnees): bool
    public function supprimerAcquisitionParCles(string $idGrade, string $numeroEnseignant): bool
--------------------------------------------
Fichier : ./src/Backend/Model/Action.php
    class Action extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Affecter.php
    class Affecter extends BaseModel
    public function trouverAffectationParCles(string $numeroEnseignant, string $idRapportEtudiant, string $idStatutJury, array $colonnes = ['*']): ?array
    public function mettreAJourAffectationParCles(string $numeroEnseignant, string $idRapportEtudiant, string $idStatutJury, array $donnees): bool
    public function supprimerAffectationParCles(string $numeroEnseignant, string $idRapportEtudiant, string $idStatutJury): bool
--------------------------------------------
Fichier : ./src/Backend/Model/AnneeAcademique.php
    class AnneeAcademique extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Approuver.php
    class Approuver extends BaseModel
    public function trouverApprobationParCles(string $numeroPersonnelAdministratif, string $idRapportEtudiant, array $colonnes = ['*']): ?array
    public function mettreAJourApprobationParCles(string $numeroPersonnelAdministratif, string $idRapportEtudiant, array $donnees): bool
    public function supprimerApprobationParCles(string $numeroPersonnelAdministratif, string $idRapportEtudiant): bool
--------------------------------------------
Fichier : ./src/Backend/Model/Attribuer.php
    class Attribuer extends BaseModel
    public function trouverAttributionParCles(string $numeroEnseignant, string $idSpecialite, array $colonnes = ['*']): ?array
    public function mettreAJourAttributionParCles(string $numeroEnseignant, string $idSpecialite, array $donnees): bool
    public function supprimerAttributionParCles(string $numeroEnseignant, string $idSpecialite): bool
--------------------------------------------
Fichier : ./src/Backend/Model/BaseModel.php
    abstract class BaseModel
    public function __construct(PDO $db)
    public function getClePrimaire(): string
    public function getTable(): string
    protected function preparerListeColonnes(array $colonnes): string
    public function trouverTout(array $colonnes = ['*']): array
    public function trouverParIdentifiant(int|string $id, array $colonnes = ['*']): ?array
    public function creer(array $donnees): string|bool
    public function mettreAJourParIdentifiant(int|string $id, array $donnees): bool
    public function supprimerParIdentifiant(int|string $id): bool
    public function trouverParCritere(array $criteres, array $colonnes = ['*'], string $operateurLogique = 'AND', ?string $orderBy = null, ?int $limit = null, ?int $offset = null): array
    public function trouverUnParCritere(array $criteres, array $colonnes = ['*'], string $operateurLogique = 'AND', ?string $orderBy = null): ?array
    public function compterParCritere(array $criteres, string $operateurLogique = 'AND'): int
    public function executerRequete(string $sql, array $parametres = []): PDOStatement
    public function commencerTransaction(): void
    public function validerTransaction(): void
    public function annulerTransaction(): void
--------------------------------------------
Fichier : ./src/Backend/Model/CompteRendu.php
    class CompteRendu extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Conversation.php
    class Conversation extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/DecisionPassageRef.php
    class DecisionPassageRef extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/DecisionValidationPvRef.php
    class DecisionValidationPvRef extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/DecisionVoteRef.php
    class DecisionVoteRef extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/DocumentSoumis.php
    class DocumentSoumis extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Donner.php
    class Donner extends BaseModel
    public function trouverDonParCles(string $numeroEnseignant, string $idNiveauApprobation, array $colonnes = ['*']): ?array
    public function mettreAJourDonParCles(string $numeroEnseignant, string $idNiveauApprobation, array $donnees): bool
    public function supprimerDonParCles(string $numeroEnseignant, string $idNiveauApprobation): bool
--------------------------------------------
Fichier : ./src/Backend/Model/Ecue.php
    class Ecue extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Enregistrer.php
    class Enregistrer extends BaseModel
    public function trouverEnregistrementParCles(string $numeroUtilisateur, string $idAction, string $dateAction, array $colonnes = ['*']): ?array
    public function mettreAJourEnregistrementParCles(string $numeroUtilisateur, string $idAction, string $dateAction, array $donnees): bool
    public function supprimerEnregistrementParCles(string $numeroUtilisateur, string $idAction, string $dateAction): bool
--------------------------------------------
Fichier : ./src/Backend/Model/Enseignant.php
    class Enseignant extends BaseModel
    public function trouverParNumeroEnseignant(string $numeroEnseignant, array $colonnes = ['*']): ?array
--------------------------------------------
Fichier : ./src/Backend/Model/Entreprise.php
    class Entreprise extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Etudiant.php
    class Etudiant extends BaseModel
    public function trouverParNumeroCarteEtudiant(string $numeroCarteEtudiant, array $colonnes = ['*']): ?array
--------------------------------------------
Fichier : ./src/Backend/Model/Evaluer.php
    class Evaluer extends BaseModel
    public function trouverEvaluationParCles(string $numeroCarteEtudiant, string $numeroEnseignant, string $idEcue, array $colonnes = ['*']): ?array
    public function mettreAJourEvaluationParCles(string $numeroCarteEtudiant, string $numeroEnseignant, string $idEcue, array $donnees): bool
    public function supprimerEvaluationParCles(string $numeroCarteEtudiant, string $numeroEnseignant, string $idEcue): bool
--------------------------------------------
Fichier : ./src/Backend/Model/FaireStage.php
    class FaireStage extends BaseModel
    public function trouverStageParCles(string $idEntreprise, string $numeroCarteEtudiant, array $colonnes = ['*']): ?array
    public function mettreAJourStageParCles(string $idEntreprise, string $numeroCarteEtudiant, array $donnees): bool
    public function supprimerStageParCles(string $idEntreprise, string $numeroCarteEtudiant): bool
--------------------------------------------
Fichier : ./src/Backend/Model/Fonction.php
    class Fonction extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Grade.php
    class Grade extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/GroupeUtilisateur.php
    class GroupeUtilisateur extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/HistoriqueMotDePasse.php
    class HistoriqueMotDePasse extends BaseModel
    public function __construct(PDO $db)
    public function recupererHistoriquePourUtilisateur(string $numeroUtilisateur, int $limite = 5, array $colonnes = ['mot_de_passe_hache', 'date_changement', 'id_historique_mdp']): array
    public function supprimerPlusieursParIdentifiants(array $idsHistorique): bool
    public function compterPourUtilisateur(string $numeroUtilisateur): int
--------------------------------------------
Fichier : ./src/Backend/Model/Inscrire.php
    class Inscrire extends BaseModel
    public function trouverParCleComposite(string $numeroCarteEtudiant, string $idNiveauEtude, string $idAnneeAcademique, array $colonnes = ['*']): ?array
    public function mettreAJourParCleComposite(string $numeroCarteEtudiant, string $idNiveauEtude, string $idAnneeAcademique, array $donnees): bool
    public function supprimerParCleComposite(string $numeroCarteEtudiant, string $idNiveauEtude, string $idAnneeAcademique): bool
--------------------------------------------
Fichier : ./src/Backend/Model/LectureMessage.php
    class LectureMessage extends BaseModel
    public function trouverLectureParCles(string $idMessageChat, string $numeroUtilisateur, array $colonnes = ['*']): ?array
    public function mettreAJourLectureParCles(string $idMessageChat, string $numeroUtilisateur, array $donnees): bool
    public function supprimerLectureParCles(string $idMessageChat, string $numeroUtilisateur): bool
--------------------------------------------
Fichier : ./src/Backend/Model/Message.php
    class Message extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/MessageChat.php
    class MessageChat extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/NiveauAccesDonne.php
    class NiveauAccesDonne extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/NiveauApprobation.php
    class NiveauApprobation extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/NiveauEtude.php
    class NiveauEtude extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Notification.php
    class Notification extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Occuper.php
    class Occuper extends BaseModel
    public function trouverOccupationParCles(string $idFonction, string $numeroEnseignant, array $colonnes = ['*']): ?array
    public function mettreAJourOccupationParCles(string $idFonction, string $numeroEnseignant, array $donnees): bool
    public function supprimerOccupationParCles(string $idFonction, string $numeroEnseignant): bool
--------------------------------------------
Fichier : ./src/Backend/Model/ParticipantConversation.php
    class ParticipantConversation extends BaseModel
    public function trouverParticipantParCles(string $idConversation, string $numeroUtilisateur, array $colonnes = ['*']): ?array
    public function supprimerParticipantParCles(string $idConversation, string $numeroUtilisateur): bool
--------------------------------------------
Fichier : ./src/Backend/Model/PersonnelAdministratif.php
    class PersonnelAdministratif extends BaseModel
    public function trouverParNumeroPersonnelAdministratif(string $numeroPersonnelAdministratif, array $colonnes = ['*']): ?array
--------------------------------------------
Fichier : ./src/Backend/Model/Pister.php
    class Pister extends BaseModel
    public function trouverPisteParCles(string $numeroUtilisateur, string $idTraitement, string $datePister, array $colonnes = ['*']): ?array
    public function mettreAJourPisteParCles(string $numeroUtilisateur, string $idTraitement, string $datePister, array $donnees): bool
    public function supprimerPisteParCles(string $numeroUtilisateur, string $idTraitement, string $datePister): bool
--------------------------------------------
Fichier : ./src/Backend/Model/PvSessionRapport.php
    class PvSessionRapport extends BaseModel
    public function trouverLiaisonPvSessionRapportParCles(string $idCompteRendu, string $idRapportEtudiant, array $colonnes = ['*']): ?array
    public function supprimerLiaisonPvSessionRapportParCles(string $idCompteRendu, string $idRapportEtudiant): bool
--------------------------------------------
Fichier : ./src/Backend/Model/RapportEtudiant.php
    class RapportEtudiant extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Rattacher.php
    class Rattacher extends BaseModel
    public function trouverRattachementParCles(string $idGroupeUtilisateur, string $idTraitement, array $colonnes = ['*']): ?array
    public function supprimerRattachementParCles(string $idGroupeUtilisateur, string $idTraitement): bool
--------------------------------------------
Fichier : ./src/Backend/Model/Recevoir.php
    class Recevoir extends BaseModel
    public function trouverReceptionParCles(string $numeroUtilisateur, string $idNotification, string $dateReception, array $colonnes = ['*']): ?array
    public function mettreAJourReceptionParCles(string $numeroUtilisateur, string $idNotification, string $dateReception, array $donnees): bool
    public function supprimerReceptionParCles(string $numeroUtilisateur, string $idNotification, string $dateReception): bool
--------------------------------------------
Fichier : ./src/Backend/Model/Reclamation.php
    class Reclamation extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Rendre.php
    class Rendre extends BaseModel
    public function trouverActionRenduParCles(string $numeroEnseignant, string $idCompteRendu, array $colonnes = ['*']): ?array
    public function mettreAJourActionRenduParCles(string $numeroEnseignant, string $idCompteRendu, array $donnees): bool
    public function supprimerActionRenduParCles(string $numeroEnseignant, string $idCompteRendu): bool
--------------------------------------------
Fichier : ./src/Backend/Model/Specialite.php
    class Specialite extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/StatutConformiteRef.php
    class StatutConformiteRef extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/StatutJury.php
    class StatutJury extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/StatutPaiementRef.php
    class StatutPaiementRef extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/StatutPvRef.php
    class StatutPvRef extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/StatutRapportRef.php
    class StatutRapportRef extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/StatutReclamationRef.php
    class StatutReclamationRef extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Traitement.php
    class Traitement extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/TypeDocumentRef.php
    class TypeDocumentRef extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/TypeUtilisateur.php
    class TypeUtilisateur extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Ue.php
    class Ue extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Model/Utilisateur.php
    class Utilisateur extends BaseModel
    protected function preparerListeColonnes(array $colonnes): string
    public function trouverParNumeroUtilisateur(string $numeroUtilisateur, array $colonnes = ['*']): ?array
    public function trouverParLoginOuEmailPrincipal(string $identifiant, array $colonnes = ['*']): ?array
    public function trouverParLoginUtilisateur(string $login, array $colonnes = ['*']): ?array
    public function trouverParEmailPrincipal(string $email, array $colonnes = ['*']): ?array
    public function trouverParTokenResetMdp(string $tokenClair, array $colonnes = ['*']): ?array
    public function trouverParTokenValidationEmailHache(string $tokenHache, array $colonnes = ['*']): ?array
    public function mettreAJourChamps(string $numeroUtilisateur, array $champsValeurs): bool
    public function loginExiste(string $login, ?string $numeroUtilisateurExclure = null): bool
    public function emailPrincipalExiste(string $email, ?string $numeroUtilisateurExclure = null): bool
--------------------------------------------
Fichier : ./src/Backend/Model/ValidationPv.php
    class ValidationPv extends BaseModel
    public function trouverValidationPvParCles(string $idCompteRendu, string $numeroEnseignant, array $colonnes = ['*']): ?array
    public function mettreAJourValidationPvParCles(string $idCompteRendu, string $numeroEnseignant, array $donnees): bool
    public function supprimerValidationPvParCles(string $idCompteRendu, string $numeroEnseignant): bool
--------------------------------------------
Fichier : ./src/Backend/Model/Valider.php
    class Valider extends BaseModel
    public function trouverValidationRapportParCles(string $numeroEnseignant, string $idRapportEtudiant, array $colonnes = ['*']): ?array
    public function mettreAJourValidationRapportParCles(string $numeroEnseignant, string $idRapportEtudiant, array $donnees): bool
    public function supprimerValidationRapportParCles(string $numeroEnseignant, string $idRapportEtudiant): bool
--------------------------------------------
Fichier : ./src/Backend/Model/VoteCommission.php
    class VoteCommission extends BaseModel
--------------------------------------------
Fichier : ./src/Backend/Service/Authentication/ServiceAuthenticationInterface.php
    public function tenterConnexion(string $identifiant, string $motDePasse): object;
    public function traiterTentativeConnexionEchoueePourUtilisateur(string $numeroUtilisateur): void;
    public function reinitialiserTentativesConnexion(string $numeroUtilisateur): void;
    public function estCompteActuellementBloque(string $numeroUtilisateur): bool;
    public function genererEtStockerSecret2FA(string $numeroUtilisateur): string;
    public function activerAuthentificationDeuxFacteurs(string $numeroUtilisateur, string $codeTOTPVerifie): bool;
    public function verifierCodeAuthentificationDeuxFacteurs(string $numeroUtilisateur, string $codeTOTP): bool;
    public function desactiverAuthentificationDeuxFacteurs(string $numeroUtilisateur): bool;
    public function demarrerSessionUtilisateur(object $utilisateurAvecProfil): void;
    public function estUtilisateurConnecteEtSessionValide(): bool;
    public function getUtilisateurConnecteComplet(): ?object;
    public function terminerSessionUtilisateur(): void;
    public function creerCompteUtilisateurComplet(array $donneesUtilisateur, array $donneesProfil, string $idTypeUtilisateurProfil, bool $envoyerEmailValidation = true): string;
    public function genererNumeroUtilisateurUniqueNonSequentiel(): string;
    public function envoyerEmailValidationCompte(string $numeroUtilisateur, string $emailPrincipal, string $tokenValidation): void;
    public function validerCompteEmailViaToken(string $tokenValidation): bool;
    public function recupererUtilisateurCompletParNumero(string $numeroUtilisateur): ?object;
    public function recupererUtilisateurCompletParEmailPrincipal(string $emailPrincipal): ?object;
    public function recupererUtilisateurCompletParLogin(string $login): ?object;
    public function listerUtilisateursAvecProfils(array $criteres = [], int $page = 1, int $elementsParPage = 25): array;
    public function modifierMotDePasse(string $numeroUtilisateur, string $nouveauMotDePasseClair, ?string $ancienMotDePasseClair = null, bool $parAdmin = false): bool;
    public function mettreAJourProfilUtilisateur(string $numeroUtilisateur, string $idTypeUtilisateurProfil, array $donneesProfil): bool;
    public function mettreAJourCompteUtilisateurParAdmin(string $numeroUtilisateur, array $donneesCompte): bool;
    public function changerStatutDuCompte(string $numeroUtilisateur, string $nouveauStatut, ?string $raison = null): bool;
    public function verifierRobustesseMotDePasse(string $motDePasse): array;
    public function demanderReinitialisationMotDePasse(string $emailPrincipal): bool;
    public function validerTokenReinitialisationMotDePasse(string $token): string;
    public function reinitialiserMotDePasseApresValidationToken(string $token, string $nouveauMotDePasseClair): bool;
    public function recupererEmailSourceDuProfil(string $numeroUtilisateur): ?string;
    public function estNouveauMotDePasseDansHistorique(string $numeroUtilisateur, string $nouveauMotDePasseClair, int $limiteHistorique = 3): bool;
    public function journaliserActionAuthentification(?string $numeroUtilisateurActeur, string $numeroUtilisateurConcerne, string $idActionSysteme, string $resultat, ?array $details = null): void;
--------------------------------------------
Fichier : ./src/Backend/Service/Authentication/ServiceAuthentification.php
    class ServiceAuthentification implements ServiceAuthenticationInterface
    public function __construct(
    public function traiterTentativeConnexionEchoueePourUtilisateur(string $numeroUtilisateur): void
    public function estUtilisateurConnecteEtSessionValide(): bool
    public function terminerSessionUtilisateur(): void
    public function tenterConnexion(string $identifiant, string $motDePasse): object
    public function reinitialiserTentativesConnexion(string $numeroUtilisateur): void
    public function estCompteActuellementBloque(string $numeroUtilisateur): bool
    public function genererEtStockerSecret2FA(string $numeroUtilisateur): string
    public function activerAuthentificationDeuxFacteurs(string $numeroUtilisateur, string $codeTOTPVerifie): bool
    public function verifierCodeAuthentificationDeuxFacteurs(string $numeroUtilisateur, string $codeTOTP): bool
    public function desactiverAuthentificationDeuxFacteurs(string $numeroUtilisateur): bool
    public function demarrerSessionUtilisateur(object $utilisateurAvecProfil): void
    public function getUtilisateurConnecteComplet(): ?object
    public function creerCompteUtilisateurComplet(array $donneesUtilisateur, array $donneesProfil, string $typeProfilLibelle, bool $envoyerEmailValidation = true): string
    public function genererNumeroUtilisateurUniqueNonSequentiel(): string
    public function envoyerEmailValidationCompte(string $numeroUtilisateur, string $emailPrincipal, string $tokenValidation): void
    public function validerCompteEmailViaToken(string $tokenValidation): bool
    private function construireObjetUtilisateurComplet(array $utilisateurBase): ?object
    private function recupererLibelleTableRef(string $table, string $colonneId, ?string $valeurId, string $colonneLibelle): ?string
    public function recupererUtilisateurCompletParNumero(string $numeroUtilisateur): ?object
    public function recupererUtilisateurCompletParEmailPrincipal(string $emailPrincipal): ?object
    public function recupererUtilisateurCompletParLogin(string $login): ?object
    public function listerUtilisateursAvecProfils(array $criteres = [], int $page = 1, int $elementsParPage = 25): array
    public function modifierMotDePasse(string $numeroUtilisateur, string $nouveauMotDePasseClair, ?string $ancienMotDePasseClair = null, bool $parAdmin = false): bool
    public function mettreAJourProfilUtilisateur(string $numeroUtilisateur, string $typeProfilLibelle, array $donneesProfil): bool
    public function mettreAJourCompteUtilisateurParAdmin(string $numeroUtilisateur, array $donneesCompte): bool
    public function changerStatutDuCompte(string $numeroUtilisateur, string $nouveauStatut, ?string $raison = null): bool
    public function verifierRobustesseMotDePasse(string $motDePasse): array
    public function demanderReinitialisationMotDePasse(string $emailPrincipal): bool
    public function validerTokenReinitialisationMotDePasse(string $token): string
    public function reinitialiserMotDePasseApresValidationToken(string $token, string $nouveauMotDePasseClair): bool
    public function recupererEmailSourceDuProfil(string $numeroUtilisateur): ?string
    public function estNouveauMotDePasseDansHistorique(string $numeroUtilisateur, string $nouveauMotDePasseClair, int $limiteHistorique = 3): bool
    public function journaliserActionAuthentification(?string $numeroUtilisateurActeur, string $numeroUtilisateurConcerne, string $libelleAction, string $resultat, ?array $details = null): void
    private function mettreAJourDerniereConnexion(string $numeroUtilisateur): void
    private function getIdTypeUtilisateurParLibelle(string $libelleTypeUtilisateur): ?string
    private function getIdGroupeUtilisateurParLibelle(string $libelleGroupeUtilisateur): ?string
    private function getDefaultGroupIdForTypeLibelle(string $typeProfilLibelle): ?string
    private function getDefaultNiveauAccesId(): string
    private function getTableProfilParIdType(?string $idTypeUtilisateur): ?string
    private function getChampEmailProfilParIdType(?string $idTypeUtilisateur): ?string
    private function validerDonneesCreationCompteGlobale(array $donneesUtilisateur, array $donneesProfil, string $typeProfilLibelle): void
    private function extraireEmailDuProfilConcret(array $donneesProfil, string $typeProfilLibelle): ?string
    private function creerProfilSpecifiqueAssocie(string $numeroUtilisateur, array $donneesProfil, string $idTypeUtilisateur): void
    private function getInfosColonneTableProfil(string $nomTable, string $nomColonne): ?array
    private function getColonnesAttenduesPourTableProfil(string $tableProfil): array {
    private function getModelPourTableProfil(string $tableProfil): BaseModel
    private function ajouterMotDePasseHistorique(string $numeroUtilisateur, string $motDePasseHache): void
    private function nettoyerHistoriqueMotDePasse(string $numeroUtilisateur): void
    private function genererEtStockerTokenPourUtilisateur(string $numeroUtilisateur, string $nomChampToken): array
    private function genererIdUniquePourTable(string $table, string $prefix = '', int $longueurSuffixeHex = 10): string
    public function __construct(PDO $db) {
    public function configure(string $tableName, string $primaryKeyName) {
--------------------------------------------
Fichier : ./src/Backend/Service/Commission/ServiceCommission.php
    class ServiceCommission
    public function __construct(
    public function affecterEnseignantAJuryRapport(string $numeroEnseignant, int $idRapportEtudiant, int $idStatutJury, bool $estDirecteurMemoire = false): bool
    public function enregistrerVotePourRapport(int $idRapportEtudiant, string $numeroEnseignant, int $idDecisionVote, ?string $commentaireVote, int $tourVote = 1): bool
    public function finaliserDecisionCommissionPourRapport(int $idRapportEtudiant, int $idStatutRapportFinal, array $recommandations = []): bool
    public function redigerOuMettreAJourPv(string $idRedacteur, string $libellePv, string $typePv = 'Individuel', ?int $idRapportEtudiant = null, array $idsRapportsSession = [], ?int $idCompteRenduExistant = null): ?int
    public function soumettrePvPourValidation(int $idCompteRendu): bool
    public function validerOuRejeterPv(int $idCompteRendu, string $numeroEnseignantValidateur, int $idDecisionValidationPv, ?string $commentaireValidation): bool
--------------------------------------------
Fichier : ./src/Backend/Service/Commission/ServiceCommissionInterface.php
--------------------------------------------
Fichier : ./src/Backend/Service/ConfigurationSysteme/ServiceConfigurationSysteme.php
    class ServiceConfigurationSysteme
    public function __construct(
    public function definirAnneeAcademiqueActive(int $idAnneeAcademique): bool
    public function mettreAJourParametresGeneraux(array $parametres): bool
    public function gererModeleNotificationEmail(int $idMessage, array $donnees): bool
    public function listerAnneesAcademiques(): array
    public function listerTypesDocument(): array
--------------------------------------------
Fichier : ./src/Backend/Service/ConfigurationSysteme/ServiceConfigurationSystemeInterface.php
--------------------------------------------
Fichier : ./src/Backend/Service/Conformite/ServiceConformite.php
    class ServiceConformite
    public function __construct(
    public function traiterVerificationConformite(int $idRapportEtudiant, string $numeroPersonnelAdministratif, int $idStatutConformite, ?string $commentaireConformite): bool
    public function recupererRapportsEnAttenteDeVerification(): array
    public function recupererRapportsTraitesParAgent(string $numeroPersonnelAdministratif): array
--------------------------------------------
Fichier : ./src/Backend/Service/Conformite/ServiceConformiteInterface.php
--------------------------------------------
Fichier : ./src/Backend/Service/DocumentGenerator/ServiceDocumentGenerator.php
--------------------------------------------
Fichier : ./src/Backend/Service/DocumentGenerator/ServiceDocumentGeneratorInterface.php
--------------------------------------------
Fichier : ./src/Backend/Service/Email/ServiceEmail.php
    class ServiceEmail implements ServiceEmailInterface
    public function __construct(
    public function envoyerEmail(
    public function envoyerEmailAvecModele(
--------------------------------------------
Fichier : ./src/Backend/Service/Email/ServiceEmailInterface.php
    public function envoyerEmail(
    public function envoyerEmailAvecModele(
--------------------------------------------
Fichier : ./src/Backend/Service/GestionAcademique/ServiceGestionAcademique.php
    class ServiceGestionAcademique implements ServiceGestionAcademiqueInterface // <-- AJOUTÉ: implements ServiceGestionAcademiqueInterface
    public function __construct(
    public function creerInscriptionAdministrative(string $numeroCarteEtudiant, int $idNiveauEtude, int $idAnneeAcademique, float $montantInscription, string $dateInscription, int $idStatutPaiement, ?string $datePaiement, ?string $numeroRecuPaiement, ?int $idDecisionPassage): ?array
    public function mettreAJourInscriptionAdministrative(string $numeroCarteEtudiant, int $idNiveauEtude, int $idAnneeAcademique, array $donneesAMettreAJour): bool
    public function enregistrerNoteEcue(string $numeroCarteEtudiant, string $numeroEnseignantEvaluateur, int $idEcue, float $note, string $dateEvaluation): bool
    public function enregistrerInformationsStage(string $numeroCarteEtudiant, int $idEntreprise, string $dateDebutStage, ?string $dateFinStage, ?string $sujetStage, ?string $nomTuteurEntreprise): bool
    public function lierGradeAEnseignant(string $numeroEnseignant, int $idGrade, string $dateAcquisition): bool
    public function lierFonctionAEnseignant(string $numeroEnseignant, int $idFonction, string $dateDebutOccupation, ?string $dateFinOccupation): bool
    public function lierSpecialiteAEnseignant(string $numeroEnseignant, int $idSpecialite): bool
--------------------------------------------
Fichier : ./src/Backend/Service/GestionAcademique/ServiceGestionAcademiqueInterface.php
    public function creerInscriptionAdministrative(
    public function mettreAJourInscriptionAdministrative(
    public function enregistrerNoteEcue(
    public function enregistrerInformationsStage(
    public function lierGradeAEnseignant(
    public function lierFonctionAEnseignant(
    public function lierSpecialiteAEnseignant(
--------------------------------------------
Fichier : ./src/Backend/Service/Messagerie/ServiceMessagerie.php
    class ServiceMessagerie
    public function __construct(
    public function demarrerOuRecupererConversationDirecte(string $numeroUtilisateurA, string $numeroUtilisateurB): ?int
    public function creerNouvelleConversationDeGroupe(string $nomConversation, array $numerosParticipantsInitiateurs, string $numeroCreateur): ?int
    public function envoyerMessageDansConversation(int $idConversation, string $numeroUtilisateurExpediteur, string $contenuMessage): ?int
    public function recupererMessagesDuneConversation(int $idConversation, int $limite = 20, int $offset = 0): array
    public function listerConversationsPourUtilisateur(string $numeroUtilisateur): array
    public function marquerMessagesCommeLus(int $idConversation, string $numeroUtilisateurLecteur): bool
    public function ajouterParticipant(int $idConversation, string $numeroUtilisateurAAjouter, string $numeroUtilisateurQuiAjoute): bool
    public function retirerParticipant(int $idConversation, string $numeroUtilisateurARetirer, string $numeroUtilisateurQuiRetire): bool
--------------------------------------------
Fichier : ./src/Backend/Service/Messagerie/ServiceMessagerieInterface.php
--------------------------------------------
Fichier : ./src/Backend/Service/Notification/ServiceNotification.php
    class ServiceNotification
    public function __construct(
    public function envoyerNotificationUtilisateur(string $numeroUtilisateurDestinataire, int $idTypeNotification, string $messageDetail): bool
    public function envoyerNotificationGroupe(int $idGroupeUtilisateurDestinataire, int $idTypeNotification, string $messageDetail): bool
    public function recupererNotificationsUtilisateur(string $numeroUtilisateur, bool $nonLuesSeulement = false, int $limite = 10): array
    public function marquerNotificationCommeLue(int $idRecevoirNotification, string $numeroUtilisateurVerif): bool
    public function compterNotificationsNonLues(string $numeroUtilisateur): int
    public function archiverAnciennesNotificationsLues(int $joursAvantArchivage = 30): int
--------------------------------------------
Fichier : ./src/Backend/Service/Notification/ServiceNotificationInterface.php
--------------------------------------------
Fichier : ./src/Backend/Service/Permissions/ServicePermissions.php
    class ServicePermissions implements ServicePermissionsInterface
    public function __construct(PDO $db, ServiceSupervisionAdminInterface $serviceSupervision)
    public function creerGroupeUtilisateur(string $idGroupeUtilisateur, string $libelle): string
    public function modifierGroupeUtilisateur(string $idGroupeUtilisateur, string $libelle): bool
    public function supprimerGroupeUtilisateur(string $idGroupeUtilisateur): bool
    public function recupererGroupeUtilisateurParId(string $idGroupeUtilisateur): ?array
    // public function recupererGroupeUtilisateurParCode(string $codeGroupe): ?array
    public function listerGroupesUtilisateur(): array
    public function creerTypeUtilisateur(string $libelle, ?string $description, ?string $codeType = null): int
    public function recupererGroupeUtilisateurParCode(string $codeGroupe): ?array
    public function modifierTypeUtilisateur(int $idType, string $libelle, ?string $description, ?string $codeType = null): bool { /* ... à vérifier ... */ return false; }
    public function supprimerTypeUtilisateur(int $idType): bool { /* ... à vérifier ... */ return false; }
    public function recupererTypeUtilisateurParId(int $idType): ?array { /* ... à vérifier ... */ return null; }
    public function recupererTypeUtilisateurParCode(string $codeType): ?array { /* ... à vérifier, probablement à supprimer ou modifier si pas de code_type_utilisateur ... */ return null; }
    public function listerTypesUtilisateur(): array { /* ... à vérifier ... */ return []; }
    public function creerNiveauAcces(string $libelle, ?string $description, ?string $codeNiveauAcces = null): int { /* ... à vérifier ... */ return 0; }
    public function modifierNiveauAcces(int $idNiveau, string $libelle, ?string $description, ?string $codeNiveauAcces = null): bool { /* ... à vérifier ... */ return false; }
    public function supprimerNiveauAcces(int $idNiveau): bool { /* ... à vérifier ... */ return false; }
    public function recupererNiveauAccesParId(int $idNiveau): ?array { /* ... à vérifier ... */ return null; }
    public function recupererNiveauAccesParCode(string $codeNiveauAcces): ?array { /* ... à vérifier, probablement à supprimer ou modifier si pas de code_niveau_acces ... */ return null; }
    public function listerNiveauxAcces(): array { /* ... à vérifier ... */ return []; }
    public function creerTraitement(string $libelleTraitement, string $codeTraitement): int { /* ... à vérifier ... */ return 0; }
    public function modifierTraitement(int $idTraitement, string $libelleTraitement, string $codeTraitement): bool { /* ... à vérifier ... */ return false; }
    public function supprimerTraitement(int $idTraitement): bool { /* ... à vérifier ... */ return false; }
    public function recupererTraitementParId(int $idTraitement): ?array { /* ... à vérifier ... */ return null; }
    public function recupererTraitementParCode(string $codeTraitement): ?array { /* ... à vérifier ... */ return null; } // Cette méthode semble valide si la table traitement a un code_traitement
    public function listerTraitements(): array { /* ... à vérifier ... */ return []; }
    public function attribuerPermissionGroupe(string $idGroupeUtilisateur, int $idTraitement): bool { /* idGroupeUtilisateur doit être string ici */ return false; } // Changé le premier paramètre en string
    public function retirerPermissionGroupe(string $idGroupeUtilisateur, int $idTraitement): bool { /* idGroupeUtilisateur doit être string ici */ return false; } // Changé le premier paramètre en string
    public function recupererPermissionsPourGroupe(string $idGroupeUtilisateur): array { /* idGroupeUtilisateur doit être string ici */ return []; } // Changé le premier paramètre en string
    public function recupererGroupesPourPermission(int $idTraitement): array { /* ... à vérifier ... */ return []; }
    public function utilisateurPossedePermission(string $numeroUtilisateur, string $codePermission): bool
    public function groupePossedePermission(string $idGroupeUtilisateur, string $codePermission): bool // Changé le premier paramètre en string
    public function getPermissionsPourUtilisateur(string $numeroUtilisateur): array
--------------------------------------------
Fichier : ./src/Backend/Service/Permissions/ServicePermissionsInterface.php
    public function creerGroupeUtilisateur(string $idGroupeUtilisateur, string $libelle): string;
    public function modifierGroupeUtilisateur(string $idGroupeUtilisateur, string $libelle): bool;
    public function supprimerGroupeUtilisateur(string $idGroupeUtilisateur): bool;
    public function recupererGroupeUtilisateurParId(string $idGroupeUtilisateur): ?array;
    public function listerGroupesUtilisateur(): array;
    // public function recupererGroupeUtilisateurParCode(string $codeGroupe): ?array;
    public function creerTypeUtilisateur(string $libelle, ?string $description, ?string $codeType = null): int; // Signature de votre dernier code fourni
    public function modifierTypeUtilisateur(int $idType, string $libelle, ?string $description, ?string $codeType = null): bool; // Signature de votre dernier code fourni
    public function supprimerTypeUtilisateur(int $idType): bool; // Signature de votre dernier code fourni
    public function recupererTypeUtilisateurParId(int $idType): ?array; // Signature de votre dernier code fourni
    public function recupererTypeUtilisateurParCode(string $codeType): ?array;
    public function listerTypesUtilisateur(): array;
    public function creerNiveauAcces(string $libelle, ?string $description, ?string $codeNiveauAcces = null): int; // Signature de votre dernier code fourni
    public function modifierNiveauAcces(int $idNiveau, string $libelle, ?string $description, ?string $codeNiveauAcces = null): bool; // Signature de votre dernier code fourni
    public function supprimerNiveauAcces(int $idNiveau): bool; // Signature de votre dernier code fourni
    public function recupererNiveauAccesParId(int $idNiveau): ?array; // Signature de votre dernier code fourni
    public function recupererNiveauAccesParCode(string $codeNiveauAcces): ?array;
    public function listerNiveauxAcces(): array;
    public function creerTraitement(string $libelleTraitement, string $codeTraitement): int; // Signature de votre dernier code fourni
    public function modifierTraitement(int $idTraitement, string $libelleTraitement, string $codeTraitement): bool; // Signature de votre dernier code fourni
    public function supprimerTraitement(int $idTraitement): bool; // Signature de votre dernier code fourni
    public function recupererTraitementParId(int $idTraitement): ?array; // Signature de votre dernier code fourni
    public function recupererTraitementParCode(string $codeTraitement): ?array; // Signature de votre dernier code fourni
    public function listerTraitements(): array;
    public function attribuerPermissionGroupe(string $idGroupeUtilisateur, int $idTraitement): bool;
    public function retirerPermissionGroupe(string $idGroupeUtilisateur, int $idTraitement): bool;
    public function recupererPermissionsPourGroupe(string $idGroupeUtilisateur): array;
    public function recupererGroupesPourPermission(int $idTraitement): array;
    public function utilisateurPossedePermission(string $numeroUtilisateur, string $codePermission): bool; // Signature de votre dernier code fourni
    public function groupePossedePermission(string $idGroupeUtilisateur, string $codePermission): bool;
    public function getPermissionsPourUtilisateur(string $numeroUtilisateur): array;
--------------------------------------------
Fichier : ./src/Backend/Service/Rapport/ServiceRapport.php
    class ServiceRapport
    public function __construct(
    public function creerNouveauRapport(string $numeroCarteEtudiant, string $libelleRapport, ?string $theme, ?string $resume, ?string $numeroAttestationStage, ?int $nombrePages): ?int
    public function soumettreRapportPourVerification(int $idRapportEtudiant): bool
    public function ajouterDocumentARapport(int $idRapportEtudiant, string $cheminFichier, string $nomOriginal, string $typeMime, int $tailleFichier, int $idTypeDocument, string $numeroUtilisateurUpload, int $version = 1): bool
    public function recupererInformationsRapportComplet(int $idRapportEtudiant): ?array
    public function mettreAJourStatutRapport(int $idRapportEtudiant, int $idNouveauStatut, ?string $commentaireOptionnel = null): bool
    public function enregistrerCorrectionsSoumises(int $idRapportEtudiant, array $fichiersDocumentsCorriges, string $numeroUtilisateurUpload, ?string $noteExplicative): bool
--------------------------------------------
Fichier : ./src/Backend/Service/Rapport/ServiceRapportInterface.php
--------------------------------------------
Fichier : ./src/Backend/Service/Reclamation/ServiceReclamation.php
--------------------------------------------
Fichier : ./src/Backend/Service/Reclamation/ServiceReclamationInterface.php
--------------------------------------------
Fichier : ./src/Backend/Service/ReportingAdmin/ServiceReportingAdmin.php
    class ServiceReportingAdmin
    public function __construct(
    public function genererRapportTauxValidation(int $idAnneeAcademique, ?string $critereSupplementaire = null): array
    public function genererRapportDelaisMoyensParEtape(): array
    public function genererStatistiquesUtilisation(): array
--------------------------------------------
Fichier : ./src/Backend/Service/ReportingAdmin/ServiceReportingAdminInterface.php
--------------------------------------------
Fichier : ./src/Backend/Service/SupervisionAdmin/ServiceSupervisionAdmin.php
    class ServiceSupervisionAdmin implements ServiceSupervisionAdminInterface
    public function __construct(
    public function recupererOuCreerIdActionParLibelle(string $libelleAction): int
    public function enregistrerAction(
    public function obtenirStatistiquesGlobalesRapports(): array
    public function consulterJournauxActionsUtilisateurs(array $filtres = [], int $limite = 50, int $page = 1): array
    public function consulterTracesAccesFonctionnalites(array $filtres = [], int $limite = 50, int $page = 1): array
    public function listerPvEligiblesArchivage(array $criteres = []): array
--------------------------------------------
Fichier : ./src/Backend/Service/SupervisionAdmin/ServiceSupervisionAdminInterface.php
    public function enregistrerAction(
    public function obtenirStatistiquesGlobalesRapports(): array;
    public function consulterJournauxActionsUtilisateurs(array $filtres = [], int $limite = 50, int $page = 1): array;
    public function consulterTracesAccesFonctionnalites(array $filtres = [], int $limite = 50, int $page = 1): array;
    public function listerPvEligiblesArchivage(array $criteres = []): array;
--------------------------------------------
Fichier : ./src/Backend/Util/DatabaseSessionHandler.php
    class DatabaseSessionHandler implements SessionHandlerInterface
    public function __construct()
    private function getDb(): PDO
    public function open(string $path, string $name): bool
    public function close(): bool
    public function read(string $id): string|false
    public function write(string $id, string $data): bool
    public function destroy(string $id): bool
    public function gc(int $max_lifetime): int|false
--------------------------------------------
Fichier : ./src/Backend/Util/FormValidator.php
    class FormValidator {
    public static function validate($data, $rules) {
    public static function sanitize($input) {
--------------------------------------------
Fichier : ./src/Config/Container.php
    class Container
    public function getDb(): PDO
    public function getAuthService(): ServiceAuthenticationInterface
    public function getSupervisionService(): ServiceSupervisionAdmin
    public function getGestionAcademiqueService(): ServiceGestionAcademique
    public function getPermissionsService(): ServicePermissions
--------------------------------------------
Fichier : ./src/Config/Database.php
    class Database {
    private function __construct() {
    public static function getInstance(): self {
    public function getConnection(): PDO {
    private function __clone(){}
    public function __wakeup(){
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/ConfigSysteme/annee_academique.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/ConfigSysteme/modeles_documents.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/ConfigSysteme/parametres_generaux.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/dashboard_admin.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/GestionAcad/form_inscription.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/GestionAcad/form_note.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/GestionAcad/liste_inscriptions.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/GestionAcad/liste_notes.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Habilitations/form_groupe.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Habilitations/form_niveau_acces.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Habilitations/form_traitement.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Habilitations/form_type_utilisateur.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Habilitations/gestion_rattachements.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Habilitations/liste_groupes.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Habilitations/liste_niveaux_acces.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Habilitations/liste_traitements.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Habilitations/liste_types_utilisateur.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Referentiels/crud_referentiel_generique.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Referentiels/liste_referentiels.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/reporting_admin.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Supervision/journaux_audit.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Supervision/maintenance.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Supervision/suivi_workflows.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Utilisateurs/form_enseignant.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Utilisateurs/form_etudiant.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Utilisateurs/form_personnel.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Utilisateurs/liste_enseignants.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Utilisateurs/liste_etudiants.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Utilisateurs/liste_personnel.php
--------------------------------------------
Fichier : ./src/Frontend/views/Administration/Utilisateurs/liste_utilisateurs.php
--------------------------------------------
Fichier : ./src/Frontend/views/Auth/email_validation_result.php
--------------------------------------------
Fichier : ./src/Frontend/views/Auth/forgot_password_form.php
--------------------------------------------
Fichier : ./src/Frontend/views/Auth/form_2fa.php
--------------------------------------------
Fichier : ./src/Frontend/views/Auth/login.php
--------------------------------------------
Fichier : ./src/Frontend/views/Auth/reset_password_form.php
--------------------------------------------
Fichier : ./src/Frontend/views/Commission/corrections_commission.php
--------------------------------------------
Fichier : ./src/Frontend/views/Commission/dashboard_commission.php
--------------------------------------------
Fichier : ./src/Frontend/views/Commission/historique_commission.php
--------------------------------------------
Fichier : ./src/Frontend/views/Commission/PV/consulter_pv.php
--------------------------------------------
Fichier : ./src/Frontend/views/Commission/PV/rediger_pv.php
--------------------------------------------
Fichier : ./src/Frontend/views/Commission/PV/valider_pv.php
--------------------------------------------
Fichier : ./src/Frontend/views/Commission/Rapports/details_rapport_commission.php
--------------------------------------------
Fichier : ./src/Frontend/views/Commission/Rapports/interface_vote.php
--------------------------------------------
Fichier : ./src/Frontend/views/Commission/Rapports/liste_rapports_a_traiter.php
--------------------------------------------
Fichier : ./src/Frontend/views/common/chat_interface.php
--------------------------------------------
Fichier : ./src/Frontend/views/common/dashboard.php
--------------------------------------------
Fichier : ./src/Frontend/views/common/header.php
--------------------------------------------
Fichier : ./src/Frontend/views/common/menu.php
    <span class="sidebar-icon w-5 h-5 mr-3"><?= $item['icon'] // Ex: SVG string or FontAwesome class ?></span>
--------------------------------------------
Fichier : ./src/Frontend/views/common/notifications_panel.php
--------------------------------------------
Fichier : ./src/Frontend/views/errors/403.php
--------------------------------------------
Fichier : ./src/Frontend/views/errors/404.php
--------------------------------------------
Fichier : ./src/Frontend/views/errors/405.php
--------------------------------------------
Fichier : ./src/Frontend/views/errors/500.php
--------------------------------------------
Fichier : ./src/Frontend/views/Etudiant/dashboard_etudiant.php
--------------------------------------------
Fichier : ./src/Frontend/views/Etudiant/mes_documents.php
--------------------------------------------
Fichier : ./src/Frontend/views/Etudiant/profil_etudiant.php
--------------------------------------------
Fichier : ./src/Frontend/views/Etudiant/Rapport/soumettre_corrections.php
--------------------------------------------
Fichier : ./src/Frontend/views/Etudiant/Rapport/soumettre_rapport.php
--------------------------------------------
Fichier : ./src/Frontend/views/Etudiant/Rapport/suivi_rapport.php
--------------------------------------------
Fichier : ./src/Frontend/views/Etudiant/Reclamation/soumettre_reclamation.php
--------------------------------------------
Fichier : ./src/Frontend/views/Etudiant/Reclamation/suivi_reclamations.php
--------------------------------------------
Fichier : ./src/Frontend/views/Etudiant/ressources_etudiant.php
--------------------------------------------
Fichier : ./src/Frontend/views/layout/app.php
    function toggleSidebarDesktop() {
    function toggleSidebarMobile() {
--------------------------------------------
Fichier : ./src/Frontend/views/PersonnelAdministratif/Conformite/details_rapport_conformite.php
--------------------------------------------
Fichier : ./src/Frontend/views/PersonnelAdministratif/Conformite/liste_rapports_a_verifier.php
--------------------------------------------
Fichier : ./src/Frontend/views/PersonnelAdministratif/Conformite/liste_rapports_traites_conformite.php
--------------------------------------------
Fichier : ./src/Frontend/views/PersonnelAdministratif/dashboard_personnel.php
--------------------------------------------
Fichier : ./src/Frontend/views/PersonnelAdministratif/Scolarite/generation_documents_scolarite.php
--------------------------------------------
Fichier : ./src/Frontend/views/PersonnelAdministratif/Scolarite/gestion_etudiants_scolarite.php
--------------------------------------------
Fichier : ./src/Frontend/views/PersonnelAdministratif/Scolarite/gestion_inscriptions_scolarite.php
--------------------------------------------
Fichier : ./src/Frontend/views/PersonnelAdministratif/Scolarite/gestion_notes_scolarite.php
--------------------------------------------
Fichier : ./vendor/autoload.php
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Common/BitArray.php
    final class BitArray
    public function __construct(int $size = 0)
    public function getSize() : int
    public function getSizeInBytes() : int
    public function ensureCapacity(int $size) : void
    public function get(int $i) : bool
    public function set(int $i) : void
    public function flip(int $i) : void
    public function getNextSet(int $from) : int
    public function getNextUnset(int $from) : int
    public function setBulk(int $i, int $newBits) : void
    public function setRange(int $start, int $end) : void
    public function clear() : void
    public function isRange(int $start, int $end, bool $value) : bool
    public function appendBit(bool $bit) : void
    public function appendBits(int $value, int $numBits) : void
    public function appendBitArray(self $other) : void
    public function xorBits(self $other) : void
    public function toBytes(int $bitOffset, int $numBytes) : SplFixedArray
    public function getBitArray() : SplFixedArray
    public function reverse() : void
    public function __toString() : string
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Common/BitMatrix.php
    * Represents a 2D matrix of bits. In function arguments below, and throughout
    class BitMatrix
    public function __construct(int $width, int $height = null)
    public function get(int $x, int $y) : bool
    public function set(int $x, int $y) : void
    public function flip(int $x, int $y) : void
    public function clear() : void
    public function setRegion(int $left, int $top, int $width, int $height) : void
    public function getRow(int $y, BitArray $row = null) : BitArray
    public function setRow(int $y, BitArray $row) : void
    public function getEnclosingRectangle() : ?array
    public function getTopLeftOnBit() : ?array
    public function getBottomRightOnBit() : ?array
    public function getWidth() : int
    public function getHeight() : int
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Common/BitUtils.php
    final class BitUtils
    private function __construct()
    public static function unsignedRightShift(int $a, int $b) : int
    public static function numberOfTrailingZeros(int $i) : int
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Common/CharacterSetEci.php
    final class CharacterSetEci extends AbstractEnum
    public function __construct(array $values, string ...$otherEncodingNames)
    public function getValue() : int
    public static function getCharacterSetEciByValue(int $value) : ?self
    public static function getCharacterSetEciByName(string $name) : ?self
    private static function valueToEci() : array
    private static function nameToEci() : array
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Common/EcBlock.php
    final class EcBlock
    public function __construct(int $count, int $dataCodewords)
    public function getCount() : int
    public function getDataCodewords() : int
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Common/EcBlocks.php
    final class EcBlocks
    public function __construct(int $ecCodewordsPerBlock, EcBlock ...$ecBlocks)
    public function getEcCodewordsPerBlock() : int
    public function getNumBlocks() : int
    public function getTotalEcCodewords() : int
    public function getEcBlocks() : array
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Common/ErrorCorrectionLevel.php
    final class ErrorCorrectionLevel extends AbstractEnum
    protected function __construct(int $bits)
    public static function forBits(int $bits) : self
    public function getBits() : int
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Common/FormatInformation.php
    class FormatInformation
    protected function __construct(int $formatInfo)
    public static function numBitsDiffering(int $a, int $b) : int
    public static function decodeFormatInformation(int $maskedFormatInfo1, int $maskedFormatInfo2) : ?self
    private static function doDecodeFormatInformation(int $maskedFormatInfo1, int $maskedFormatInfo2) : ?self
    public function getErrorCorrectionLevel() : ErrorCorrectionLevel
    public function getDataMask() : int
    public function hashCode() : int
    public function equals(self $other) : bool
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Common/Mode.php
    final class Mode extends AbstractEnum
    protected function __construct(array $characterCountBitsForVersions, int $bits)
    public function getCharacterCountBits(Version $version) : int
    public function getBits() : int
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Common/ReedSolomonCodec.php
    final class ReedSolomonCodec
    public function __construct(
    public function encode(SplFixedArray $data, SplFixedArray $parity) : void
    public function decode(SplFixedArray $data, SplFixedArray $erasures = null) : ?int
    private function modNn(int $x) : int
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Common/Version.php
    final class Version
    private function __construct(
    public function getVersionNumber() : int
    public function getAlignmentPatternCenters() : array
    public function getTotalCodewords() : int
    public function getDimensionForVersion() : int
    public function getEcBlocksForLevel(ErrorCorrectionLevel $ecLevel) : EcBlocks
    public static function getProvisionalVersionForDimension(int $dimension) : self
    public static function getVersionForNumber(int $versionNumber) : self
    public static function decodeVersionInformation(int $versionBits) : ?self
    * Builds the function pattern for the current version.
    public function buildFunctionPattern() : BitMatrix
    public function __toString() : string
    private static function versions() : array
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Encoder/BlockPair.php
    final class BlockPair
    public function __construct(SplFixedArray $data, SplFixedArray $errorCorrection)
    public function getDataBytes() : SplFixedArray
    public function getErrorCorrectionBytes() : SplFixedArray
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Encoder/ByteMatrix.php
    final class ByteMatrix
    public function __construct(int $width, int $height)
    public function getWidth() : int
    public function getHeight() : int
    public function getArray() : SplFixedArray
    public function getBytes() : Traversable
    public function get(int $x, int $y) : int
    public function set(int $x, int $y, int $value) : void
    public function clear(int $value) : void
    public function __clone()
    public function __toString() : string
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Encoder/Encoder.php
    final class Encoder
    public static function encode(
    private static function getAlphanumericCode(int $code) : int
    private static function chooseMode(string $content, string $encoding = null) : Mode
    private static function calculateMaskPenalty(ByteMatrix $matrix) : int
    private static function isOnlyDoubleByteKanji(string $content) : bool
    private static function chooseMaskPattern(
    private static function chooseVersion(int $numInputBits, ErrorCorrectionLevel $ecLevel) : Version
    private static function terminateBits(int $numDataBytes, BitArray $bits) : void
    private static function getNumDataBytesAndNumEcBytesForBlockId(
    private static function interleaveWithEcBytes(
    private static function generateEcBytes(SplFixedArray $dataBytes, int $numEcBytesInBlock) : SplFixedArray
    private static function getCodec(int $numDataBytes, int $numEcBytesInBlock) : ReedSolomonCodec
    private static function appendModeInfo(Mode $mode, BitArray $bits) : void
    private static function appendLengthInfo(int $numLetters, Version $version, Mode $mode, BitArray $bits) : void
    private static function appendBytes(string $content, Mode $mode, BitArray $bits, string $encoding) : void
    private static function appendNumericBytes(string $content, BitArray $bits) : void
    private static function appendAlphanumericBytes(string $content, BitArray $bits) : void
    private static function append8BitBytes(string $content, BitArray $bits, string $encoding) : void
    private static function appendKanjiBytes(string $content, BitArray $bits) : void
    private static function appendEci(CharacterSetEci $eci, BitArray $bits) : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Encoder/MaskUtil.php
    final class MaskUtil
    private function __construct()
    public static function applyMaskPenaltyRule1(ByteMatrix $matrix) : int
    public static function applyMaskPenaltyRule2(ByteMatrix $matrix) : int
    public static function applyMaskPenaltyRule3(ByteMatrix $matrix) : int
    public static function applyMaskPenaltyRule4(ByteMatrix $matrix) : int
    public static function getDataMaskBit(int $maskPattern, int $x, int $y) : bool
    * Helper function for applyMaskPenaltyRule1.
    private static function applyMaskPenaltyRule1Internal(ByteMatrix $matrix, bool $isHorizontal) : int
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Encoder/MatrixUtil.php
    final class MatrixUtil
    public static function clearMatrix(ByteMatrix $matrix) : void
    public static function buildMatrix(
    public static function removePositionDetectionPatterns(ByteMatrix $matrix) : void
    private static function embedTypeInfo(ErrorCorrectionLevel $level, int $maskPattern, ByteMatrix $matrix) : void
    private static function makeTypeInfoBits(ErrorCorrectionLevel $level, int $maskPattern, BitArray $bits) : void
    private static function maybeEmbedVersionInfo(Version $version, ByteMatrix $matrix) : void
    private static function makeVersionInfoBits(Version $version, BitArray $bits) : void
    private static function calculateBchCode(int $value, int $poly) : int
    private static function findMsbSet(int $value) : int
    private static function embedBasicPatterns(Version $version, ByteMatrix $matrix) : void
    private static function embedPositionDetectionPatternsAndSeparators(ByteMatrix $matrix) : void
    private static function embedPositionDetectionPattern(int $xStart, int $yStart, ByteMatrix $matrix) : void
    private static function removePositionDetectionPattern(int $xStart, int $yStart, ByteMatrix $matrix) : void
    private static function embedHorizontalSeparationPattern(int $xStart, int $yStart, ByteMatrix $matrix) : void
    private static function embedVerticalSeparationPattern(int $xStart, int $yStart, ByteMatrix $matrix) : void
    private static function embedDarkDotAtLeftBottomCorner(ByteMatrix $matrix) : void
    private static function maybeEmbedPositionAdjustmentPatterns(Version $version, ByteMatrix $matrix) : void
    private static function embedPositionAdjustmentPattern(int $xStart, int $yStart, ByteMatrix $matrix) : void
    private static function embedTimingPatterns(ByteMatrix $matrix) : void
    private static function embedDataBits(BitArray $dataBits, int $maskPattern, ByteMatrix $matrix) : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Encoder/QrCode.php
    final class QrCode
    public function __construct(
    public function getMode() : Mode
    public function getErrorCorrectionLevel() : ErrorCorrectionLevel
    public function getVersion() : Version
    public function getMaskPattern() : int
    public function getMatrix()
    public static function isValidMaskPattern(int $maskPattern) : bool
    public function __toString() : string
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Exception/ExceptionInterface.php
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Exception/InvalidArgumentException.php
    final class InvalidArgumentException extends \InvalidArgumentException implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Exception/OutOfBoundsException.php
    final class OutOfBoundsException extends \OutOfBoundsException implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Exception/RuntimeException.php
    final class RuntimeException extends \RuntimeException implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Exception/UnexpectedValueException.php
    final class UnexpectedValueException extends \UnexpectedValueException implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Exception/WriterException.php
    final class WriterException extends \RuntimeException implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Color/Alpha.php
    final class Alpha implements ColorInterface
    public function __construct(int $alpha, ColorInterface $baseColor)
    public function getAlpha() : int
    public function getBaseColor() : ColorInterface
    public function toRgb() : Rgb
    public function toCmyk() : Cmyk
    public function toGray() : Gray
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Color/Cmyk.php
    final class Cmyk implements ColorInterface
    public function __construct(int $cyan, int $magenta, int $yellow, int $black)
    public function getCyan() : int
    public function getMagenta() : int
    public function getYellow() : int
    public function getBlack() : int
    public function toRgb() : Rgb
    public function toCmyk() : Cmyk
    public function toGray() : Gray
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Color/ColorInterface.php
    public function toRgb() : Rgb;
    public function toCmyk() : Cmyk;
    public function toGray() : Gray;
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Color/Gray.php
    final class Gray implements ColorInterface
    public function __construct(int $gray)
    public function getGray() : int
    public function toRgb() : Rgb
    public function toCmyk() : Cmyk
    public function toGray() : Gray
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Color/Rgb.php
    final class Rgb implements ColorInterface
    public function __construct(int $red, int $green, int $blue)
    public function getRed() : int
    public function getGreen() : int
    public function getBlue() : int
    public function toRgb() : Rgb
    public function toCmyk() : Cmyk
    public function toGray() : Gray
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Eye/CompositeEye.php
    final class CompositeEye implements EyeInterface
    public function __construct(EyeInterface $externalEye, EyeInterface $internalEye)
    public function getExternalPath() : Path
    public function getInternalPath() : Path
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Eye/EyeInterface.php
    public function getExternalPath() : Path;
    public function getInternalPath() : Path;
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Eye/ModuleEye.php
    final class ModuleEye implements EyeInterface
    public function __construct(ModuleInterface $module)
    public function getExternalPath() : Path
    public function getInternalPath() : Path
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Eye/SimpleCircleEye.php
    final class SimpleCircleEye implements EyeInterface
    private function __construct()
    public static function instance() : self
    public function getExternalPath() : Path
    public function getInternalPath() : Path
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Eye/SquareEye.php
    final class SquareEye implements EyeInterface
    private function __construct()
    public static function instance() : self
    public function getExternalPath() : Path
    public function getInternalPath() : Path
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Image/EpsImageBackEnd.php
    final class EpsImageBackEnd implements ImageBackEndInterface
    public function new(int $size, ColorInterface $backgroundColor) : void
    public function scale(float $size) : void
    public function translate(float $x, float $y) : void
    public function rotate(int $degrees) : void
    public function push() : void
    public function pop() : void
    public function drawPathWithColor(Path $path, ColorInterface $color) : void
    public function drawPathWithGradient(
    public function done() : string
    private function drawPathOperations(Iterable $ops, &$fromX, &$fromY) : string
    private function createGradientFill(Gradient $gradient, float $x, float $y, float $width, float $height) : void
    private function getColorSetString(ColorInterface $color) : string
    private function getColorString(ColorInterface $color) : string
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Image/ImageBackEndInterface.php
    public function new(int $size, ColorInterface $backgroundColor) : void;
    public function scale(float $size) : void;
    public function translate(float $x, float $y) : void;
    public function rotate(int $degrees) : void;
    public function push() : void;
    public function pop() : void;
    public function drawPathWithColor(Path $path, ColorInterface $color) : void;
    public function drawPathWithGradient(
    public function done() : string;
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Image/ImagickImageBackEnd.php
    final class ImagickImageBackEnd implements ImageBackEndInterface
    public function __construct(string $imageFormat = 'png', int $compressionQuality = 100)
    public function new(int $size, ColorInterface $backgroundColor) : void
    public function scale(float $size) : void
    public function translate(float $x, float $y) : void
    public function rotate(int $degrees) : void
    public function push() : void
    public function pop() : void
    public function drawPathWithColor(Path $path, ColorInterface $color) : void
    public function drawPathWithGradient(
    public function done() : string
    private function drawPath(Path $path) : void
    private function createGradientFill(Gradient $gradient, float $x, float $y, float $width, float $height) : string
    private function getColorPixel(ColorInterface $color) : ImagickPixel
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Image/SvgImageBackEnd.php
    final class SvgImageBackEnd implements ImageBackEndInterface
    public function __construct()
    public function new(int $size, ColorInterface $backgroundColor) : void
    public function scale(float $size) : void
    public function translate(float $x, float $y) : void
    public function rotate(int $degrees) : void
    public function push() : void
    public function pop() : void
    public function drawPathWithColor(Path $path, ColorInterface $color) : void
    public function drawPathWithGradient(
    public function done() : string
    private function startPathElement(Path $path) : void
    private function createGradientFill(Gradient $gradient, float $x, float $y, float $width, float $height) : string
    private function getColorString(ColorInterface $color) : string
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Image/TransformationMatrix.php
    final class TransformationMatrix
    public function __construct()
    public function multiply(self $other) : self
    public static function scale(float $size) : self
    public static function translate(float $x, float $y) : self
    public static function rotate(int $degrees) : self
    public function apply(float $x, float $y) : array
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/ImageRenderer.php
    final class ImageRenderer implements RendererInterface
    public function __construct(RendererStyle $rendererStyle, ImageBackEndInterface $imageBackEnd)
    public function render(QrCode $qrCode) : string
    private function drawEyes(int $matrixSize, Path $modulePath) : Path
    private function drawEye(
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Module/DotsModule.php
    final class DotsModule implements ModuleInterface
    public function __construct(float $size)
    public function createPath(ByteMatrix $matrix) : Path
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Module/EdgeIterator/Edge.php
    final class Edge
    public function __construct(bool $positive)
    public function addPoint(int $x, int $y) : void
    public function isPositive() : bool
    public function getPoints() : array
    public function getMaxX() : int
    public function getSimplifiedPoints() : array
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Module/EdgeIterator/EdgeIterator.php
    final class EdgeIterator implements IteratorAggregate
    public function __construct(ByteMatrix $matrix)
    public function getIterator() : Traversable
    private function findNext(int $x, int $y) : ?array
    private function findEdge(int $x, int $y) : Edge
    private function xorEdge(Edge $path) : void
    private function isSet(int $x, int $y) : bool
    private function pointOf(int $i) : array
    private function flip(int $x, int $y) : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Module/ModuleInterface.php
    public function createPath(ByteMatrix $matrix) : Path;
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Module/RoundnessModule.php
    final class RoundnessModule implements ModuleInterface
    public function __construct(float $intensity)
    public function createPath(ByteMatrix $matrix) : Path
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Module/SquareModule.php
    final class SquareModule implements ModuleInterface
    private function __construct()
    public static function instance() : self
    public function createPath(ByteMatrix $matrix) : Path
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Path/Close.php
    final class Close implements OperationInterface
    private function __construct()
    public static function instance() : self
    public function translate(float $x, float $y) : OperationInterface
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Path/Curve.php
    final class Curve implements OperationInterface
    public function __construct(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3)
    public function getX1() : float
    public function getY1() : float
    public function getX2() : float
    public function getY2() : float
    public function getX3() : float
    public function getY3() : float
    public function translate(float $x, float $y) : OperationInterface
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Path/EllipticArc.php
    final class EllipticArc implements OperationInterface
    public function __construct(
    public function getXRadius() : float
    public function getYRadius() : float
    public function getXAxisAngle() : float
    public function isLargeArc() : bool
    public function isSweep() : bool
    public function getX() : float
    public function getY() : float
    public function translate(float $x, float $y) : OperationInterface
    public function toCurves(float $fromX, float $fromY) : array
    private function createCurves(float $fromX, float $fromY) : array
    private function calculateCenterPointParameters(float $fromX, float $fromY, float $xAngle)
    private static function angle(float $ux, float $uy, float $vx, float $vy) : float
    private static function point(
    private static function derivative(float $radiusX, float $radiusY, float $xAngle, float $angle) : array
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Path/Line.php
    final class Line implements OperationInterface
    public function __construct(float $x, float $y)
    public function getX() : float
    public function getY() : float
    public function translate(float $x, float $y) : OperationInterface
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Path/Move.php
    final class Move implements OperationInterface
    public function __construct(float $x, float $y)
    public function getX() : float
    public function getY() : float
    public function translate(float $x, float $y) : OperationInterface
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Path/OperationInterface.php
    public function translate(float $x, float $y) : self;
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/Path/Path.php
    final class Path implements IteratorAggregate
    public function move(float $x, float $y) : self
    public function line(float $x, float $y) : self
    public function ellipticArc(
    public function curve(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3) : self
    public function close() : self
    public function append(self $other) : self
    public function translate(float $x, float $y) : self
    public function getIterator() : Traversable
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/PlainTextRenderer.php
    final class PlainTextRenderer implements RendererInterface
    public function __construct(int $margin = 2)
    public function render(QrCode $qrCode) : string
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/RendererInterface.php
    public function render(QrCode $qrCode) : string;
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/RendererStyle/EyeFill.php
    final class EyeFill
    public function __construct(?ColorInterface $externalColor, ?ColorInterface $internalColor)
    public static function uniform(ColorInterface $color) : self
    public static function inherit() : self
    public function inheritsBothColors() : bool
    public function inheritsExternalColor() : bool
    public function inheritsInternalColor() : bool
    public function getExternalColor() : ColorInterface
    public function getInternalColor() : ColorInterface
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/RendererStyle/Fill.php
    final class Fill
    private function __construct(
    public static function default() : self
    public static function withForegroundColor(
    public static function withForegroundGradient(
    public static function uniformColor(ColorInterface $backgroundColor, ColorInterface $foregroundColor) : self
    public static function uniformGradient(ColorInterface $backgroundColor, Gradient $foregroundGradient) : self
    public function hasGradientFill() : bool
    public function getBackgroundColor() : ColorInterface
    public function getForegroundColor() : ColorInterface
    public function getForegroundGradient() : Gradient
    public function getTopLeftEyeFill() : EyeFill
    public function getTopRightEyeFill() : EyeFill
    public function getBottomLeftEyeFill() : EyeFill
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/RendererStyle/Gradient.php
    final class Gradient
    public function __construct(ColorInterface $startColor, ColorInterface $endColor, GradientType $type)
    public function getStartColor() : ColorInterface
    public function getEndColor() : ColorInterface
    public function getType() : GradientType
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/RendererStyle/GradientType.php
    final class GradientType extends AbstractEnum
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Renderer/RendererStyle/RendererStyle.php
    final class RendererStyle
    public function __construct(
    public function withSize(int $size) : self
    public function withMargin(int $margin) : self
    public function getSize() : int
    public function getMargin() : int
    public function getModule() : ModuleInterface
    public function getEye() : EyeInterface
    public function getFill() : Fill
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/src/Writer.php
    final class Writer
    public function __construct(RendererInterface $renderer)
    public function writeString(
    public function writeFile(
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/test/Common/BitArrayTest.php
    final class BitArrayTest extends TestCase
    private function getPhpUnitMajorVersion(): int
    public function testGetSet() : void
    public function testGetNextSet1() : void
    public function testGetNextSet2() : void
    public function testGetNextSet3() : void
    public function testGetNextSet4() : void
    public function testGetNextSet5() : void
    public function testSetBulk() : void
    public function testClear() : void
    public function testGetArray() : void
    public function testIsRange() : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/test/Common/BitMatrixTest.php
    class BitMatrixTest extends TestCase
    public function testGetSet() : void
    public function testSetRegion() : void
    public function testRectangularMatrix() : void
    public function testRectangularSetRegion() : void
    public function testGetRow() : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/test/Common/BitUtilsTest.php
    class BitUtilsTest extends TestCase
    public function testUnsignedRightShift() : void
    public function testNumberOfTrailingZeros() : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/test/Common/ErrorCorrectionLevelTest.php
    class ErrorCorrectionLevelTest extends TestCase
    public function testBitsMatchConstants() : void
    public function testInvalidErrorCorrectionLevelThrowsException() : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/test/Common/FormatInformationTest.php
    class FormatInformationTest extends TestCase
    public function testBitsDiffering() : void
    public function testDecode() : void
    public function testDecodeWithBitDifference() : void
    public function testDecodeWithMisRead() : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/test/Common/ModeTest.php
    class ModeTest extends TestCase
    public function testBitsMatchConstants() : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/test/Common/ReedSolomonCodecTest.php
    class ReedSolomonTest extends TestCase
    public function tabs() : array
    public function testCodec(int $symbolSize, int $generatorPoly, int $firstRoot, int $primitive, int $numRoots) : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/test/Common/VersionTest.php
    class VersionTest extends TestCase
    public function versions() : array
    public function decodeInformation() : array
    public function testVersionForNumber(int $versionNumber, int $dimension) : void
    public function testGetProvisionalVersionForDimension(int $versionNumber, int $dimension) : void
    public function testDecodeVersionInformation(int $expectedVersion, int $mask) : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/test/Encoder/EncoderTest.php
    final class EncoderTest extends TestCase
    public function setUp() : void
    public function testGetAlphanumericCode() : void
    public function testChooseMode() : void
    public function testEncode() : void
    public function testSimpleUtf8Eci() : void
    public function testAppendModeInfo() : void
    public function testAppendLengthInfo() : void
    public function testAppendBytes() : void
    public function testTerminateBits() : void
    public function testGetNumDataBytesAndNumEcBytesForBlockId() : void
    public function testInterleaveWithEcBytes() : void
    public function testAppendNumericBytes() : void
    public function testAppendAlphanumericBytes() : void
    public function testAppend8BitBytes() : void
    public function testAppendKanjiBytes() : void
    public function testGenerateEcBytes() : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/test/Encoder/MaskUtilTest.php
    class MaskUtilTest extends TestCase
    public function dataMaskBits() : array
    public function testGetDatMaskBit(int $maskPattern, array $expected) : void
    public function testApplyMaskPenaltyRule1() : void
    public function testApplyMaskPenaltyRule2() : void
    public function testApplyMaskPenalty3() : void
    public function testApplyMaskPenaltyRule4() : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/test/Encoder/MatrixUtilTest.php
    class MatrixUtilTest extends TestCase
    public function setUp() : void
    public function testToString() : void
    public function testClearMatrix() : void
    public function testEmbedBasicPatterns1() : void
    public function testEmbedBasicPatterns2() : void
    public function testEmbedTypeInfo() : void
    public function testEmbedVersionInfo() : void
    public function testEmbedDataBits() : void
    public function testBuildMatrix() : void
    public function testFindMsbSet() : void
    public function testCalculateBchCode() : void
    public function testMakeVersionInfoBits() : void
    public function testMakeTypeInfoBits() : void
--------------------------------------------
Fichier : ./vendor/bacon/bacon-qr-code/test/Integration/ImagickRenderingTest.php
    final class ImagickRenderingTest extends TestCase
    public function testGenericQrCode() : void
    public function testIssue79() : void
--------------------------------------------
Fichier : ./vendor/composer/autoload_classmap.php
--------------------------------------------
Fichier : ./vendor/composer/autoload_files.php
--------------------------------------------
Fichier : ./vendor/composer/autoload_namespaces.php
--------------------------------------------
Fichier : ./vendor/composer/autoload_psr4.php
--------------------------------------------
Fichier : ./vendor/composer/autoload_real.php
    class ComposerAutoloaderInit18704c64faa8578d1a8bdab32146d113
    public static function loadClassLoader($class)
    public static function getLoader()
    $requireFile = \Closure::bind(static function ($fileIdentifier, $file) {
--------------------------------------------
Fichier : ./vendor/composer/autoload_static.php
    class ComposerStaticInit18704c64faa8578d1a8bdab32146d113
    public static function getInitializer(ClassLoader $loader)
    return \Closure::bind(function () use ($loader) {
--------------------------------------------
Fichier : ./vendor/composer/ClassLoader.php
    * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
    * In this example, if you try to use a class in the Symfony\Component
    * the autoloader will first look for the class under the component/
    * This class is loosely based on the Symfony UniversalClassLoader.
    class ClassLoader
    public function __construct($vendorDir = null)
    public function getPrefixes()
    public function getPrefixesPsr4()
    public function getFallbackDirs()
    public function getFallbackDirsPsr4()
    public function getClassMap()
    public function addClassMap(array $classMap)
    public function add($prefix, $paths, $prepend = false)
    public function addPsr4($prefix, $paths, $prepend = false)
    public function set($prefix, $paths)
    public function setPsr4($prefix, $paths)
    * Turns on searching the include path for class files.
    public function setUseIncludePath($useIncludePath)
    public function getUseIncludePath()
    * that have not been registered with the class map.
    public function setClassMapAuthoritative($classMapAuthoritative)
    * Should class lookup fail if not found in the current class map?
    public function isClassMapAuthoritative()
    public function setApcuPrefix($apcuPrefix)
    public function getApcuPrefix()
    public function register($prepend = false)
    public function unregister()
    * Loads the given class or interface.
    * @param  string    $class The name of the class
    public function loadClass($class)
    * Finds the path to the file where the class is defined.
    * @param string $class The name of the class
    public function findFile($class)
    // class map lookup
    // Remember that this class does not exist.
    public static function getRegisteredLoaders()
    private function findFileWithExtension($class, $ext)
    // namespaced class name
    // PEAR-like class name
    private static function initializeIncludeClosure()
--------------------------------------------
Fichier : ./vendor/composer/installed.php
--------------------------------------------
Fichier : ./vendor/composer/InstalledVersions.php
    * This class is copied in every Composer installed project and available to all
    class InstalledVersions
    public static function getInstalledPackages()
    public static function getInstalledPackagesByType($type)
    public static function isInstalled($packageName, $includeDevRequirements = true)
    * @param  VersionParser $parser      Install composer/semver to have access to this class and functionality
    public static function satisfies(VersionParser $parser, $packageName, $constraint)
    public static function getVersionRanges($packageName)
    public static function getVersion($packageName)
    public static function getPrettyVersion($packageName)
    public static function getReference($packageName)
    public static function getInstallPath($packageName)
    public static function getRootPackage()
    public static function getRawData()
    public static function getAllRawData()
    * this class but then also needs to execute another project's autoloader in process,
    * the project in which it runs can then also use this class safely, without
    public static function reload($data)
    private static function getInstalled()
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/MatchAllResult.php
    final class MatchAllResult
    public function __construct(int $count, array $matches)
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/MatchAllStrictGroupsResult.php
    final class MatchAllStrictGroupsResult
    public function __construct(int $count, array $matches)
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/MatchAllWithOffsetsResult.php
    final class MatchAllWithOffsetsResult
    public function __construct(int $count, array $matches)
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/MatchResult.php
    final class MatchResult
    public function __construct(int $count, array $matches)
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/MatchStrictGroupsResult.php
    final class MatchStrictGroupsResult
    public function __construct(int $count, array $matches)
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/MatchWithOffsetsResult.php
    final class MatchWithOffsetsResult
    public function __construct(int $count, array $matches)
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/PcreException.php
    class PcreException extends \RuntimeException
    public static function fromFunction($function, $pattern)
    private static function pcreLastErrorMessage($code)
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/PHPStan/InvalidRegexPatternRule.php
    use function in_array;
    use function sprintf;
    class InvalidRegexPatternRule implements Rule
    public function getNodeType(): string
    public function processNode(Node $node, Scope $scope): array
    private function extractPatterns(StaticCall $node, Scope $scope): array
    if (!$node->class instanceof FullyQualified) {
    private function validatePattern(string $pattern): ?string
    $prev = set_error_handler(function (int $severity, string $message, string $file) use (&$msg): bool {
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/PHPStan/PregMatchFlags.php
    final class PregMatchFlags
    static public function getType(?Arg $flagsArg, Scope $scope): ?Type
    static public function removeNullFromMatches(Type $matchesType): Type
    return TypeTraverser::map($matchesType, static function (Type $type, callable $traverse): Type {
    array_map(static function (Type $valueType) use ($traverse): Type {
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/PHPStan/PregMatchParameterOutTypeExtension.php
    final class PregMatchParameterOutTypeExtension implements StaticMethodParameterOutTypeExtension
    public function __construct(
    public function isStaticMethodSupported(MethodReflection $methodReflection, ParameterReflection $parameter): bool
    public function getParameterOutTypeFromStaticMethodCall(MethodReflection $methodReflection, StaticCall $methodCall, ParameterReflection $parameter, Scope $scope): ?Type
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/PHPStan/PregMatchTypeSpecifyingExtension.php
    final class PregMatchTypeSpecifyingExtension implements StaticMethodTypeSpecifyingExtension, TypeSpecifierAwareExtension
    public function __construct(RegexArrayShapeMatcher $regexShapeMatcher)
    public function setTypeSpecifier(TypeSpecifier $typeSpecifier): void
    public function getClass(): string
    public function isStaticMethodSupported(MethodReflection $methodReflection, StaticCall $node, TypeSpecifierContext $context): bool
    public function specifyTypes(MethodReflection $methodReflection, StaticCall $node, Scope $scope, TypeSpecifierContext $context): SpecifiedTypes
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/PHPStan/PregReplaceCallbackClosureTypeExtension.php
    final class PregReplaceCallbackClosureTypeExtension implements StaticMethodParameterClosureTypeExtension
    public function __construct(RegexArrayShapeMatcher $regexShapeMatcher)
    public function isStaticMethodSupported(MethodReflection $methodReflection, ParameterReflection $parameter): bool
    public function getTypeFromStaticMethodCall(MethodReflection $methodReflection, StaticCall $methodCall, ParameterReflection $parameter, Scope $scope): ?Type
    array_map(static function (Type $valueType): Type {
    array_map(static function (Type $valueType): Type {
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/PHPStan/UnsafeStrictGroupsCallRule.php
    use function sprintf;
    final class UnsafeStrictGroupsCallRule implements Rule
    public function __construct(RegexArrayShapeMatcher $regexShapeMatcher)
    public function getNodeType(): string
    public function processNode(Node $node, Scope $scope): array
    if (!$node->class instanceof FullyQualified) {
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/Preg.php
    class Preg
    public static function match(string $pattern, string $subject, ?array &$matches = null, int $flags = 0, int $offset = 0): int
    public static function matchStrictGroups(string $pattern, string $subject, ?array &$matches = null, int $flags = 0, int $offset = 0): int
    public static function matchWithOffsets(string $pattern, string $subject, ?array &$matches, int $flags = 0, int $offset = 0): int
    public static function matchAll(string $pattern, string $subject, ?array &$matches = null, int $flags = 0, int $offset = 0): int
    public static function matchAllStrictGroups(string $pattern, string $subject, ?array &$matches = null, int $flags = 0, int $offset = 0): int
    public static function matchAllWithOffsets(string $pattern, string $subject, ?array &$matches, int $flags = 0, int $offset = 0): int
    public static function replace($pattern, $replacement, $subject, int $limit = -1, ?int &$count = null): string
    public static function replaceCallback($pattern, callable $replacement, $subject, int $limit = -1, ?int &$count = null, int $flags = 0): string
    public static function replaceCallbackStrictGroups(string $pattern, callable $replacement, $subject, int $limit = -1, ?int &$count = null, int $flags = 0): string
    return self::replaceCallback($pattern, function (array $matches) use ($pattern, $replacement) {
    public static function replaceCallbackArray(array $pattern, $subject, int $limit = -1, ?int &$count = null, int $flags = 0): string
    public static function split(string $pattern, string $subject, int $limit = -1, int $flags = 0): array
    public static function splitWithOffsets(string $pattern, string $subject, int $limit = -1, int $flags = 0): array
    public static function grep(string $pattern, array $array, int $flags = 0): array
    public static function isMatch(string $pattern, string $subject, ?array &$matches = null, int $flags = 0, int $offset = 0): bool
    public static function isMatchStrictGroups(string $pattern, string $subject, ?array &$matches = null, int $flags = 0, int $offset = 0): bool
    public static function isMatchAll(string $pattern, string $subject, ?array &$matches = null, int $flags = 0, int $offset = 0): bool
    public static function isMatchAllStrictGroups(string $pattern, string $subject, ?array &$matches = null, int $flags = 0, int $offset = 0): bool
    public static function isMatchWithOffsets(string $pattern, string $subject, ?array &$matches, int $flags = 0, int $offset = 0): bool
    public static function isMatchAllWithOffsets(string $pattern, string $subject, ?array &$matches, int $flags = 0, int $offset = 0): bool
    private static function checkOffsetCapture(int $flags, string $useFunctionName): void
    private static function checkSetOrder(int $flags): void
    private static function enforceNonNullMatches(string $pattern, array $matches, string $variantMethod)
    private static function enforceNonNullMatchAll(string $pattern, array $matches, string $variantMethod)
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/Regex.php
    class Regex
    public static function isMatch(string $pattern, string $subject, int $offset = 0): bool
    public static function match(string $pattern, string $subject, int $flags = 0, int $offset = 0): MatchResult
    public static function matchStrictGroups(string $pattern, string $subject, int $flags = 0, int $offset = 0): MatchStrictGroupsResult
    public static function matchWithOffsets(string $pattern, string $subject, int $flags = 0, int $offset = 0): MatchWithOffsetsResult
    public static function matchAll(string $pattern, string $subject, int $flags = 0, int $offset = 0): MatchAllResult
    public static function matchAllStrictGroups(string $pattern, string $subject, int $flags = 0, int $offset = 0): MatchAllStrictGroupsResult
    public static function matchAllWithOffsets(string $pattern, string $subject, int $flags = 0, int $offset = 0): MatchAllWithOffsetsResult
    public static function replace($pattern, $replacement, $subject, int $limit = -1): ReplaceResult
    public static function replaceCallback($pattern, callable $replacement, $subject, int $limit = -1, int $flags = 0): ReplaceResult
    public static function replaceCallbackStrictGroups($pattern, callable $replacement, $subject, int $limit = -1, int $flags = 0): ReplaceResult
    public static function replaceCallbackArray(array $pattern, $subject, int $limit = -1, int $flags = 0): ReplaceResult
    private static function checkOffsetCapture(int $flags, string $useFunctionName): void
    private static function checkSetOrder(int $flags): void
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/ReplaceResult.php
    final class ReplaceResult
    public function __construct(int $count, string $result)
--------------------------------------------
Fichier : ./vendor/composer/pcre/src/UnexpectedNullMatchException.php
    class UnexpectedNullMatchException extends PcreException
    public static function fromFunction($function, $pattern)
--------------------------------------------
Fichier : ./vendor/dasprid/enum/src/AbstractEnum.php
    abstract class AbstractEnum
    private function __construct()
    final public static function __callStatic(string $name, array $arguments) : self
    final public static function valueOf(string $name) : self
    private static function createValue(string $name, int $ordinal, array $arguments) : self
    final public static function values() : array
    uasort(self::$values[static::class], function (self $a, self $b) {
    private static function constants() : array
    final public function name() : string
    final public function ordinal() : int
    final public function compareTo(self $other) : int
    final public function __clone()
    final public function __sleep() : array
    final public function __wakeup() : void
    public function __toString() : string
--------------------------------------------
Fichier : ./vendor/dasprid/enum/src/EnumMap.php
    final class EnumMap implements Serializable, IteratorAggregate
    * The class name of the key.
    public function __construct(string $keyType, string $valueType, bool $allowNullValues)
    public function __serialize(): array
    public function __unserialize(array $data): void
    public function expect(string $keyType, string $valueType, bool $allowNullValues) : void
    public function size() : int
    public function containsValue($value) : bool
    public function containsKey(AbstractEnum $key) : bool
    public function get(AbstractEnum $key)
    public function put(AbstractEnum $key, $value)
    public function remove(AbstractEnum $key)
    public function clear() : void
    public function equals(self $other) : bool
    public function values() : array
    return array_values(array_map(function ($value) {
    }, array_filter($this->values, function ($value) : bool {
    public function serialize() : string
    public function unserialize($serialized) : void
    public function getIterator() : Traversable
    private function maskNull($value)
    private function unmaskNull($value)
    private function checkKeyType(AbstractEnum $key) : void
    private function isValidValue($value) : bool
--------------------------------------------
Fichier : ./vendor/dasprid/enum/src/Exception/CloneNotSupportedException.php
    final class CloneNotSupportedException extends Exception implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/dasprid/enum/src/Exception/ExceptionInterface.php
--------------------------------------------
Fichier : ./vendor/dasprid/enum/src/Exception/ExpectationException.php
    final class ExpectationException extends Exception implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/dasprid/enum/src/Exception/IllegalArgumentException.php
    final class IllegalArgumentException extends Exception implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/dasprid/enum/src/Exception/MismatchException.php
    final class MismatchException extends Exception implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/dasprid/enum/src/Exception/SerializeNotSupportedException.php
    final class SerializeNotSupportedException extends Exception implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/dasprid/enum/src/Exception/UnserializeNotSupportedException.php
    final class UnserializeNotSupportedException extends Exception implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/dasprid/enum/src/NullValue.php
    final class NullValue
    private function __construct()
    public static function instance() : self
    final public function __clone()
    final public function __sleep() : array
    final public function __wakeup() : void
--------------------------------------------
Fichier : ./vendor/doctrine/instantiator/src/Doctrine/Instantiator/Exception/ExceptionInterface.php
--------------------------------------------
Fichier : ./vendor/doctrine/instantiator/src/Doctrine/Instantiator/Exception/InvalidArgumentException.php
    use function interface_exists;
    use function sprintf;
    use function trait_exists;
    class InvalidArgumentException extends BaseInvalidArgumentException implements ExceptionInterface
    public static function fromNonExistingClass(string $className): self
    return new self(sprintf('The provided class "%s" does not exist', $className));
    public static function fromAbstractClass(ReflectionClass $reflectionClass): self
    'The provided class "%s" is abstract, and cannot be instantiated',
    public static function fromEnum(string $className): self
    'The provided class "%s" is an enum, and cannot be instantiated',
--------------------------------------------
Fichier : ./vendor/doctrine/instantiator/src/Doctrine/Instantiator/Exception/UnexpectedValueException.php
    use function sprintf;
    class UnexpectedValueException extends BaseUnexpectedValueException implements ExceptionInterface
    public static function fromSerializationTriggeredException(
    public static function fromUncleanUnSerialization(
--------------------------------------------
Fichier : ./vendor/doctrine/instantiator/src/Doctrine/Instantiator/Instantiator.php
    use function class_exists;
    use function enum_exists;
    use function is_subclass_of;
    use function restore_error_handler;
    use function set_error_handler;
    use function sprintf;
    use function strlen;
    use function unserialize;
    final class Instantiator implements InstantiatorInterface
    * Used to instantiate specific classes, indexed by class name.
    * Array of objects that can directly be cloned, indexed by class name.
    public function instantiate(string $className): object
    private function buildAndCacheFromFactory(string $className): object
    private function buildFactory(string $className): callable
    private function getReflectionClass(string $className): ReflectionClass
    private function checkIfUnSerializationIsSupported(ReflectionClass $reflectionClass, string $serializedString): void
    set_error_handler(static function (int $code, string $message, string $file, int $line) use ($reflectionClass, &$error): bool {
    private function attemptInstantiationViaUnSerialization(ReflectionClass $reflectionClass, string $serializedString): void
    private function isInstantiableViaReflection(ReflectionClass $reflectionClass): bool
    * Verifies whether the given class is to be considered internal
    private function hasInternalAncestors(ReflectionClass $reflectionClass): bool
    * Checks if a class is cloneable
    private function isSafeToClone(ReflectionClass $reflectionClass): bool
--------------------------------------------
Fichier : ./vendor/doctrine/instantiator/src/Doctrine/Instantiator/InstantiatorInterface.php
    public function instantiate(string $className): object;
--------------------------------------------
Fichier : ./vendor/graham-campbell/result-type/src/Error.php
    final class Error extends Result
    private function __construct($value)
    public static function create($value)
    public function success()
    public function map(callable $f)
    public function flatMap(callable $f)
    public function error()
    public function mapError(callable $f)
--------------------------------------------
Fichier : ./vendor/graham-campbell/result-type/src/Result.php
    abstract class Result
    abstract public function success();
    abstract public function map(callable $f);
    abstract public function flatMap(callable $f);
    abstract public function error();
    abstract public function mapError(callable $f);
--------------------------------------------
Fichier : ./vendor/graham-campbell/result-type/src/Success.php
    final class Success extends Result
    private function __construct($value)
    public static function create($value)
    public function success()
    public function map(callable $f)
    public function flatMap(callable $f)
    public function error()
    public function mapError(callable $f)
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/.php-cs-fixer.dist.php
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/CentralDirectoryFileHeader.php
    abstract class CentralDirectoryFileHeader
    public static function generate(
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/CompressionMethod.php
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/DataDescriptor.php
    abstract class DataDescriptor
    public static function generate(
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/EndOfCentralDirectory.php
    abstract class EndOfCentralDirectory
    public static function generate(
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Exception/DosTimeOverflowException.php
    class DosTimeOverflowException extends Exception
    public function __construct(
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Exception/FileNotFoundException.php
    class FileNotFoundException extends Exception
    public function __construct(
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Exception/FileNotReadableException.php
    class FileNotReadableException extends Exception
    public function __construct(
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Exception/FileSizeIncorrectException.php
    class FileSizeIncorrectException extends Exception
    public function __construct(
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Exception/OverflowException.php
    class OverflowException extends Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Exception/ResourceActionException.php
    class ResourceActionException extends Exception
    public function __construct(
    parent::__construct('Function ' . $function . 'failed on resource.');
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Exception/SimulationFileUnknownException.php
    class SimulationFileUnknownException extends Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Exception/StreamNotReadableException.php
    class StreamNotReadableException extends Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Exception/StreamNotSeekableException.php
    class StreamNotSeekableException extends Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Exception.php
    abstract class Exception extends \Exception {}
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/File.php
    class File
    public function __construct(
    public function cloneSimulationExecution(): self
    public function process(): string
    private function unpackStream()
    private function forecastSize(): ?int
    private function addFileHeader(): void
    private static function filterFilename(
    private function checkEncoding(): void
    private function buildZip64ExtraBlock(bool $force = false): string
    private function addFileFooter(): void
    private function readStream(bool $send): void
    private function compressionInit(): ?DeflateContext
    private function getCdrFile(): string
    private function isSimulation(): bool
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/GeneralPurposeBitFlag.php
    abstract class GeneralPurposeBitFlag
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/LocalFileHeader.php
    abstract class LocalFileHeader
    public static function generate(
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/OperationMode.php
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/PackField.php
    * TODO: Make class readonly when requiring PHP 8.2 exclusively
    class PackField
    public function __construct(
    public static function pack(self ...$fields): string
    $fmt = array_reduce($fields, function (string $acc, self $field) {
    $args = array_map(function (self $field) {
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Time.php
    abstract class Time
    public static function dateTimeToDosTime(DateTimeInterface $dateTime): int
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Version.php
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Zip64/DataDescriptor.php
    abstract class DataDescriptor
    public static function generate(
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Zip64/EndOfCentralDirectory.php
    abstract class EndOfCentralDirectory
    public static function generate(
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Zip64/EndOfCentralDirectoryLocator.php
    abstract class EndOfCentralDirectoryLocator
    public static function generate(
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Zip64/ExtendedInformationExtraField.php
    abstract class ExtendedInformationExtraField
    public static function generate(
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/ZipStream.php
    class ZipStream
    public function __construct(
    public function addFile(
    public function addFileFromPath(
    callback: function () use ($path) {
    public function addFileFromStream(
    public function addFileFromPsr7Stream(
    public function addFileFromCallback(
    dataCallback: function () use ($callback, $maxSize) {
    public function addDirectory(
    public function executeSimulation(): void
    public function finish(): int
    private static function normalizeStream($outputStream)
    private function recordSentBytes(int $sentBytes): void
    private function send(string $data): void
    private function sendHttpHeaders(): void
    private function clear(): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/src/Zs/ExtendedInformationExtraField.php
    abstract class ExtendedInformationExtraField
    public static function generate(): string
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/Assertions.php
    protected function assertFileContains(string $filePath, string $needle): void
    protected function assertFileDoesNotContain(string $filePath, string $needle): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/bootstrap.php
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/CentralDirectoryFileHeaderTest.php
    class CentralDirectoryFileHeaderTest extends TestCase
    public function testSerializesCorrectly(): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/DataDescriptorTest.php
    class DataDescriptorTest extends TestCase
    public function testSerializesCorrectly(): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/EndlessCycleStream.php
    class EndlessCycleStream implements StreamInterface
    public function __construct(private readonly string $toRepeat = '0') {}
    public function __toString(): string
    public function close(): void
    public function detach()
    public function getSize(): ?int
    public function tell(): int
    public function eof(): bool
    public function isSeekable(): bool
    public function seek(int $offset, int $whence = SEEK_SET): void
    public function rewind(): void
    public function isWritable(): bool
    public function write(string $string): int
    public function isReadable(): bool
    public function read(int $length): string
    public function getContents(): string
    public function getMetadata(?string $key = null): array|null
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/EndOfCentralDirectoryTest.php
    class EndOfCentralDirectoryTest extends TestCase
    public function testSerializesCorrectly(): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/FaultInjectionResource.php
    class FaultInjectionResource
    public static function getResource(array $injectFaults)
    public function stream_open(string $path, string $mode, int $options, ?string &$opened_path = null): bool
    public function stream_write(string $data)
    public function stream_eof()
    public function stream_seek(int $offset, int $whence): bool
    public function stream_tell(): int
    public static function register(): void
    public function stream_stat(): array
    public function url_stat(string $path, int $flags): array
    private static function createStreamContext(array $injectFaults)
    private function shouldFail(string $function): bool
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/LocalFileHeaderTest.php
    class LocalFileHeaderTest extends TestCase
    public function testSerializesCorrectly(): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/PackFieldTest.php
    class PackFieldTest extends TestCase
    public function testPacksFields(): void
    public function testOverflow2(): void
    public function testOverflow4(): void
    public function testUnknownOperator(): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/ResourceStream.php
    class ResourceStream implements StreamInterface
    public function __construct(
    public function __toString(): string
    public function close(): void
    public function detach()
    public function seek(int $offset, int $whence = SEEK_SET): void
    public function isSeekable(): bool
    public function getMetadata(?string $key = null)
    public function getSize(): ?int
    public function tell(): int
    public function eof(): bool
    public function rewind(): void
    public function write(string $string): int
    public function isWritable(): bool
    public function read(int $length): string
    public function isReadable(): bool
    public function getContents(): string
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/Tempfile.php
    protected function setUp(): void
    protected function tearDown(): void
    protected function getTmpFileStream(): array
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/TimeTest.php
    class TimeTest extends TestCase
    public function testNormalDateToDosTime(): void
    public function testTooEarlyDateToDosTime(): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/Util.php
    use function fgets;
    use function pclose;
    use function popen;
    use function preg_match;
    use function strtolower;
    protected function cmdExists(string $command): bool
    protected function dumpZipContents(string $path): string
    protected function validateAndExtractZip(string $zipPath): string
    protected function zipArchiveOpenErrorCodeName(int $code): string
    protected function getTmpDir(): string
    protected function getRecursiveFileList(string $path, bool $includeDirectories = false): array
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/Zip64/DataDescriptorTest.php
    class DataDescriptorTest extends TestCase
    public function testSerializesCorrectly(): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/Zip64/EndOfCentralDirectoryLocatorTest.php
    class EndOfCentralDirectoryLocatorTest extends TestCase
    public function testSerializesCorrectly(): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/Zip64/EndOfCentralDirectoryTest.php
    class EndOfCentralDirectoryTest extends TestCase
    public function testSerializesCorrectly(): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/Zip64/ExtendedInformationExtraFieldTest.php
    class ExtendedInformationExtraFieldTest extends TestCase
    public function testSerializesCorrectly(): void
    public function testSerializesEmptyCorrectly(): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/ZipStreamTest.php
    class ZipStreamTest extends TestCase
    public function testAddFile(): void
    public function testAddFileUtf8NameComment(): void
    public function testAddFileUtf8NameNonUtfComment(): void
    public function testAddFileWithStorageMethod(): void
    public function testAddFileFromPath(): void
    public function testAddFileFromPathFileNotFoundException(): void
    public function testAddFileFromPathFileNotReadableException(): void
    public function testAddFileFromPathWithStorageMethod(): void
    public function testAddLargeFileFromPath(): void
    public function testAddFileFromStream(): void
    public function testAddFileFromStreamUnreadableInput(): void
    public function testAddFileFromStreamBrokenOutputWrite(): void
    public function testAddFileFromStreamBrokenInputRewind(): void
    public function testAddFileFromStreamUnseekableInputWithoutZeroHeader(): void
    public function testAddFileFromStreamUnseekableInputWithZeroHeader(): void
    $streamUnseekable = StreamWrapper::getResource(new class ('test') extends EndlessCycleStream {
    public function isSeekable(): bool
    public function seek(int $offset, int $whence = SEEK_SET): void
    public function testAddFileFromStreamWithStorageMethod(): void
    public function testAddFileFromPsr7Stream(): void
    public function testAddLargeFileFromPsr7Stream(): void
    public function testContinueFinishedZip(): void
    public function testManyFilesWithoutZip64(): void
    public function testManyFilesWithZip64(): void
    public function testLongZipWithout64(): void
    public function testLongZipWith64(): void
    public function testAddLargeFileWithoutZip64WithZeroHeader(): void
    public function testAddsZip64HeaderWhenNeeded(): void
    public function testDoesNotAddZip64HeaderWhenNotNeeded(): void
    public function testAddLargeFileWithoutZip64WithoutZeroHeader(): void
    public function testAddFileFromPsr7StreamWithOutputToPsr7Stream(): void
    public function testAddFileFromPsr7StreamWithFileSizeSet(): void
    public function testCreateArchiveHeaders(): void
    $httpHeaderCallback = function (string $header) use (&$headers) {
    public function testCreateArchiveWithFlushOptionSet(): void
    public function testCreateArchiveWithOutputBufferingOffAndFlushOptionSet(): void
    public function testAddEmptyDirectory(): void
    public function testAddFileSimulate(): void
    $create = function (OperationMode $operationMode): int {
    public function testAddFileSimulateWithMaxSize(): void
    $create = function (OperationMode $operationMode): int {
    public function testAddFileSimulateWithFstat(): void
    $create = function (OperationMode $operationMode): int {
    public function testAddFileSimulateWithExactSizeZero(): void
    $create = function (OperationMode $operationMode): int {
    public function testAddFileSimulateWithExactSizeInitial(): void
    $create = function (OperationMode $operationMode): int {
    public function testAddFileSimulateWithZeroSizeInFstat(): void
    $create = function (OperationMode $operationMode): int {
    $zip->addFileFromPsr7Stream('sample.txt', new class implements StreamInterface {
    public function __toString(): string
    public function close(): void {}
    public function detach() {}
    public function getSize(): ?int
    public function tell(): int
    public function eof(): bool
    public function isSeekable(): bool
    public function seek(int $offset, int $whence = SEEK_SET): void
    public function rewind(): void
    public function isWritable(): bool
    public function write(string $string): int
    public function isReadable(): bool
    public function read(int $length): string
    public function getContents(): string
    public function getMetadata(?string $key = null)
    public function testAddFileSimulateWithWrongExactSize(): void
    public function testAddFileSimulateStrictZero(): void
    public function testAddFileSimulateStrictInitial(): void
    public function testAddFileCallbackStrict(): void
    $zip->addFileFromCallback('sample.txt', callback: function () {
    public function testAddFileCallbackLax(): void
    $zip->addFileFromCallback('sample.txt', callback: function () {
    public function testExecuteSimulation(): void
    callback: function () {
    callback: function () {
    public function testExecuteSimulationBeforeFinish(): void
    public function testSimulationWithLargeZip64AndZeroHeader(): void
    private function addLargeFileFileFromPath(CompressionMethod $compressionMethod, $zeroHeader, $zip64): void
--------------------------------------------
Fichier : ./vendor/maennchen/zipstream-php/test/Zs/ExtendedInformationExtraFieldTest.php
    class ExtendedInformationExtraFieldTest extends TestCase
    public function testSerializesCorrectly(): void
--------------------------------------------
Fichier : ./vendor/markbaker/complex/classes/src/Complex.php
    class Complex
    private static function parseComplex($complexNumber)
    public function __construct($realPart = 0.0, $imaginaryPart = null, $suffix = 'i')
    public function getReal(): float
    public function getImaginary(): float
    public function getSuffix(): string
    public function isReal(): bool
    public function isComplex(): bool
    public function format(): string
    public function __toString(): string
    public static function validateComplexArgument($complex): Complex
    public function reverse(): Complex
    public function invertImaginary(): Complex
    public function invertReal(): Complex
    * Returns the result of the function call or operation
    public function __call($functionName, $arguments)
    // Test for function calls
--------------------------------------------
Fichier : ./vendor/markbaker/complex/classes/src/Exception.php
    class Exception extends \Exception
--------------------------------------------
Fichier : ./vendor/markbaker/complex/classes/src/Functions.php
    class Functions
    * This function is a synonym for rho()
    public static function abs($complex): float
    public static function acos($complex): Complex
    public static function acosh($complex): Complex
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function acot($complex): Complex
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function acoth($complex): Complex
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function acsc($complex): Complex
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function acsch($complex): Complex
    * This function is a synonym for theta()
    public static function argument($complex): float
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function asec($complex): Complex
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function asech($complex): Complex
    public static function asin($complex): Complex
    public static function asinh($complex): Complex
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function atan($complex): Complex
    public static function atanh($complex): Complex
    public static function conjugate($complex): Complex
    public static function cos($complex): Complex
    public static function cosh($complex): Complex
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function cot($complex): Complex
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function coth($complex): Complex
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function csc($complex): Complex
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function csch($complex): Complex
    public static function exp($complex): Complex
    * @throws    InvalidArgumentException    If function would result in a division by zero
    public static function inverse($complex): Complex
    public static function ln($complex): Complex
    public static function log2($complex): Complex
    public static function log10($complex): Complex
    public static function negative($complex): Complex
    public static function pow($complex, $power): Complex
    public static function rho($complex): float
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function sec($complex): Complex
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function sech($complex): Complex
    public static function sin($complex): Complex
    public static function sinh($complex): Complex
    public static function sqrt($complex): Complex
    * @throws    InvalidArgumentException    If function would result in a division by zero
    public static function tan($complex): Complex
    * @throws    \InvalidArgumentException    If function would result in a division by zero
    public static function tanh($complex): Complex
    public static function theta($complex): float
--------------------------------------------
Fichier : ./vendor/markbaker/complex/classes/src/Operations.php
    class Operations
    public static function add(...$complexValues): Complex
    throw new \Exception('This function requires at least 2 arguments');
    public static function divideby(...$complexValues): Complex
    throw new \Exception('This function requires at least 2 arguments');
    public static function divideinto(...$complexValues): Complex
    throw new \Exception('This function requires at least 2 arguments');
    public static function multiply(...$complexValues): Complex
    throw new \Exception('This function requires at least 2 arguments');
    public static function subtract(...$complexValues): Complex
    throw new \Exception('This function requires at least 2 arguments');
--------------------------------------------
Fichier : ./vendor/markbaker/complex/examples/complexTest.php
--------------------------------------------
Fichier : ./vendor/markbaker/complex/examples/testFunctions.php
--------------------------------------------
Fichier : ./vendor/markbaker/complex/examples/testOperations.php
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/buildPhar.php
    spl_autoload_register(function ($className) {
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Builder.php
    class Builder
    public static function createFilledMatrix($fillValue, $rows, $columns = null)
    public static function createIdentityMatrix($dimensions, $fillValue = null)
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Decomposition/Decomposition.php
    class Decomposition
    public static function decomposition($type, Matrix $matrix)
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Decomposition/LU.php
    class LU
    public function __construct(Matrix $matrix)
    public function getL(): Matrix
    public function getU(): Matrix
    public function getP(): Matrix
    public function getPivot(): array
    public function isNonsingular(): bool
    private function buildPivot(): void
    private function localisedReferenceColumn($column): array
    private function applyTransformations($column, array $luColumn): void
    private function findPivot($column, array $luColumn): int
    private function pivotExchange($pivot, $column): void
    private function computeMultipliers($diagonal): void
    private function pivotB(Matrix $B): array
    public function solve(Matrix $B): Matrix
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Decomposition/QR.php
    class QR
    public function __construct(Matrix $matrix)
    public function getHouseholdVectors(): Matrix
    public function getQ(): Matrix
    function (&$row) use ($rowCount) {
    public function getR(): Matrix
    private function hypo($a, $b): float
    private function decompose(): void
    public function isFullRank(): bool
    public function solve(Matrix $B): Matrix
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Div0Exception.php
    class Div0Exception extends Exception
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Exception.php
    class Exception extends \Exception
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Functions.php
    class Functions
    private static function validateMatrix($matrix)
    private static function getAdjoint(Matrix $matrix)
    public static function adjoint($matrix)
    private static function getCofactors(Matrix $matrix)
    public static function cofactors($matrix)
    private static function getDeterminantSegment(Matrix $matrix, $row, $column)
    function (&$row) use ($column) {
    private static function getDeterminant(Matrix $matrix)
    public static function determinant($matrix)
    public static function diagonal($matrix)
    public static function antidiagonal($matrix)
    public static function identity($matrix)
    public static function inverse($matrix, string $type = 'inverse')
    protected static function getMinors(Matrix $matrix)
    public static function minors($matrix)
    public static function trace($matrix)
    public static function transpose($matrix)
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Matrix.php
    class Matrix
    final public function __construct(array $grid)
    protected function buildFromArray(array $grid): void
    function ($carry, $value) {
    function (&$value) use ($columns) {
    public static function validateRow(int $row): int
    public static function validateColumn(int $column): int
    protected function validateRowInRange(int $row): int
    protected function validateColumnInRange(int $column): int
    public function getRows(int $row, int $rowCount = 1): Matrix
    public function getColumns(int $column, int $columnCount = 1): Matrix
    public function dropRows(int $row, int $rowCount = 1): Matrix
    public function dropColumns(int $column, int $columnCount = 1): Matrix
    function (&$row) use ($column, $columnCount) {
    public function getValue(int $row, int $column)
    public function rows(): Generator
    public function columns(): Generator
    public function isSquare(): bool
    public function isVector(): bool
    public function toArray(): array
    public function solve(Matrix $B): Matrix
    public function __get(string $propertyName)
    // Test for function calls
    * Returns the result of the function call or operation
    public function __call(string $functionName, $arguments)
    // Test for function calls
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Operations.php
    class Operations
    public static function add(...$matrixValues): Matrix
    public static function directsum(...$matrixValues): Matrix
    public static function divideby(...$matrixValues): Matrix
    public static function divideinto(...$matrixValues): Matrix
    public static function multiply(...$matrixValues): Matrix
    public static function subtract(...$matrixValues): Matrix
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Operators/Addition.php
    class Addition extends Operator
    public function execute($value): Operator
    protected function addScalar($value): Operator
    protected function addMatrix(Matrix $value): Operator
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Operators/DirectSum.php
    class DirectSum extends Operator
    public function execute($value): Operator
    private function directSumMatrix($value): Operator
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Operators/Division.php
    class Division extends Multiplication
    public function execute($value, string $type = 'division'): Operator
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Operators/Multiplication.php
    class Multiplication extends Operator
    public function execute($value, string $type = 'multiplication'): Operator
    protected function multiplyScalar($value, string $type = 'multiplication'): Operator
    protected function multiplyMatrix(Matrix $value, string $type = 'multiplication'): Operator
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Operators/Operator.php
    abstract class Operator
    public function __construct(Matrix $matrix)
    protected function validateMatchingDimensions(Matrix $matrix): void
    protected function validateReflectingDimensions(Matrix $matrix): void
    public function result(): Matrix
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/classes/src/Operators/Subtraction.php
    class Subtraction extends Operator
    public function execute($value): Operator
    protected function subtractScalar($value): Operator
    protected function subtractMatrix(Matrix $value): Operator
--------------------------------------------
Fichier : ./vendor/markbaker/matrix/examples/test.php
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/DeepCopy.php
    class DeepCopy
    public function __construct($useCloneMethod = false)
    public function skipUncloneable($skipUncloneable = true)
    public function copy($object)
    public function addFilter(Filter $filter, Matcher $matcher)
    public function prependFilter(Filter $filter, Matcher $matcher)
    public function addTypeFilter(TypeFilter $filter, TypeMatcher $matcher)
    public function prependTypeFilter(TypeFilter $filter, TypeMatcher $matcher)
    private function recursiveCopy($var)
    private function copyArray(array $array)
    private function copyObject($object)
    'The class "%s" is not cloneable.',
    private function copyObjectProperty($object, ReflectionProperty $property)
    function ($object) {
    private function getFirstMatchedTypeFilter(array $filterRecords, $var)
    function (array $record) use ($var) {
    private function first(array $elements, callable $predicate)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/deep_copy.php
    use function function_exists;
    function deep_copy($value, $useCloneMethod = false)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Exception/CloneException.php
    class CloneException extends UnexpectedValueException
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Exception/PropertyException.php
    class PropertyException extends ReflectionException
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Filter/ChainableFilter.php
    class ChainableFilter implements Filter
    public function __construct(Filter $filter)
    public function apply($object, $property, $objectCopier)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Filter/Doctrine/DoctrineCollectionFilter.php
    class DoctrineCollectionFilter implements Filter
    public function apply($object, $property, $objectCopier)
    function ($item) use ($objectCopier) {
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Filter/Doctrine/DoctrineEmptyCollectionFilter.php
    class DoctrineEmptyCollectionFilter implements Filter
    public function apply($object, $property, $objectCopier)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Filter/Doctrine/DoctrineProxyFilter.php
    class DoctrineProxyFilter implements Filter
    * Triggers the magic method __load() on a Doctrine Proxy class to load the
    public function apply($object, $property, $objectCopier)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Filter/Filter.php
    public function apply($object, $property, $objectCopier);
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Filter/KeepFilter.php
    class KeepFilter implements Filter
    public function apply($object, $property, $objectCopier)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Filter/ReplaceFilter.php
    class ReplaceFilter implements Filter
    public function __construct(callable $callable)
    public function apply($object, $property, $objectCopier)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Filter/SetNullFilter.php
    class SetNullFilter implements Filter
    public function apply($object, $property, $objectCopier)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Matcher/Doctrine/DoctrineProxyMatcher.php
    class DoctrineProxyMatcher implements Matcher
    public function matches($object, $property)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Matcher/Matcher.php
    public function matches($object, $property);
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Matcher/PropertyMatcher.php
    class PropertyMatcher implements Matcher
    * @param string $class    Class name
    public function __construct($class, $property)
    $this->class = $class;
    public function matches($object, $property)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Matcher/PropertyNameMatcher.php
    class PropertyNameMatcher implements Matcher
    public function __construct($property)
    public function matches($object, $property)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Matcher/PropertyTypeMatcher.php
    class PropertyTypeMatcher implements Matcher
    public function __construct($propertyType)
    public function matches($object, $property)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/Reflection/ReflectionHelper.php
    class ReflectionHelper
    public static function getProperties(ReflectionClass $ref)
    public static function getProperty($object, $name)
    'The class "%s" doesn\'t have a property with the given name: "%s".',
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/Date/DateIntervalFilter.php
    class DateIntervalFilter implements TypeFilter
    public function apply($element)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/Date/DatePeriodFilter.php
    class DatePeriodFilter implements TypeFilter
    public function apply($element)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/ReplaceFilter.php
    class ReplaceFilter implements TypeFilter
    public function __construct(callable $callable)
    public function apply($element)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/ShallowCopyFilter.php
    class ShallowCopyFilter implements TypeFilter
    public function apply($element)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/Spl/ArrayObjectFilter.php
    final class ArrayObjectFilter implements TypeFilter
    public function __construct(DeepCopy $copier)
    public function apply($arrayObject)
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/Spl/SplDoublyLinkedList.php
    class SplDoublyLinkedList extends SplDoublyLinkedListFilter
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/Spl/SplDoublyLinkedListFilter.php
    class SplDoublyLinkedListFilter implements TypeFilter
    public function __construct(DeepCopy $copier)
    public function apply($element)
    private function createCopyClosure()
    $copy = function (SplDoublyLinkedList $list) use ($copier) {
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/TypeFilter/TypeFilter.php
    public function apply($element);
--------------------------------------------
Fichier : ./vendor/myclabs/deep-copy/src/DeepCopy/TypeMatcher/TypeMatcher.php
    class TypeMatcher
    public function __construct($type)
    public function matches($element)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/BadRouteException.php
    class BadRouteException extends \LogicException
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/bootstrap.php
    spl_autoload_register(function ($class) {
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/DataGenerator/CharCountBased.php
    class CharCountBased extends RegexBasedAbstract
    protected function getApproxChunkSize()
    protected function processChunk($regexToRoutesMap)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/DataGenerator/GroupCountBased.php
    class GroupCountBased extends RegexBasedAbstract
    protected function getApproxChunkSize()
    protected function processChunk($regexToRoutesMap)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/DataGenerator/GroupPosBased.php
    class GroupPosBased extends RegexBasedAbstract
    protected function getApproxChunkSize()
    protected function processChunk($regexToRoutesMap)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/DataGenerator/MarkBased.php
    class MarkBased extends RegexBasedAbstract
    protected function getApproxChunkSize()
    protected function processChunk($regexToRoutesMap)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/DataGenerator/RegexBasedAbstract.php
    abstract class RegexBasedAbstract implements DataGenerator
    abstract protected function getApproxChunkSize();
    abstract protected function processChunk($regexToRoutesMap);
    public function addRoute($httpMethod, $routeData, $handler)
    public function getData()
    private function generateVariableRouteData()
    private function computeChunkSize($count)
    private function isStaticRoute($routeData)
    private function addStaticRoute($httpMethod, $routeData, $handler)
    private function addVariableRoute($httpMethod, $routeData, $handler)
    private function buildRegexForRoute($routeData)
    private function regexHasCapturingGroups($regex)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/DataGenerator.php
    public function addRoute($httpMethod, $routeData, $handler);
    public function getData();
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/Dispatcher/CharCountBased.php
    class CharCountBased extends RegexBasedAbstract
    public function __construct($data)
    protected function dispatchVariableRoute($routeData, $uri)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/Dispatcher/GroupCountBased.php
    class GroupCountBased extends RegexBasedAbstract
    public function __construct($data)
    protected function dispatchVariableRoute($routeData, $uri)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/Dispatcher/GroupPosBased.php
    class GroupPosBased extends RegexBasedAbstract
    public function __construct($data)
    protected function dispatchVariableRoute($routeData, $uri)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/Dispatcher/MarkBased.php
    class MarkBased extends RegexBasedAbstract
    public function __construct($data)
    protected function dispatchVariableRoute($routeData, $uri)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/Dispatcher/RegexBasedAbstract.php
    abstract class RegexBasedAbstract implements Dispatcher
    abstract protected function dispatchVariableRoute($routeData, $uri);
    public function dispatch($httpMethod, $uri)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/Dispatcher.php
    public function dispatch($httpMethod, $uri);
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/functions.php
    function simpleDispatcher(callable $routeDefinitionCallback, array $options = [])
    function cachedDispatcher(callable $routeDefinitionCallback, array $options = [])
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/Route.php
    class Route
    public function __construct($httpMethod, $handler, $regex, $variables)
    public function matches($str)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/RouteCollector.php
    class RouteCollector
    public function __construct(RouteParser $routeParser, DataGenerator $dataGenerator)
    public function addRoute($httpMethod, $route, $handler)
    public function addGroup($prefix, callable $callback)
    public function get($route, $handler)
    public function post($route, $handler)
    public function put($route, $handler)
    public function delete($route, $handler)
    public function patch($route, $handler)
    public function head($route, $handler)
    public function getData()
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/RouteParser/Std.php
    class Std implements RouteParser
    public function parse($route)
    private function parsePlaceholders($route)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/src/RouteParser.php
    public function parse($route);
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/test/bootstrap.php
    spl_autoload_register(function ($class) {
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/test/Dispatcher/CharCountBasedTest.php
    class CharCountBasedTest extends DispatcherTest
    protected function getDispatcherClass()
    protected function getDataGeneratorClass()
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/test/Dispatcher/DispatcherTest.php
    abstract class DispatcherTest extends TestCase
    abstract protected function getDispatcherClass();
    abstract protected function getDataGeneratorClass();
    * Set appropriate options for the specific Dispatcher class we're testing
    private function generateDispatcherOptions()
    public function testFoundDispatches($method, $uri, $callback, $handler, $argDict)
    public function testNotFoundDispatches($method, $uri, $callback)
    public function testMethodNotAllowedDispatches($method, $uri, $callback, $availableMethods)
    public function testDuplicateVariableNameError()
    \FastRoute\simpleDispatcher(function (RouteCollector $r) {
    public function testDuplicateVariableRoute()
    \FastRoute\simpleDispatcher(function (RouteCollector $r) {
    public function testDuplicateStaticRoute()
    \FastRoute\simpleDispatcher(function (RouteCollector $r) {
    public function testShadowedStaticRoute()
    \FastRoute\simpleDispatcher(function (RouteCollector $r) {
    public function testCapturing()
    \FastRoute\simpleDispatcher(function (RouteCollector $r) {
    public function provideFoundDispatchCases()
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    public function provideNotFoundDispatchCases()
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    public function provideMethodNotAllowedDispatchCases()
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
    $callback = function (RouteCollector $r) {
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/test/Dispatcher/GroupCountBasedTest.php
    class GroupCountBasedTest extends DispatcherTest
    protected function getDispatcherClass()
    protected function getDataGeneratorClass()
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/test/Dispatcher/GroupPosBasedTest.php
    class GroupPosBasedTest extends DispatcherTest
    protected function getDispatcherClass()
    protected function getDataGeneratorClass()
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/test/Dispatcher/MarkBasedTest.php
    class MarkBasedTest extends DispatcherTest
    public function setUp()
    protected function getDispatcherClass()
    protected function getDataGeneratorClass()
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/test/HackTypechecker/fixtures/all_options.php
    function all_options_simple(): \FastRoute\Dispatcher {
    function all_options_cached(): \FastRoute\Dispatcher {
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/test/HackTypechecker/fixtures/empty_options.php
    function empty_options_simple(): \FastRoute\Dispatcher {
    function empty_options_cached(): \FastRoute\Dispatcher {
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/test/HackTypechecker/fixtures/no_options.php
    function no_options_simple(): \FastRoute\Dispatcher {
    function no_options_cached(): \FastRoute\Dispatcher {
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/test/HackTypechecker/HackTypecheckerTest.php
    class HackTypecheckerTest extends TestCase
    public function testTypechecks($recurse = true)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/test/RouteCollectorTest.php
    class RouteCollectorTest extends TestCase
    public function testShortcuts()
    public function testGroups()
    $r->addGroup('/group-one', function (DummyRouteCollector $r) {
    $r->addGroup('/group-two', function (DummyRouteCollector $r) {
    $r->addGroup('/admin', function (DummyRouteCollector $r) {
    $r->addGroup('/admin-', function (DummyRouteCollector $r) {
    class DummyRouteCollector extends RouteCollector
    public function __construct()
    public function addRoute($method, $route, $handler)
--------------------------------------------
Fichier : ./vendor/nikic/fast-route/test/RouteParser/StdTest.php
    class StdTest extends TestCase
    public function testParse($routeString, $expectedRouteDatas)
    public function testParseError($routeString, $expectedExceptionMessage)
    public function provideTestParse()
    public function provideTestParseError()
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/ClassConst.php
    class ClassConst implements PhpParser\Builder {
    * Creates a class constant builder
    public function __construct($name, $value) {
    public function addConst($name, $value) {
    public function makePublic() {
    public function makeProtected() {
    public function makePrivate() {
    public function makeFinal() {
    public function setDocComment($docComment) {
    public function addAttribute($attribute) {
    public function setType($type) {
    * Returns the built class node.
    public function getNode(): PhpParser\Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php
    class Class_ extends Declaration {
    * Creates a class builder.
    public function __construct(string $name) {
    * @param Name|string $class Name of class to extend
    public function extend($class) {
    public function implement(...$interfaces) {
    * Makes the class abstract.
    public function makeAbstract() {
    * Makes the class final.
    public function makeFinal() {
    * Makes the class readonly.
    public function makeReadonly() {
    public function addStmt($stmt) {
    public function addAttribute($attribute) {
    * Returns the built class node.
    * @return Stmt\Class_ The built class node
    public function getNode(): PhpParser\Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/Declaration.php
    abstract class Declaration implements PhpParser\Builder {
    abstract public function addStmt($stmt);
    public function addStmts(array $stmts) {
    public function setDocComment($docComment) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/EnumCase.php
    class EnumCase implements PhpParser\Builder {
    public function __construct($name) {
    public function setValue($value) {
    public function setDocComment($docComment) {
    public function addAttribute($attribute) {
    public function getNode(): PhpParser\Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/Enum_.php
    class Enum_ extends Declaration {
    public function __construct(string $name) {
    public function setScalarType($scalarType) {
    public function implement(...$interfaces) {
    public function addStmt($stmt) {
    public function addAttribute($attribute) {
    * Returns the built class node.
    public function getNode(): PhpParser\Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/FunctionLike.php
    abstract class FunctionLike extends Declaration {
    * Make the function return by reference.
    public function makeReturnByRef() {
    public function addParam($param) {
    public function addParams(array $params) {
    public function setReturnType($type) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/Function_.php
    class Function_ extends FunctionLike {
    * Creates a function builder.
    public function __construct(string $name) {
    public function addStmt($stmt) {
    public function addAttribute($attribute) {
    * Returns the built function node.
    * @return Stmt\Function_ The built function node
    public function getNode(): Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php
    class Interface_ extends Declaration {
    public function __construct(string $name) {
    public function extend(...$interfaces) {
    public function addStmt($stmt) {
    public function addAttribute($attribute) {
    public function getNode(): PhpParser\Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php
    class Method extends FunctionLike {
    public function __construct(string $name) {
    public function makePublic() {
    public function makeProtected() {
    public function makePrivate() {
    public function makeStatic() {
    public function makeAbstract() {
    public function makeFinal() {
    public function addStmt($stmt) {
    public function addAttribute($attribute) {
    public function getNode(): Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/Namespace_.php
    class Namespace_ extends Declaration {
    public function __construct($name) {
    public function addStmt($stmt) {
    public function getNode(): Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/Param.php
    class Param implements PhpParser\Builder {
    public function __construct(string $name) {
    public function setDefault($value) {
    public function setType($type) {
    public function makeByRef() {
    public function makeVariadic() {
    public function makePublic() {
    public function makeProtected() {
    public function makePrivate() {
    public function makeReadonly() {
    public function makePrivateSet() {
    public function makeProtectedSet() {
    public function addAttribute($attribute) {
    public function getNode(): Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php
    class Property implements PhpParser\Builder {
    public function __construct(string $name) {
    public function makePublic() {
    public function makeProtected() {
    public function makePrivate() {
    public function makeStatic() {
    public function makeReadonly() {
    public function makeAbstract() {
    public function makeFinal() {
    public function makePrivateSet() {
    public function makeProtectedSet() {
    public function setDefault($value) {
    public function setDocComment($docComment) {
    public function setType($type) {
    public function addAttribute($attribute) {
    public function addHook(Node\PropertyHook $hook) {
    * Returns the built class node.
    public function getNode(): PhpParser\Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/TraitUse.php
    class TraitUse implements Builder {
    public function __construct(...$traits) {
    public function and($trait) {
    public function with($adaptation) {
    public function getNode(): Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/TraitUseAdaptation.php
    class TraitUseAdaptation implements Builder {
    public function __construct($trait, $method) {
    public function as($alias) {
    public function makePublic() {
    public function makeProtected() {
    public function makePrivate() {
    public function insteadof(...$traits) {
    protected function setModifier(int $modifier): void {
    public function getNode(): Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/Trait_.php
    class Trait_ extends Declaration {
    public function __construct(string $name) {
    public function addStmt($stmt) {
    public function addAttribute($attribute) {
    public function getNode(): PhpParser\Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder/Use_.php
    class Use_ implements Builder {
    public function __construct($name, int $type) {
    public function as(string $alias) {
    public function getNode(): Node {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Builder.php
    public function getNode(): Node;
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/BuilderFactory.php
    class BuilderFactory {
    public function attribute($name, array $args = []): Node\Attribute {
    public function namespace($name): Builder\Namespace_ {
    * Creates a class builder.
    * @return Builder\Class_ The created class builder
    public function class(string $name): Builder\Class_ {
    public function interface(string $name): Builder\Interface_ {
    public function trait(string $name): Builder\Trait_ {
    public function enum(string $name): Builder\Enum_ {
    public function useTrait(...$traits): Builder\TraitUse {
    public function traitUseAdaptation($trait, $method = null): Builder\TraitUseAdaptation {
    public function method(string $name): Builder\Method {
    public function param(string $name): Builder\Param {
    public function property(string $name): Builder\Property {
    * Creates a function builder.
    * @return Builder\Function_ The created function builder
    public function function(string $name): Builder\Function_ {
    * Creates a namespace/class use builder.
    public function use($name): Builder\Use_ {
    * Creates a function use builder.
    * @param Node\Name|string $name Name of the function to alias
    * @return Builder\Use_ The created use function builder
    public function useFunction($name): Builder\Use_ {
    public function useConst($name): Builder\Use_ {
    * Creates a class constant builder.
    public function classConst($name, $value): Builder\ClassConst {
    public function enumCase($name): Builder\EnumCase {
    public function val($value): Expr {
    public function var($name): Expr\Variable {
    public function args(array $args): array {
    * Creates a function call node.
    public function funcCall($name, array $args = []): Expr\FuncCall {
    public function methodCall(Expr $var, $name, array $args = []): Expr\MethodCall {
    * @param string|Name|Expr $class Class name
    public function staticCall($class, $name, array $args = []): Expr\StaticCall {
    * @param string|Name|Expr $class Class name
    public function new($class, array $args = []): Expr\New_ {
    public function constFetch($name): Expr\ConstFetch {
    public function propertyFetch(Expr $var, $name): Expr\PropertyFetch {
    * Creates a class constant fetch node.
    * @param string|Name|Expr $class Class name
    public function classConstFetch($class, $name): Expr\ClassConstFetch {
    public function concat(...$exprs): Concat {
    private function normalizeStringExpr($expr): Expr {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/BuilderHelpers.php
    * This class defines helpers used in the implementation of builders. Don't use it directly.
    final class BuilderHelpers {
    public static function normalizeNode($node): Node {
    public static function normalizeStmt($node): Stmt {
    public static function normalizeIdentifier($name): Identifier {
    public static function normalizeIdentifierOrExpr($name) {
    public static function normalizeName($name): Name {
    public static function normalizeNameOrExpr($name) {
    public static function normalizeType($type) {
    public static function normalizeValue($value): Expr {
    public static function normalizeDocComment($docComment): Comment\Doc {
    public static function normalizeAttribute($attribute): Node\AttributeGroup {
    public static function addModifier(int $modifiers, int $modifier): int {
    public static function addClassModifier(int $existingModifiers, int $modifierToSet): int {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Comment/Doc.php
    class Doc extends \PhpParser\Comment {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Comment.php
    class Comment implements \JsonSerializable {
    public function __construct(
    public function getText(): string {
    public function getStartLine(): int {
    public function getStartFilePos(): int {
    public function getStartTokenPos(): int {
    public function getEndLine(): int {
    public function getEndFilePos(): int {
    public function getEndTokenPos(): int {
    public function __toString(): string {
    public function getReformattedText(): string {
    private function getShortestWhitespacePrefixLen(string $str): int {
    public function jsonSerialize(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/compatibility_tokens.php
    function defineCompatibilityTokens(): void {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/ConstExprEvaluationException.php
    class ConstExprEvaluationException extends \Exception {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/ConstExprEvaluator.php
    use function array_merge;
    class ConstExprEvaluator {
    * class doc comment for more information.
    public function __construct(?callable $fallbackEvaluator = null) {
    $this->fallbackEvaluator = $fallbackEvaluator ?? function (Expr $expr) {
    * See class doc comment for caveats and limitations.
    public function evaluateSilently(Expr $expr) {
    set_error_handler(function ($num, $str, $file, $line) {
    * See class doc comment for caveats and limitations.
    public function evaluateDirectly(Expr $expr) {
    private function evaluate(Expr $expr) {
    private function evaluateArray(Expr\Array_ $expr): array {
    private function evaluateTernary(Expr\Ternary $expr) {
    private function evaluateBinaryOp(Expr\BinaryOp $expr) {
    private function evaluateConstFetch(Expr\ConstFetch $expr) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Error.php
    class Error extends \RuntimeException {
    public function __construct(string $message, array $attributes = []) {
    public function getRawMessage(): string {
    public function getStartLine(): int {
    public function getEndLine(): int {
    public function getAttributes(): array {
    public function setAttributes(array $attributes): void {
    public function setRawMessage(string $message): void {
    public function setStartLine(int $line): void {
    public function hasColumnInfo(): bool {
    public function getStartColumn(string $code): int {
    public function getEndColumn(string $code): int {
    public function getMessageWithColumnInfo(string $code): string {
    private function toColumn(string $code, int $pos): int {
    protected function updateMessage(): void {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/ErrorHandler/Collecting.php
    class Collecting implements ErrorHandler {
    public function handleError(Error $error): void {
    public function getErrors(): array {
    public function hasErrors(): bool {
    public function clearErrors(): void {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/ErrorHandler/Throwing.php
    class Throwing implements ErrorHandler {
    public function handleError(Error $error): void {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/ErrorHandler.php
    public function handleError(Error $error): void;
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Internal/DiffElem.php
    class DiffElem {
    public function __construct(int $type, $old, $new) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Internal/Differ.php
    class Differ {
    public function __construct(callable $isEqual) {
    public function diff(array $old, array $new): array {
    public function diffWithReplacements(array $old, array $new): array {
    private function calculateTrace(array $old, array $new): array {
    private function extractDiff(array $trace, int $x, int $y, array $old, array $new): array {
    private function coalesceReplacements(array $diff): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Internal/PrintableNewAnonClassNode.php
    * The normal anonymous class structure violates assumptions about the order of token offsets.
    * Namely, the constructor arguments are part of the Expr\New_ node and follow the class node, even
    class PrintableNewAnonClassNode extends Expr {
    /** @var null|Node\Name Name of extended class */
    public function __construct(
    public static function fromNewNode(Expr\New_ $newNode): self {
    $class = $newNode->class;
    assert($class instanceof Node\Stmt\Class_);
    public function getType(): string {
    public function getSubNodeNames(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Internal/TokenPolyfill.php
    class TokenPolyfill extends \PhpToken {
    * This is a polyfill for the PhpToken class introduced in PHP 8.0. We do not actually polyfill
    class TokenPolyfill {
    final public function __construct(int $id, string $text, int $line = -1, int $pos = -1) {
    public function getTokenName(): ?string {
    * latter case, the function returns true if any of the kinds in the array match.
    public function is($kind): bool {
    public function isIgnorable(): bool {
    public function __toString(): string {
    public static function tokenize(string $code, int $flags = 0): array {
    private static function init(): void {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Internal/TokenStream.php
    class TokenStream {
    public function __construct(array $tokens, int $tabWidth) {
    public function haveParens(int $startPos, int $endPos): bool {
    public function haveBraces(int $startPos, int $endPos): bool {
    public function haveTokenImmediatelyBefore(int $pos, $expectedTokenType): bool {
    public function haveTokenImmediatelyAfter(int $pos, $expectedTokenType): bool {
    public function skipLeft(int $pos, $skipTokenType): int {
    public function skipRight(int $pos, $skipTokenType): int {
    public function skipLeftWhitespace(int $pos): int {
    public function skipRightWhitespace(int $pos): int {
    public function findRight(int $pos, $findTokenType): int {
    public function haveTokenInRange(int $startPos, int $endPos, $tokenType): bool {
    public function haveTagInRange(int $startPos, int $endPos): bool {
    public function getIndentationBefore(int $pos): int {
    public function getTokenCode(int $from, int $to, int $indent): string {
    private function calcIndentMap(int $tabWidth): array {
    private function getIndent(string $ws, int $tabWidth): int {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/JsonDecoder.php
    class JsonDecoder {
    /** @var \ReflectionClass<Node>[] Node type to reflection class map */
    public function decode(string $json) {
    private function decodeRecursive($value) {
    private function decodeArray(array $array): array {
    private function decodeNode(array $value): Node {
    private function decodeComment(array $value): Comment {
    $className = $value['nodeType'] === 'Comment' ? Comment::class : Comment\Doc::class;
    private function reflectionClassFromNodeType(string $nodeType): \ReflectionClass {
    private function classNameFromNodeType(string $nodeType): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php
    class Emulative extends Lexer {
    public function __construct(?PhpVersion $phpVersion = null) {
    public function tokenize(string $code, ?ErrorHandler $errorHandler = null): array {
    $emulators = array_filter($this->emulators, function ($emulator) use ($code) {
    private function isForwardEmulationNeeded(PhpVersion $emulatorPhpVersion): bool {
    private function isReverseEmulationNeeded(PhpVersion $emulatorPhpVersion): bool {
    private function sortPatches(): void {
    usort($this->patches, function ($p1, $p2) {
    private function fixupTokens(array $tokens): array {
    private function fixupErrors(array $errors): void {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/TokenEmulator/AsymmetricVisibilityTokenEmulator.php
    final class AsymmetricVisibilityTokenEmulator extends TokenEmulator {
    public function getPhpVersion(): PhpVersion {
    public function isEmulationNeeded(string $code): bool {
    public function emulate(string $code, array $tokens): array {
    public function reverseEmulate(string $code, array $tokens): array {
    protected function isKeywordContext(array $tokens, int $pos): bool {
    private function getPreviousNonSpaceToken(array $tokens, int $start): ?Token {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/TokenEmulator/AttributeEmulator.php
    final class AttributeEmulator extends TokenEmulator {
    public function getPhpVersion(): PhpVersion {
    public function isEmulationNeeded(string $code): bool {
    public function emulate(string $code, array $tokens): array {
    public function reverseEmulate(string $code, array $tokens): array {
    public function preprocessCode(string $code, array &$patches): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/TokenEmulator/EnumTokenEmulator.php
    final class EnumTokenEmulator extends KeywordEmulator {
    public function getPhpVersion(): PhpVersion {
    public function getKeywordString(): string {
    public function getKeywordToken(): int {
    protected function isKeywordContext(array $tokens, int $pos): bool {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/TokenEmulator/ExplicitOctalEmulator.php
    class ExplicitOctalEmulator extends TokenEmulator {
    public function getPhpVersion(): PhpVersion {
    public function isEmulationNeeded(string $code): bool {
    public function emulate(string $code, array $tokens): array {
    private function resolveIntegerOrFloatToken(string $str): int {
    public function reverseEmulate(string $code, array $tokens): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/TokenEmulator/KeywordEmulator.php
    abstract class KeywordEmulator extends TokenEmulator {
    abstract public function getKeywordString(): string;
    abstract public function getKeywordToken(): int;
    public function isEmulationNeeded(string $code): bool {
    protected function isKeywordContext(array $tokens, int $pos): bool {
    public function emulate(string $code, array $tokens): array {
    private function getPreviousNonSpaceToken(array $tokens, int $start): ?Token {
    public function reverseEmulate(string $code, array $tokens): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/TokenEmulator/MatchTokenEmulator.php
    final class MatchTokenEmulator extends KeywordEmulator {
    public function getPhpVersion(): PhpVersion {
    public function getKeywordString(): string {
    public function getKeywordToken(): int {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/TokenEmulator/NullsafeTokenEmulator.php
    final class NullsafeTokenEmulator extends TokenEmulator {
    public function getPhpVersion(): PhpVersion {
    public function isEmulationNeeded(string $code): bool {
    public function emulate(string $code, array $tokens): array {
    public function reverseEmulate(string $code, array $tokens): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/TokenEmulator/PropertyTokenEmulator.php
    final class PropertyTokenEmulator extends KeywordEmulator {
    public function getPhpVersion(): PhpVersion {
    public function getKeywordString(): string {
    public function getKeywordToken(): int {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/TokenEmulator/ReadonlyFunctionTokenEmulator.php
    class ReadonlyFunctionTokenEmulator extends KeywordEmulator {
    public function getKeywordString(): string {
    public function getKeywordToken(): int {
    public function getPhpVersion(): PhpVersion {
    public function reverseEmulate(string $code, array $tokens): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/TokenEmulator/ReadonlyTokenEmulator.php
    final class ReadonlyTokenEmulator extends KeywordEmulator {
    public function getPhpVersion(): PhpVersion {
    public function getKeywordString(): string {
    public function getKeywordToken(): int {
    protected function isKeywordContext(array $tokens, int $pos): bool {
    // Support "function readonly("
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/TokenEmulator/ReverseEmulator.php
    final class ReverseEmulator extends TokenEmulator {
    public function __construct(TokenEmulator $emulator) {
    public function getPhpVersion(): PhpVersion {
    public function isEmulationNeeded(string $code): bool {
    public function emulate(string $code, array $tokens): array {
    public function reverseEmulate(string $code, array $tokens): array {
    public function preprocessCode(string $code, array &$patches): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer/TokenEmulator/TokenEmulator.php
    abstract class TokenEmulator {
    abstract public function getPhpVersion(): PhpVersion;
    abstract public function isEmulationNeeded(string $code): bool;
    abstract public function emulate(string $code, array $tokens): array;
    abstract public function reverseEmulate(string $code, array $tokens): array;
    public function preprocessCode(string $code, array &$patches): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Lexer.php
    class Lexer {
    public function tokenize(string $code, ?ErrorHandler $errorHandler = null): array {
    private function handleInvalidCharacter(Token $token, ErrorHandler $errorHandler): void {
    private function isUnterminatedComment(Token $token): bool {
    protected function postprocessTokens(array &$tokens, ErrorHandler $errorHandler): void {
    // This function reports errors (bad characters and unterminated comments) in the token
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Modifiers.php
    final class Modifiers {
    public static function toString(int $modifier): string {
    private static function isValidModifier(int $modifier): bool {
    public static function verifyClassModifier(int $a, int $b): void {
    public static function verifyModifier(int $a, int $b): void {
    throw new Error('Cannot use the final modifier on an abstract class member');
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NameContext.php
    class NameContext {
    public function __construct(ErrorHandler $errorHandler) {
    public function startNamespace(?Name $namespace = null): void {
    public function addAlias(Name $name, string $aliasName, int $type, array $errorAttrs = []): void {
    Stmt\Use_::TYPE_FUNCTION => 'function ',
    public function getNamespace(): ?Name {
    public function getResolvedName(Name $name, int $type): ?Name {
    // don't resolve special class names
    sprintf("'\\%s' is an invalid class name", $name->toString()),
    * Get resolved class name.
    public function getResolvedClassName(Name $name): Name {
    public function getPossibleNames(string $name, int $type): array {
    public function getShortName(string $name, int $type): Name {
    private function resolveAlias(Name $name, int $type): ?FullyQualified {
    // resolve aliases for qualified names, always against class alias table
    // constant aliases are case-sensitive, function aliases case-insensitive
    private function getNamespaceRelativeName(string $name, string $lcName, int $type): ?Name {
    private function normalizeConstName(string $name): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Arg.php
    class Arg extends NodeAbstract {
    * Constructs a function call argument node.
    public function __construct(
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/ArrayItem.php
    class ArrayItem extends NodeAbstract {
    public function __construct(Expr $value, ?Expr $key = null, bool $byRef = false, array $attributes = [], bool $unpack = false) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Attribute.php
    class Attribute extends NodeAbstract {
    public function __construct(Name $name, array $args = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/AttributeGroup.php
    class AttributeGroup extends NodeAbstract {
    public function __construct(array $attrs, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/ClosureUse.php
    class ClosureUse extends NodeAbstract {
    public function __construct(Expr\Variable $var, bool $byRef = false, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/ComplexType.php
    * This is a base class for complex types, including nullable types and union types.
    abstract class ComplexType extends NodeAbstract {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Const_.php
    class Const_ extends NodeAbstract {
    * Constructs a const node for use in class const and const statements.
    public function __construct($name, Expr $value, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/DeclareItem.php
    class DeclareItem extends NodeAbstract {
    public function __construct($key, Node\Expr $value, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ArrayDimFetch.php
    class ArrayDimFetch extends Expr {
    public function __construct(Expr $var, ?Expr $dim = null, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ArrayItem.php
    class ArrayItem extends \PhpParser\Node\ArrayItem {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Array_.php
    class Array_ extends Expr {
    public function __construct(array $items = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ArrowFunction.php
    class ArrowFunction extends Expr implements FunctionLike {
    public function __construct(array $subNodes, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function returnsByRef(): bool {
    public function getParams(): array {
    public function getReturnType() {
    public function getAttrGroups(): array {
    public function getStmts(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Assign.php
    class Assign extends Expr {
    public function __construct(Expr $var, Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/BitwiseAnd.php
    class BitwiseAnd extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/BitwiseOr.php
    class BitwiseOr extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/BitwiseXor.php
    class BitwiseXor extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/Coalesce.php
    class Coalesce extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/Concat.php
    class Concat extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/Div.php
    class Div extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/Minus.php
    class Minus extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/Mod.php
    class Mod extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/Mul.php
    class Mul extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/Plus.php
    class Plus extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/Pow.php
    class Pow extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/ShiftLeft.php
    class ShiftLeft extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp/ShiftRight.php
    class ShiftRight extends AssignOp {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp.php
    abstract class AssignOp extends Expr {
    public function __construct(Expr $var, Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignRef.php
    class AssignRef extends Expr {
    public function __construct(Expr $var, Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/BitwiseAnd.php
    class BitwiseAnd extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/BitwiseOr.php
    class BitwiseOr extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/BitwiseXor.php
    class BitwiseXor extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/BooleanAnd.php
    class BooleanAnd extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/BooleanOr.php
    class BooleanOr extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Coalesce.php
    class Coalesce extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Concat.php
    class Concat extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Div.php
    class Div extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Equal.php
    class Equal extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Greater.php
    class Greater extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/GreaterOrEqual.php
    class GreaterOrEqual extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Identical.php
    class Identical extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/LogicalAnd.php
    class LogicalAnd extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/LogicalOr.php
    class LogicalOr extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/LogicalXor.php
    class LogicalXor extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Minus.php
    class Minus extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Mod.php
    class Mod extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Mul.php
    class Mul extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/NotEqual.php
    class NotEqual extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/NotIdentical.php
    class NotIdentical extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Plus.php
    class Plus extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Pow.php
    class Pow extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/ShiftLeft.php
    class ShiftLeft extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/ShiftRight.php
    class ShiftRight extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Smaller.php
    class Smaller extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/SmallerOrEqual.php
    class SmallerOrEqual extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp/Spaceship.php
    class Spaceship extends BinaryOp {
    public function getOperatorSigil(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp.php
    abstract class BinaryOp extends Expr {
    public function __construct(Expr $left, Expr $right, array $attributes = []) {
    public function getSubNodeNames(): array {
    abstract public function getOperatorSigil(): string;
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BitwiseNot.php
    class BitwiseNot extends Expr {
    public function __construct(Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BooleanNot.php
    class BooleanNot extends Expr {
    public function __construct(Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/CallLike.php
    abstract class CallLike extends Expr {
    abstract public function getRawArgs(): array;
    * Returns whether this call expression is actually a first class callable.
    public function isFirstClassCallable(): bool {
    * Assert that this is not a first-class callable and return only ordinary Args.
    public function getArgs(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Cast/Array_.php
    class Array_ extends Cast {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Cast/Bool_.php
    class Bool_ extends Cast {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Cast/Double.php
    class Double extends Cast {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Cast/Int_.php
    class Int_ extends Cast {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Cast/Object_.php
    class Object_ extends Cast {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Cast/String_.php
    class String_ extends Cast {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Cast/Unset_.php
    class Unset_ extends Cast {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Cast.php
    abstract class Cast extends Expr {
    public function __construct(Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ClassConstFetch.php
    class ClassConstFetch extends Expr {
    * Constructs a class const fetch node.
    * @param Name|Expr $class Class name
    public function __construct(Node $class, $name, array $attributes = []) {
    $this->class = $class;
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Clone_.php
    class Clone_ extends Expr {
    public function __construct(Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Closure.php
    class Closure extends Expr implements FunctionLike {
    * Constructs a lambda function node.
    public function __construct(array $subNodes = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function returnsByRef(): bool {
    public function getParams(): array {
    public function getReturnType() {
    public function getStmts(): array {
    public function getAttrGroups(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ClosureUse.php
    class ClosureUse extends \PhpParser\Node\ClosureUse {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ConstFetch.php
    class ConstFetch extends Expr {
    public function __construct(Name $name, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Empty_.php
    class Empty_ extends Expr {
    public function __construct(Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Error.php
    class Error extends Expr {
    public function __construct(array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ErrorSuppress.php
    class ErrorSuppress extends Expr {
    public function __construct(Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Eval_.php
    class Eval_ extends Expr {
    public function __construct(Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Exit_.php
    class Exit_ extends Expr {
    public function __construct(?Expr $expr = null, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/FuncCall.php
    class FuncCall extends CallLike {
    * Constructs a function call node.
    public function __construct(Node $name, array $args = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
    public function getRawArgs(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Include_.php
    class Include_ extends Expr {
    public function __construct(Expr $expr, int $type, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Instanceof_.php
    class Instanceof_ extends Expr {
    * @param Name|Expr $class Class name
    public function __construct(Expr $expr, Node $class, array $attributes = []) {
    $this->class = $class;
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Isset_.php
    class Isset_ extends Expr {
    public function __construct(array $vars, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/List_.php
    class List_ extends Expr {
    public function __construct(array $items, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Match_.php
    class Match_ extends Node\Expr {
    public function __construct(Node\Expr $cond, array $arms = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/MethodCall.php
    class MethodCall extends CallLike {
    * Constructs a function call node.
    public function __construct(Expr $var, $name, array $args = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
    public function getRawArgs(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/New_.php
    class New_ extends CallLike {
    * Constructs a function call node.
    * @param Node\Name|Expr|Node\Stmt\Class_ $class Class name (or class node for anonymous classes)
    public function __construct(Node $class, array $args = [], array $attributes = []) {
    $this->class = $class;
    public function getSubNodeNames(): array {
    public function getType(): string {
    public function getRawArgs(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/NullsafeMethodCall.php
    class NullsafeMethodCall extends CallLike {
    public function __construct(Expr $var, $name, array $args = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
    public function getRawArgs(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/NullsafePropertyFetch.php
    class NullsafePropertyFetch extends Expr {
    public function __construct(Expr $var, $name, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PostDec.php
    class PostDec extends Expr {
    public function __construct(Expr $var, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PostInc.php
    class PostInc extends Expr {
    public function __construct(Expr $var, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PreDec.php
    class PreDec extends Expr {
    public function __construct(Expr $var, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PreInc.php
    class PreInc extends Expr {
    public function __construct(Expr $var, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Print_.php
    class Print_ extends Expr {
    public function __construct(Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PropertyFetch.php
    class PropertyFetch extends Expr {
    * Constructs a function call node.
    public function __construct(Expr $var, $name, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ShellExec.php
    class ShellExec extends Expr {
    public function __construct(array $parts, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/StaticCall.php
    class StaticCall extends CallLike {
    * @param Node\Name|Expr $class Class name
    public function __construct(Node $class, $name, array $args = [], array $attributes = []) {
    $this->class = $class;
    public function getSubNodeNames(): array {
    public function getType(): string {
    public function getRawArgs(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/StaticPropertyFetch.php
    class StaticPropertyFetch extends Expr {
    * @param Name|Expr $class Class name
    public function __construct(Node $class, $name, array $attributes = []) {
    $this->class = $class;
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Ternary.php
    class Ternary extends Expr {
    public function __construct(Expr $cond, ?Expr $if, Expr $else, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Throw_.php
    class Throw_ extends Node\Expr {
    public function __construct(Node\Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/UnaryMinus.php
    class UnaryMinus extends Expr {
    public function __construct(Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/UnaryPlus.php
    class UnaryPlus extends Expr {
    public function __construct(Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Variable.php
    class Variable extends Expr {
    public function __construct($name, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/YieldFrom.php
    class YieldFrom extends Expr {
    public function __construct(Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Yield_.php
    class Yield_ extends Expr {
    public function __construct(?Expr $value = null, ?Expr $key = null, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Expr.php
    abstract class Expr extends NodeAbstract {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/FunctionLike.php
    public function returnsByRef(): bool;
    public function getParams(): array;
    public function getReturnType();
    * The function body
    public function getStmts(): ?array;
    public function getAttrGroups(): array;
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Identifier.php
    class Identifier extends NodeAbstract {
    public function __construct(string $name, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function toString(): string {
    public function toLowerString(): string {
    * Checks whether the identifier is a special class name (self, parent or static).
    * @return bool Whether identifier is a special class name
    public function isSpecialClassName(): bool {
    public function __toString(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/InterpolatedStringPart.php
    class InterpolatedStringPart extends NodeAbstract {
    public function __construct(string $value, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/IntersectionType.php
    class IntersectionType extends ComplexType {
    public function __construct(array $types, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/MatchArm.php
    class MatchArm extends NodeAbstract {
    public function __construct(?array $conds, Node\Expr $body, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Name/FullyQualified.php
    class FullyQualified extends \PhpParser\Node\Name {
    public function isUnqualified(): bool {
    public function isQualified(): bool {
    public function isFullyQualified(): bool {
    public function isRelative(): bool {
    public function toCodeString(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Name/Relative.php
    class Relative extends \PhpParser\Node\Name {
    public function isUnqualified(): bool {
    public function isQualified(): bool {
    public function isFullyQualified(): bool {
    public function isRelative(): bool {
    public function toCodeString(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Name.php
    class Name extends NodeAbstract {
    final public function __construct($name, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getParts(): array {
    public function getFirst(): string {
    public function getLast(): string {
    public function isUnqualified(): bool {
    public function isQualified(): bool {
    public function isFullyQualified(): bool {
    public function isRelative(): bool {
    public function toString(): string {
    public function toCodeString(): string {
    public function toLowerString(): string {
    * Checks whether the identifier is a special class name (self, parent or static).
    * @return bool Whether identifier is a special class name
    public function isSpecialClassName(): bool {
    public function __toString(): string {
    public function slice(int $offset, ?int $length = null) {
    * The type of the generated instance depends on which class this method is called on, for
    public static function concat($name1, $name2, array $attributes = []) {
    private static function prepareName($name): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/NullableType.php
    class NullableType extends ComplexType {
    public function __construct(Node $type, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Param.php
    class Param extends NodeAbstract {
    public function __construct(
    public function getSubNodeNames(): array {
    public function getType(): string {
    public function isPromoted(): bool {
    public function isPublic(): bool {
    public function isProtected(): bool {
    public function isPrivate(): bool {
    public function isReadonly(): bool {
    public function isPublicSet(): bool {
    public function isProtectedSet(): bool {
    public function isPrivateSet(): bool {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/PropertyHook.php
    class PropertyHook extends NodeAbstract implements FunctionLike {
    public function __construct($name, $body, array $subNodes = [], array $attributes = []) {
    public function returnsByRef(): bool {
    public function getParams(): array {
    public function getReturnType() {
    public function isFinal(): bool {
    public function getStmts(): ?array {
    public function getAttrGroups(): array {
    public function getType(): string {
    public function getSubNodeNames(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/PropertyItem.php
    class PropertyItem extends NodeAbstract {
    * Constructs a class property item node.
    public function __construct($name, ?Node\Expr $default = null, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/DNumber.php
    class DNumber extends Float_ {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/Encapsed.php
    class Encapsed extends InterpolatedString {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/EncapsedStringPart.php
    class EncapsedStringPart extends InterpolatedStringPart {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/Float_.php
    class Float_ extends Scalar {
    public function __construct(float $value, array $attributes = []) {
    public function getSubNodeNames(): array {
    public static function fromString(string $str, array $attributes = []): Float_ {
    public static function parse(string $str): float {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/InterpolatedString.php
    class InterpolatedString extends Scalar {
    public function __construct(array $parts, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/Int_.php
    class Int_ extends Scalar {
    public function __construct(int $value, array $attributes = []) {
    public function getSubNodeNames(): array {
    public static function fromString(string $str, array $attributes = [], bool $allowInvalidOctal = false): Int_ {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/LNumber.php
    class LNumber extends Int_ {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Class_.php
    class Class_ extends MagicConst {
    public function getName(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Dir.php
    class Dir extends MagicConst {
    public function getName(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/File.php
    class File extends MagicConst {
    public function getName(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Function_.php
    class Function_ extends MagicConst {
    public function getName(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Line.php
    class Line extends MagicConst {
    public function getName(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Method.php
    class Method extends MagicConst {
    public function getName(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Namespace_.php
    class Namespace_ extends MagicConst {
    public function getName(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Property.php
    class Property extends MagicConst {
    public function getName(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Trait_.php
    class Trait_ extends MagicConst {
    public function getName(): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst.php
    abstract class MagicConst extends Scalar {
    public function __construct(array $attributes = []) {
    public function getSubNodeNames(): array {
    abstract public function getName(): string;
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/String_.php
    class String_ extends Scalar {
    public function __construct(string $value, array $attributes = []) {
    public function getSubNodeNames(): array {
    public static function fromString(string $str, array $attributes = [], bool $parseUnicodeEscape = true): self {
    public static function parse(string $str, bool $parseUnicodeEscape = true): string {
    public static function parseEscapeSequences(string $str, ?string $quote, bool $parseUnicodeEscape = true): string {
    function ($matches) {
    private static function codePointToUtf8(int $num): string {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Scalar.php
    abstract class Scalar extends Expr {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/StaticVar.php
    class StaticVar extends NodeAbstract {
    public function __construct(
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Block.php
    class Block extends Stmt {
    public function __construct(array $stmts, array $attributes = []) {
    public function getType(): string {
    public function getSubNodeNames(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Break_.php
    class Break_ extends Node\Stmt {
    public function __construct(?Node\Expr $num = null, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Case_.php
    class Case_ extends Node\Stmt {
    public function __construct(?Node\Expr $cond, array $stmts = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Catch_.php
    class Catch_ extends Node\Stmt {
    public function __construct(
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassConst.php
    class ClassConst extends Node\Stmt {
    * Constructs a class const list node.
    public function __construct(
    public function getSubNodeNames(): array {
    public function isPublic(): bool {
    public function isProtected(): bool {
    public function isPrivate(): bool {
    public function isFinal(): bool {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassLike.php
    abstract class ClassLike extends Node\Stmt {
    public function getTraitUses(): array {
    public function getConstants(): array {
    public function getProperties(): array {
    public function getProperty(string $name): ?Property {
    public function getMethods(): array {
    public function getMethod(string $name): ?ClassMethod {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php
    class ClassMethod extends Node\Stmt implements FunctionLike {
    * Constructs a class method node.
    public function __construct($name, array $subNodes = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function returnsByRef(): bool {
    public function getParams(): array {
    public function getReturnType() {
    public function getStmts(): ?array {
    public function getAttrGroups(): array {
    public function isPublic(): bool {
    public function isProtected(): bool {
    public function isPrivate(): bool {
    public function isAbstract(): bool {
    public function isFinal(): bool {
    public function isStatic(): bool {
    public function isMagic(): bool {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php
    class Class_ extends ClassLike {
    /** @var null|Node\Name Name of extended class */
    * Constructs a class node.
    public function __construct($name, array $subNodes = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    * Whether the class is explicitly abstract.
    public function isAbstract(): bool {
    * Whether the class is final.
    public function isFinal(): bool {
    public function isReadonly(): bool {
    * Whether the class is anonymous.
    public function isAnonymous(): bool {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Const_.php
    class Const_ extends Node\Stmt {
    public function __construct(
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Continue_.php
    class Continue_ extends Node\Stmt {
    public function __construct(?Node\Expr $num = null, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/DeclareDeclare.php
    class DeclareDeclare extends DeclareItem {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Declare_.php
    class Declare_ extends Node\Stmt {
    public function __construct(array $declares, ?array $stmts = null, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Do_.php
    class Do_ extends Node\Stmt {
    public function __construct(Node\Expr $cond, array $stmts = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Echo_.php
    class Echo_ extends Node\Stmt {
    public function __construct(array $exprs, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ElseIf_.php
    class ElseIf_ extends Node\Stmt {
    public function __construct(Node\Expr $cond, array $stmts = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Else_.php
    class Else_ extends Node\Stmt {
    public function __construct(array $stmts = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/EnumCase.php
    class EnumCase extends Node\Stmt {
    public function __construct($name, ?Node\Expr $expr = null, array $attrGroups = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Enum_.php
    class Enum_ extends ClassLike {
    public function __construct($name, array $subNodes = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Expression.php
    class Expression extends Node\Stmt {
    public function __construct(Node\Expr $expr, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Finally_.php
    class Finally_ extends Node\Stmt {
    public function __construct(array $stmts = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Foreach_.php
    class Foreach_ extends Node\Stmt {
    public function __construct(Node\Expr $expr, Node\Expr $valueVar, array $subNodes = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/For_.php
    class For_ extends Node\Stmt {
    public function __construct(array $subNodes = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Function_.php
    class Function_ extends Node\Stmt implements FunctionLike {
    /** @var bool Whether function returns by reference */
    * Constructs a function node.
    public function __construct($name, array $subNodes = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function returnsByRef(): bool {
    public function getParams(): array {
    public function getReturnType() {
    public function getAttrGroups(): array {
    public function getStmts(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Global_.php
    class Global_ extends Node\Stmt {
    public function __construct(array $vars, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Goto_.php
    class Goto_ extends Stmt {
    public function __construct($name, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/GroupUse.php
    class GroupUse extends Stmt {
    public function __construct(Name $prefix, array $uses, int $type = Use_::TYPE_NORMAL, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/HaltCompiler.php
    class HaltCompiler extends Stmt {
    public function __construct(string $remaining, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/If_.php
    class If_ extends Node\Stmt {
    public function __construct(Node\Expr $cond, array $subNodes = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/InlineHTML.php
    class InlineHTML extends Stmt {
    public function __construct(string $value, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Interface_.php
    class Interface_ extends ClassLike {
    * Constructs a class node.
    public function __construct($name, array $subNodes = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Label.php
    class Label extends Stmt {
    public function __construct($name, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Namespace_.php
    class Namespace_ extends Node\Stmt {
    public function __construct(?Node\Name $name = null, ?array $stmts = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Nop.php
    class Nop extends Node\Stmt {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Property.php
    class Property extends Node\Stmt {
    * Constructs a class property list node.
    public function __construct(int $flags, array $props, array $attributes = [], ?Node $type = null, array $attrGroups = [], array $hooks = []) {
    public function getSubNodeNames(): array {
    public function isPublic(): bool {
    public function isProtected(): bool {
    public function isPrivate(): bool {
    public function isStatic(): bool {
    public function isReadonly(): bool {
    public function isAbstract(): bool {
    public function isFinal(): bool {
    public function isPublicSet(): bool {
    public function isProtectedSet(): bool {
    public function isPrivateSet(): bool {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/PropertyProperty.php
    class PropertyProperty extends PropertyItem {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Return_.php
    class Return_ extends Node\Stmt {
    public function __construct(?Node\Expr $expr = null, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/StaticVar.php
    class StaticVar extends \PhpParser\Node\StaticVar {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Static_.php
    class Static_ extends Stmt {
    public function __construct(array $vars, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Switch_.php
    class Switch_ extends Node\Stmt {
    public function __construct(Node\Expr $cond, array $cases, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUse.php
    class TraitUse extends Node\Stmt {
    public function __construct(array $traits, array $adaptations = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation/Alias.php
    class Alias extends Node\Stmt\TraitUseAdaptation {
    public function __construct(?Node\Name $trait, $method, ?int $newModifier, $newName, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation/Precedence.php
    class Precedence extends Node\Stmt\TraitUseAdaptation {
    public function __construct(Node\Name $trait, $method, array $insteadof, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation.php
    abstract class TraitUseAdaptation extends Node\Stmt {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Trait_.php
    class Trait_ extends ClassLike {
    public function __construct($name, array $subNodes = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TryCatch.php
    class TryCatch extends Node\Stmt {
    public function __construct(array $stmts, array $catches, ?Finally_ $finally = null, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Unset_.php
    class Unset_ extends Node\Stmt {
    public function __construct(array $vars, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/UseUse.php
    class UseUse extends UseItem {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Use_.php
    class Use_ extends Stmt {
    public function __construct(array $uses, int $type = self::TYPE_NORMAL, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/While_.php
    class While_ extends Node\Stmt {
    public function __construct(Node\Expr $cond, array $stmts = [], array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/Stmt.php
    abstract class Stmt extends NodeAbstract {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/UnionType.php
    class UnionType extends ComplexType {
    public function __construct(array $types, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/UseItem.php
    class UseItem extends NodeAbstract {
    /** @var Node\Name Namespace, class, function or constant to alias */
    public function __construct(Node\Name $name, $alias = null, int $type = Use_::TYPE_UNKNOWN, array $attributes = []) {
    public function getSubNodeNames(): array {
    public function getAlias(): Identifier {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/VariadicPlaceholder.php
    * Represents the "..." in "foo(...)" of the first-class callable syntax.
    class VariadicPlaceholder extends NodeAbstract {
    * Create a variadic argument placeholder (first-class callable syntax).
    public function __construct(array $attributes = []) {
    public function getType(): string {
    public function getSubNodeNames(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node/VarLikeIdentifier.php
    class VarLikeIdentifier extends Identifier {
    public function getType(): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Node.php
    public function getType(): string;
    public function getSubNodeNames(): array;
    public function getLine(): int;
    public function getStartLine(): int;
    public function getEndLine(): int;
    public function getStartTokenPos(): int;
    public function getEndTokenPos(): int;
    public function getStartFilePos(): int;
    public function getEndFilePos(): int;
    public function getComments(): array;
    public function getDocComment(): ?Comment\Doc;
    public function setDocComment(Comment\Doc $docComment): void;
    public function setAttribute(string $key, $value): void;
    public function hasAttribute(string $key): bool;
    public function getAttribute(string $key, $default = null);
    public function getAttributes(): array;
    public function setAttributes(array $attributes): void;
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php
    abstract class NodeAbstract implements Node, \JsonSerializable {
    public function __construct(array $attributes = []) {
    public function getLine(): int {
    public function getStartLine(): int {
    public function getEndLine(): int {
    public function getStartTokenPos(): int {
    public function getEndTokenPos(): int {
    public function getStartFilePos(): int {
    public function getEndFilePos(): int {
    public function getComments(): array {
    public function getDocComment(): ?Comment\Doc {
    public function setDocComment(Comment\Doc $docComment): void {
    public function setAttribute(string $key, $value): void {
    public function hasAttribute(string $key): bool {
    public function getAttribute(string $key, $default = null) {
    public function getAttributes(): array {
    public function setAttributes(array $attributes): void {
    public function jsonSerialize(): array {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php
    class NodeDumper {
    public function __construct(array $options = []) {
    public function dump($node, ?string $code = null): string {
    protected function dumpRecursive($node, bool $indent = true): void {
    protected function dumpFlags(int $flags): string {
    private function dumpEnum(int $value, array $map): string {
    private function dumpIncludeType(int $type): string {
    private function dumpUseType(int $type): string {
    private function dumpIntKind(int $kind): string {
    private function dumpStringKind(int $kind): string {
    private function dumpArrayKind(int $kind): string {
    private function dumpListKind(int $kind): string {
    protected function dumpPosition(Node $node): ?string {
    private function toColumn(string $code, int $pos): int {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeFinder.php
    class NodeFinder {
    public function find($nodes, callable $filter): array {
    * @param class-string<TNode> $class Class name
    public function findInstanceOf($nodes, string $class): array {
    return $this->find($nodes, function ($node) use ($class) {
    public function findFirst($nodes, callable $filter): ?Node {
    * @param class-string<TNode> $class Class name
    * @return null|TNode Found node, which is an instance of $class (or null if none found)
    public function findFirstInstanceOf($nodes, string $class): ?Node {
    return $this->findFirst($nodes, function ($node) use ($class) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php
    class NodeTraverser implements NodeTraverserInterface {
    public function __construct(NodeVisitor ...$visitors) {
    public function addVisitor(NodeVisitor $visitor): void {
    public function removeVisitor(NodeVisitor $visitor): void {
    public function traverse(array $nodes): array {
    protected function traverseNode(Node $node): void {
    protected function traverseArray(array $nodes): array {
    private function ensureReplacementReasonable(Node $old, Node $new): void {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeTraverserInterface.php
    public function addVisitor(NodeVisitor $visitor): void;
    public function removeVisitor(NodeVisitor $visitor): void;
    public function traverse(array $nodes): array;
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/CloningVisitor.php
    class CloningVisitor extends NodeVisitorAbstract {
    public function enterNode(Node $origNode) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/CommentAnnotatingVisitor.php
    class CommentAnnotatingVisitor extends NodeVisitorAbstract {
    public function __construct(array $tokens) {
    public function enterNode(Node $node) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/FindingVisitor.php
    class FindingVisitor extends NodeVisitorAbstract {
    public function __construct(callable $filterCallback) {
    public function getFoundNodes(): array {
    public function beforeTraverse(array $nodes): ?array {
    public function enterNode(Node $node) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/FirstFindingVisitor.php
    class FirstFindingVisitor extends NodeVisitorAbstract {
    public function __construct(callable $filterCallback) {
    public function getFoundNode(): ?Node {
    public function beforeTraverse(array $nodes): ?array {
    public function enterNode(Node $node) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php
    class NameResolver extends NodeVisitorAbstract {
    public function __construct(?ErrorHandler $errorHandler = null, array $options = []) {
    public function getNameContext(): NameContext {
    public function beforeTraverse(array $nodes): ?array {
    public function enterNode(Node $node) {
    if ($node->class instanceof Name) {
    $node->class = $this->resolveClassName($node->class);
    private function addAlias(Node\UseItem $use, int $type, ?Name $prefix = null): void {
    private function resolveSignature($node): void {
    private function resolveType(?Node $node): ?Node {
    protected function resolveName(Name $name, int $type): Name {
    protected function resolveClassName(Name $name): Name {
    protected function addNamespacedName(Node $node): void {
    protected function resolveAttrGroups(Node $node): void {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NodeConnectingVisitor.php
    final class NodeConnectingVisitor extends NodeVisitorAbstract {
    public function __construct(bool $weakReferences = false) {
    public function beforeTraverse(array $nodes) {
    public function enterNode(Node $node) {
    public function leaveNode(Node $node) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/ParentConnectingVisitor.php
    use function array_pop;
    use function count;
    final class ParentConnectingVisitor extends NodeVisitorAbstract {
    public function __construct(bool $weakReferences = false) {
    public function beforeTraverse(array $nodes) {
    public function enterNode(Node $node) {
    public function leaveNode(Node $node) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeVisitor.php
    public function beforeTraverse(array $nodes);
    public function enterNode(Node $node);
    public function leaveNode(Node $node);
    public function afterTraverse(array $nodes);
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/NodeVisitorAbstract.php
    abstract class NodeVisitorAbstract implements NodeVisitor {
    public function beforeTraverse(array $nodes) {
    public function enterNode(Node $node) {
    public function leaveNode(Node $node) {
    public function afterTraverse(array $nodes) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Parser/Php7.php
    class Php7 extends \PhpParser\ParserAbstract
    protected function initReduceCallbacks(): void {
    1 => static function ($self, $stackPos) {
    2 => static function ($self, $stackPos) {
    3 => static function ($self, $stackPos) {
    4 => static function ($self, $stackPos) {
    76 => static function ($self, $stackPos) {
    85 => static function ($self, $stackPos) {
    86 => static function ($self, $stackPos) {
    87 => static function ($self, $stackPos) {
    88 => static function ($self, $stackPos) {
    89 => static function ($self, $stackPos) {
    90 => static function ($self, $stackPos) {
    91 => static function ($self, $stackPos) {
    92 => static function ($self, $stackPos) {
    93 => static function ($self, $stackPos) {
    95 => static function ($self, $stackPos) {
    96 => static function ($self, $stackPos) {
    97 => static function ($self, $stackPos) {
    98 => static function ($self, $stackPos) {
    99 => static function ($self, $stackPos) {
    100 => static function ($self, $stackPos) {
    103 => static function ($self, $stackPos) {
    104 => static function ($self, $stackPos) {
    105 => static function ($self, $stackPos) {
    106 => static function ($self, $stackPos) {
    107 => static function ($self, $stackPos) {
    108 => static function ($self, $stackPos) {
    109 => static function ($self, $stackPos) {
    110 => static function ($self, $stackPos) {
    115 => static function ($self, $stackPos) {
    116 => static function ($self, $stackPos) {
    117 => static function ($self, $stackPos) {
    118 => static function ($self, $stackPos) {
    119 => static function ($self, $stackPos) {
    120 => static function ($self, $stackPos) {
    122 => static function ($self, $stackPos) {
    123 => static function ($self, $stackPos) {
    124 => static function ($self, $stackPos) {
    125 => static function ($self, $stackPos) {
    126 => static function ($self, $stackPos) {
    127 => static function ($self, $stackPos) {
    129 => static function ($self, $stackPos) {
    130 => static function ($self, $stackPos) {
    132 => static function ($self, $stackPos) {
    133 => static function ($self, $stackPos) {
    135 => static function ($self, $stackPos) {
    136 => static function ($self, $stackPos) {
    137 => static function ($self, $stackPos) {
    138 => static function ($self, $stackPos) {
    139 => static function ($self, $stackPos) {
    140 => static function ($self, $stackPos) {
    141 => static function ($self, $stackPos) {
    142 => static function ($self, $stackPos) {
    144 => static function ($self, $stackPos) {
    145 => static function ($self, $stackPos) {
    146 => static function ($self, $stackPos) {
    148 => static function ($self, $stackPos) {
    149 => static function ($self, $stackPos) {
    150 => static function ($self, $stackPos) {
    151 => static function ($self, $stackPos) {
    152 => static function ($self, $stackPos) {
    153 => static function ($self, $stackPos) {
    154 => static function ($self, $stackPos) {
    158 => static function ($self, $stackPos) {
    159 => static function ($self, $stackPos) {
    160 => static function ($self, $stackPos) {
    161 => static function ($self, $stackPos) {
    162 => static function ($self, $stackPos) {
    163 => static function ($self, $stackPos) {
    164 => static function ($self, $stackPos) {
    165 => static function ($self, $stackPos) {
    166 => static function ($self, $stackPos) {
    167 => static function ($self, $stackPos) {
    168 => static function ($self, $stackPos) {
    169 => static function ($self, $stackPos) {
    170 => static function ($self, $stackPos) {
    171 => static function ($self, $stackPos) {
    172 => static function ($self, $stackPos) {
    173 => static function ($self, $stackPos) {
    174 => static function ($self, $stackPos) {
    175 => static function ($self, $stackPos) {
    176 => static function ($self, $stackPos) {
    177 => static function ($self, $stackPos) {
    178 => static function ($self, $stackPos) {
    179 => static function ($self, $stackPos) {
    180 => static function ($self, $stackPos) {
    181 => static function ($self, $stackPos) {
    182 => static function ($self, $stackPos) {
    184 => static function ($self, $stackPos) {
    185 => static function ($self, $stackPos) {
    186 => static function ($self, $stackPos) {
    187 => static function ($self, $stackPos) {
    188 => static function ($self, $stackPos) {
    189 => static function ($self, $stackPos) {
    190 => static function ($self, $stackPos) {
    191 => static function ($self, $stackPos) {
    192 => static function ($self, $stackPos) {
    194 => static function ($self, $stackPos) {
    195 => static function ($self, $stackPos) {
    196 => static function ($self, $stackPos) {
    197 => static function ($self, $stackPos) {
    198 => static function ($self, $stackPos) {
    199 => static function ($self, $stackPos) {
    200 => static function ($self, $stackPos) {
    201 => static function ($self, $stackPos) {
    202 => static function ($self, $stackPos) {
    203 => static function ($self, $stackPos) {
    205 => static function ($self, $stackPos) {
    206 => static function ($self, $stackPos) {
    207 => static function ($self, $stackPos) {
    208 => static function ($self, $stackPos) {
    209 => static function ($self, $stackPos) {
    210 => static function ($self, $stackPos) {
    211 => static function ($self, $stackPos) {
    212 => static function ($self, $stackPos) {
    213 => static function ($self, $stackPos) {
    214 => static function ($self, $stackPos) {
    215 => static function ($self, $stackPos) {
    216 => static function ($self, $stackPos) {
    217 => static function ($self, $stackPos) {
    218 => static function ($self, $stackPos) {
    221 => static function ($self, $stackPos) {
    222 => static function ($self, $stackPos) {
    223 => static function ($self, $stackPos) {
    224 => static function ($self, $stackPos) {
    225 => static function ($self, $stackPos) {
    226 => static function ($self, $stackPos) {
    227 => static function ($self, $stackPos) {
    228 => static function ($self, $stackPos) {
    229 => static function ($self, $stackPos) {
    230 => static function ($self, $stackPos) {
    232 => static function ($self, $stackPos) {
    233 => static function ($self, $stackPos) {
    235 => static function ($self, $stackPos) {
    237 => static function ($self, $stackPos) {
    238 => static function ($self, $stackPos) {
    239 => static function ($self, $stackPos) {
    240 => static function ($self, $stackPos) {
    242 => static function ($self, $stackPos) {
    243 => static function ($self, $stackPos) {
    244 => static function ($self, $stackPos) {
    245 => static function ($self, $stackPos) {
    246 => static function ($self, $stackPos) {
    247 => static function ($self, $stackPos) {
    248 => static function ($self, $stackPos) {
    249 => static function ($self, $stackPos) {
    250 => static function ($self, $stackPos) {
    251 => static function ($self, $stackPos) {
    252 => static function ($self, $stackPos) {
    255 => static function ($self, $stackPos) {
    256 => static function ($self, $stackPos) {
    258 => static function ($self, $stackPos) {
    259 => static function ($self, $stackPos) {
    260 => static function ($self, $stackPos) {
    261 => static function ($self, $stackPos) {
    262 => static function ($self, $stackPos) {
    263 => static function ($self, $stackPos) {
    264 => static function ($self, $stackPos) {
    265 => static function ($self, $stackPos) {
    266 => static function ($self, $stackPos) {
    267 => static function ($self, $stackPos) {
    268 => static function ($self, $stackPos) {
    269 => static function ($self, $stackPos) {
    270 => static function ($self, $stackPos) {
    271 => static function ($self, $stackPos) {
    272 => static function ($self, $stackPos) {
    273 => static function ($self, $stackPos) {
    274 => static function ($self, $stackPos) {
    275 => static function ($self, $stackPos) {
    276 => static function ($self, $stackPos) {
    277 => static function ($self, $stackPos) {
    279 => static function ($self, $stackPos) {
    280 => static function ($self, $stackPos) {
    281 => static function ($self, $stackPos) {
    282 => static function ($self, $stackPos) {
    283 => static function ($self, $stackPos) {
    284 => static function ($self, $stackPos) {
    285 => static function ($self, $stackPos) {
    286 => static function ($self, $stackPos) {
    287 => static function ($self, $stackPos) {
    288 => static function ($self, $stackPos) {
    289 => static function ($self, $stackPos) {
    290 => static function ($self, $stackPos) {
    291 => static function ($self, $stackPos) {
    292 => static function ($self, $stackPos) {
    293 => static function ($self, $stackPos) {
    295 => static function ($self, $stackPos) {
    296 => static function ($self, $stackPos) {
    299 => static function ($self, $stackPos) {
    300 => static function ($self, $stackPos) {
    301 => static function ($self, $stackPos) {
    302 => static function ($self, $stackPos) {
    304 => static function ($self, $stackPos) {
    305 => static function ($self, $stackPos) {
    306 => static function ($self, $stackPos) {
    308 => static function ($self, $stackPos) {
    309 => static function ($self, $stackPos) {
    310 => static function ($self, $stackPos) {
    311 => static function ($self, $stackPos) {
    312 => static function ($self, $stackPos) {
    313 => static function ($self, $stackPos) {
    314 => static function ($self, $stackPos) {
    315 => static function ($self, $stackPos) {
    316 => static function ($self, $stackPos) {
    318 => static function ($self, $stackPos) {
    319 => static function ($self, $stackPos) {
    321 => static function ($self, $stackPos) {
    323 => static function ($self, $stackPos) {
    324 => static function ($self, $stackPos) {
    325 => static function ($self, $stackPos) {
    326 => static function ($self, $stackPos) {
    327 => static function ($self, $stackPos) {
    328 => static function ($self, $stackPos) {
    329 => static function ($self, $stackPos) {
    330 => static function ($self, $stackPos) {
    331 => static function ($self, $stackPos) {
    332 => static function ($self, $stackPos) {
    333 => static function ($self, $stackPos) {
    334 => static function ($self, $stackPos) {
    335 => static function ($self, $stackPos) {
    337 => static function ($self, $stackPos) {
    338 => static function ($self, $stackPos) {
    341 => static function ($self, $stackPos) {
    342 => static function ($self, $stackPos) {
    343 => static function ($self, $stackPos) {
    344 => static function ($self, $stackPos) {
    345 => static function ($self, $stackPos) {
    346 => static function ($self, $stackPos) {
    347 => static function ($self, $stackPos) {
    348 => static function ($self, $stackPos) {
    349 => static function ($self, $stackPos) {
    350 => static function ($self, $stackPos) {
    351 => static function ($self, $stackPos) {
    352 => static function ($self, $stackPos) {
    353 => static function ($self, $stackPos) {
    354 => static function ($self, $stackPos) {
    355 => static function ($self, $stackPos) {
    356 => static function ($self, $stackPos) {
    357 => static function ($self, $stackPos) {
    358 => static function ($self, $stackPos) {
    359 => static function ($self, $stackPos) {
    360 => static function ($self, $stackPos) {
    361 => static function ($self, $stackPos) {
    362 => static function ($self, $stackPos) {
    363 => static function ($self, $stackPos) {
    364 => static function ($self, $stackPos) {
    366 => static function ($self, $stackPos) {
    367 => static function ($self, $stackPos) {
    370 => static function ($self, $stackPos) {
    371 => static function ($self, $stackPos) {
    374 => static function ($self, $stackPos) {
    375 => static function ($self, $stackPos) {
    376 => static function ($self, $stackPos) {
    377 => static function ($self, $stackPos) {
    378 => static function ($self, $stackPos) {
    379 => static function ($self, $stackPos) {
    380 => static function ($self, $stackPos) {
    381 => static function ($self, $stackPos) {
    382 => static function ($self, $stackPos) {
    383 => static function ($self, $stackPos) {
    384 => static function ($self, $stackPos) {
    386 => static function ($self, $stackPos) {
    387 => static function ($self, $stackPos) {
    388 => static function ($self, $stackPos) {
    389 => static function ($self, $stackPos) {
    390 => static function ($self, $stackPos) {
    391 => static function ($self, $stackPos) {
    392 => static function ($self, $stackPos) {
    393 => static function ($self, $stackPos) {
    394 => static function ($self, $stackPos) {
    395 => static function ($self, $stackPos) {
    396 => static function ($self, $stackPos) {
    397 => static function ($self, $stackPos) {
    398 => static function ($self, $stackPos) {
    399 => static function ($self, $stackPos) {
    400 => static function ($self, $stackPos) {
    403 => static function ($self, $stackPos) {
    404 => static function ($self, $stackPos) {
    405 => static function ($self, $stackPos) {
    408 => static function ($self, $stackPos) {
    409 => static function ($self, $stackPos) {
    410 => static function ($self, $stackPos) {
    411 => static function ($self, $stackPos) {
    412 => static function ($self, $stackPos) {
    415 => static function ($self, $stackPos) {
    416 => static function ($self, $stackPos) {
    417 => static function ($self, $stackPos) {
    418 => static function ($self, $stackPos) {
    419 => static function ($self, $stackPos) {
    420 => static function ($self, $stackPos) {
    421 => static function ($self, $stackPos) {
    422 => static function ($self, $stackPos) {
    423 => static function ($self, $stackPos) {
    424 => static function ($self, $stackPos) {
    425 => static function ($self, $stackPos) {
    426 => static function ($self, $stackPos) {
    427 => static function ($self, $stackPos) {
    428 => static function ($self, $stackPos) {
    429 => static function ($self, $stackPos) {
    430 => static function ($self, $stackPos) {
    431 => static function ($self, $stackPos) {
    432 => static function ($self, $stackPos) {
    433 => static function ($self, $stackPos) {
    434 => static function ($self, $stackPos) {
    435 => static function ($self, $stackPos) {
    436 => static function ($self, $stackPos) {
    437 => static function ($self, $stackPos) {
    438 => static function ($self, $stackPos) {
    439 => static function ($self, $stackPos) {
    440 => static function ($self, $stackPos) {
    441 => static function ($self, $stackPos) {
    442 => static function ($self, $stackPos) {
    443 => static function ($self, $stackPos) {
    444 => static function ($self, $stackPos) {
    445 => static function ($self, $stackPos) {
    446 => static function ($self, $stackPos) {
    447 => static function ($self, $stackPos) {
    448 => static function ($self, $stackPos) {
    449 => static function ($self, $stackPos) {
    450 => static function ($self, $stackPos) {
    451 => static function ($self, $stackPos) {
    452 => static function ($self, $stackPos) {
    453 => static function ($self, $stackPos) {
    454 => static function ($self, $stackPos) {
    455 => static function ($self, $stackPos) {
    456 => static function ($self, $stackPos) {
    457 => static function ($self, $stackPos) {
    458 => static function ($self, $stackPos) {
    459 => static function ($self, $stackPos) {
    460 => static function ($self, $stackPos) {
    461 => static function ($self, $stackPos) {
    462 => static function ($self, $stackPos) {
    463 => static function ($self, $stackPos) {
    464 => static function ($self, $stackPos) {
    465 => static function ($self, $stackPos) {
    466 => static function ($self, $stackPos) {
    467 => static function ($self, $stackPos) {
    468 => static function ($self, $stackPos) {
    469 => static function ($self, $stackPos) {
    470 => static function ($self, $stackPos) {
    471 => static function ($self, $stackPos) {
    472 => static function ($self, $stackPos) {
    473 => static function ($self, $stackPos) {
    474 => static function ($self, $stackPos) {
    475 => static function ($self, $stackPos) {
    476 => static function ($self, $stackPos) {
    477 => static function ($self, $stackPos) {
    478 => static function ($self, $stackPos) {
    479 => static function ($self, $stackPos) {
    480 => static function ($self, $stackPos) {
    481 => static function ($self, $stackPos) {
    482 => static function ($self, $stackPos) {
    483 => static function ($self, $stackPos) {
    484 => static function ($self, $stackPos) {
    486 => static function ($self, $stackPos) {
    487 => static function ($self, $stackPos) {
    488 => static function ($self, $stackPos) {
    489 => static function ($self, $stackPos) {
    490 => static function ($self, $stackPos) {
    491 => static function ($self, $stackPos) {
    492 => static function ($self, $stackPos) {
    493 => static function ($self, $stackPos) {
    494 => static function ($self, $stackPos) {
    495 => static function ($self, $stackPos) {
    496 => static function ($self, $stackPos) {
    497 => static function ($self, $stackPos) {
    498 => static function ($self, $stackPos) {
    499 => static function ($self, $stackPos) {
    500 => static function ($self, $stackPos) {
    501 => static function ($self, $stackPos) {
    502 => static function ($self, $stackPos) {
    503 => static function ($self, $stackPos) {
    504 => static function ($self, $stackPos) {
    507 => static function ($self, $stackPos) {
    508 => static function ($self, $stackPos) {
    510 => static function ($self, $stackPos) {
    511 => static function ($self, $stackPos) {
    512 => static function ($self, $stackPos) {
    513 => static function ($self, $stackPos) {
    514 => static function ($self, $stackPos) {
    515 => static function ($self, $stackPos) {
    516 => static function ($self, $stackPos) {
    517 => static function ($self, $stackPos) {
    518 => static function ($self, $stackPos) {
    520 => static function ($self, $stackPos) {
    521 => static function ($self, $stackPos) {
    522 => static function ($self, $stackPos) {
    523 => static function ($self, $stackPos) {
    526 => static function ($self, $stackPos) {
    527 => static function ($self, $stackPos) {
    530 => static function ($self, $stackPos) {
    531 => static function ($self, $stackPos) {
    532 => static function ($self, $stackPos) {
    533 => static function ($self, $stackPos) {
    535 => static function ($self, $stackPos) {
    536 => static function ($self, $stackPos) {
    537 => static function ($self, $stackPos) {
    538 => static function ($self, $stackPos) {
    539 => static function ($self, $stackPos) {
    540 => static function ($self, $stackPos) {
    541 => static function ($self, $stackPos) {
    542 => static function ($self, $stackPos) {
    543 => static function ($self, $stackPos) {
    544 => static function ($self, $stackPos) {
    545 => static function ($self, $stackPos) {
    546 => static function ($self, $stackPos) {
    547 => static function ($self, $stackPos) {
    548 => static function ($self, $stackPos) {
    549 => static function ($self, $stackPos) {
    550 => static function ($self, $stackPos) {
    551 => static function ($self, $stackPos) {
    552 => static function ($self, $stackPos) {
    553 => static function ($self, $stackPos) {
    554 => static function ($self, $stackPos) {
    558 => static function ($self, $stackPos) {
    559 => static function ($self, $stackPos) {
    560 => static function ($self, $stackPos) {
    561 => static function ($self, $stackPos) {
    564 => static function ($self, $stackPos) {
    571 => static function ($self, $stackPos) {
    575 => static function ($self, $stackPos) {
    576 => static function ($self, $stackPos) {
    578 => static function ($self, $stackPos) {
    579 => static function ($self, $stackPos) {
    580 => static function ($self, $stackPos) {
    584 => static function ($self, $stackPos) {
    585 => static function ($self, $stackPos) {
    587 => static function ($self, $stackPos) {
    588 => static function ($self, $stackPos) {
    589 => static function ($self, $stackPos) {
    590 => static function ($self, $stackPos) {
    591 => static function ($self, $stackPos) {
    593 => static function ($self, $stackPos) {
    594 => static function ($self, $stackPos) {
    595 => static function ($self, $stackPos) {
    596 => static function ($self, $stackPos) {
    597 => static function ($self, $stackPos) {
    598 => static function ($self, $stackPos) {
    600 => static function ($self, $stackPos) {
    603 => static function ($self, $stackPos) {
    605 => static function ($self, $stackPos) {
    606 => static function ($self, $stackPos) {
    607 => static function ($self, $stackPos) {
    609 => static function ($self, $stackPos) {
    610 => static function ($self, $stackPos) {
    611 => static function ($self, $stackPos) {
    612 => static function ($self, $stackPos) {
    613 => static function ($self, $stackPos) {
    614 => static function ($self, $stackPos) {
    615 => static function ($self, $stackPos) {
    616 => static function ($self, $stackPos) {
    617 => static function ($self, $stackPos) {
    618 => static function ($self, $stackPos) {
    619 => static function ($self, $stackPos) {
    620 => static function ($self, $stackPos) {
    621 => static function ($self, $stackPos) {
    622 => static function ($self, $stackPos) {
    623 => static function ($self, $stackPos) {
    624 => static function ($self, $stackPos) {
    625 => static function ($self, $stackPos) {
    627 => static function ($self, $stackPos) {
    628 => static function ($self, $stackPos) {
    629 => static function ($self, $stackPos) {
    630 => static function ($self, $stackPos) {
    631 => static function ($self, $stackPos) {
    632 => static function ($self, $stackPos) {
    633 => static function ($self, $stackPos) {
    634 => static function ($self, $stackPos) {
    635 => static function ($self, $stackPos) {
    636 => static function ($self, $stackPos) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Parser/Php8.php
    class Php8 extends \PhpParser\ParserAbstract
    protected function initReduceCallbacks(): void {
    1 => static function ($self, $stackPos) {
    2 => static function ($self, $stackPos) {
    3 => static function ($self, $stackPos) {
    4 => static function ($self, $stackPos) {
    76 => static function ($self, $stackPos) {
    85 => static function ($self, $stackPos) {
    86 => static function ($self, $stackPos) {
    87 => static function ($self, $stackPos) {
    88 => static function ($self, $stackPos) {
    89 => static function ($self, $stackPos) {
    90 => static function ($self, $stackPos) {
    91 => static function ($self, $stackPos) {
    92 => static function ($self, $stackPos) {
    93 => static function ($self, $stackPos) {
    95 => static function ($self, $stackPos) {
    96 => static function ($self, $stackPos) {
    97 => static function ($self, $stackPos) {
    98 => static function ($self, $stackPos) {
    99 => static function ($self, $stackPos) {
    100 => static function ($self, $stackPos) {
    103 => static function ($self, $stackPos) {
    104 => static function ($self, $stackPos) {
    105 => static function ($self, $stackPos) {
    106 => static function ($self, $stackPos) {
    107 => static function ($self, $stackPos) {
    108 => static function ($self, $stackPos) {
    109 => static function ($self, $stackPos) {
    110 => static function ($self, $stackPos) {
    115 => static function ($self, $stackPos) {
    116 => static function ($self, $stackPos) {
    117 => static function ($self, $stackPos) {
    118 => static function ($self, $stackPos) {
    119 => static function ($self, $stackPos) {
    120 => static function ($self, $stackPos) {
    122 => static function ($self, $stackPos) {
    123 => static function ($self, $stackPos) {
    124 => static function ($self, $stackPos) {
    125 => static function ($self, $stackPos) {
    126 => static function ($self, $stackPos) {
    127 => static function ($self, $stackPos) {
    129 => static function ($self, $stackPos) {
    130 => static function ($self, $stackPos) {
    132 => static function ($self, $stackPos) {
    133 => static function ($self, $stackPos) {
    135 => static function ($self, $stackPos) {
    136 => static function ($self, $stackPos) {
    137 => static function ($self, $stackPos) {
    138 => static function ($self, $stackPos) {
    139 => static function ($self, $stackPos) {
    140 => static function ($self, $stackPos) {
    141 => static function ($self, $stackPos) {
    142 => static function ($self, $stackPos) {
    144 => static function ($self, $stackPos) {
    145 => static function ($self, $stackPos) {
    146 => static function ($self, $stackPos) {
    148 => static function ($self, $stackPos) {
    149 => static function ($self, $stackPos) {
    150 => static function ($self, $stackPos) {
    151 => static function ($self, $stackPos) {
    152 => static function ($self, $stackPos) {
    153 => static function ($self, $stackPos) {
    154 => static function ($self, $stackPos) {
    158 => static function ($self, $stackPos) {
    159 => static function ($self, $stackPos) {
    160 => static function ($self, $stackPos) {
    161 => static function ($self, $stackPos) {
    162 => static function ($self, $stackPos) {
    163 => static function ($self, $stackPos) {
    164 => static function ($self, $stackPos) {
    165 => static function ($self, $stackPos) {
    166 => static function ($self, $stackPos) {
    167 => static function ($self, $stackPos) {
    168 => static function ($self, $stackPos) {
    169 => static function ($self, $stackPos) {
    170 => static function ($self, $stackPos) {
    171 => static function ($self, $stackPos) {
    172 => static function ($self, $stackPos) {
    173 => static function ($self, $stackPos) {
    174 => static function ($self, $stackPos) {
    175 => static function ($self, $stackPos) {
    176 => static function ($self, $stackPos) {
    177 => static function ($self, $stackPos) {
    178 => static function ($self, $stackPos) {
    179 => static function ($self, $stackPos) {
    180 => static function ($self, $stackPos) {
    181 => static function ($self, $stackPos) {
    182 => static function ($self, $stackPos) {
    184 => static function ($self, $stackPos) {
    185 => static function ($self, $stackPos) {
    186 => static function ($self, $stackPos) {
    187 => static function ($self, $stackPos) {
    188 => static function ($self, $stackPos) {
    189 => static function ($self, $stackPos) {
    190 => static function ($self, $stackPos) {
    191 => static function ($self, $stackPos) {
    192 => static function ($self, $stackPos) {
    194 => static function ($self, $stackPos) {
    195 => static function ($self, $stackPos) {
    196 => static function ($self, $stackPos) {
    197 => static function ($self, $stackPos) {
    198 => static function ($self, $stackPos) {
    199 => static function ($self, $stackPos) {
    200 => static function ($self, $stackPos) {
    201 => static function ($self, $stackPos) {
    202 => static function ($self, $stackPos) {
    203 => static function ($self, $stackPos) {
    205 => static function ($self, $stackPos) {
    206 => static function ($self, $stackPos) {
    207 => static function ($self, $stackPos) {
    208 => static function ($self, $stackPos) {
    209 => static function ($self, $stackPos) {
    210 => static function ($self, $stackPos) {
    211 => static function ($self, $stackPos) {
    212 => static function ($self, $stackPos) {
    213 => static function ($self, $stackPos) {
    214 => static function ($self, $stackPos) {
    215 => static function ($self, $stackPos) {
    216 => static function ($self, $stackPos) {
    217 => static function ($self, $stackPos) {
    218 => static function ($self, $stackPos) {
    221 => static function ($self, $stackPos) {
    222 => static function ($self, $stackPos) {
    223 => static function ($self, $stackPos) {
    224 => static function ($self, $stackPos) {
    225 => static function ($self, $stackPos) {
    226 => static function ($self, $stackPos) {
    227 => static function ($self, $stackPos) {
    228 => static function ($self, $stackPos) {
    229 => static function ($self, $stackPos) {
    230 => static function ($self, $stackPos) {
    232 => static function ($self, $stackPos) {
    233 => static function ($self, $stackPos) {
    235 => static function ($self, $stackPos) {
    237 => static function ($self, $stackPos) {
    238 => static function ($self, $stackPos) {
    239 => static function ($self, $stackPos) {
    240 => static function ($self, $stackPos) {
    242 => static function ($self, $stackPos) {
    243 => static function ($self, $stackPos) {
    244 => static function ($self, $stackPos) {
    245 => static function ($self, $stackPos) {
    246 => static function ($self, $stackPos) {
    247 => static function ($self, $stackPos) {
    248 => static function ($self, $stackPos) {
    249 => static function ($self, $stackPos) {
    250 => static function ($self, $stackPos) {
    251 => static function ($self, $stackPos) {
    252 => static function ($self, $stackPos) {
    255 => static function ($self, $stackPos) {
    256 => static function ($self, $stackPos) {
    258 => static function ($self, $stackPos) {
    259 => static function ($self, $stackPos) {
    260 => static function ($self, $stackPos) {
    261 => static function ($self, $stackPos) {
    262 => static function ($self, $stackPos) {
    263 => static function ($self, $stackPos) {
    264 => static function ($self, $stackPos) {
    265 => static function ($self, $stackPos) {
    266 => static function ($self, $stackPos) {
    267 => static function ($self, $stackPos) {
    268 => static function ($self, $stackPos) {
    269 => static function ($self, $stackPos) {
    270 => static function ($self, $stackPos) {
    271 => static function ($self, $stackPos) {
    272 => static function ($self, $stackPos) {
    273 => static function ($self, $stackPos) {
    274 => static function ($self, $stackPos) {
    275 => static function ($self, $stackPos) {
    276 => static function ($self, $stackPos) {
    277 => static function ($self, $stackPos) {
    279 => static function ($self, $stackPos) {
    280 => static function ($self, $stackPos) {
    281 => static function ($self, $stackPos) {
    282 => static function ($self, $stackPos) {
    283 => static function ($self, $stackPos) {
    284 => static function ($self, $stackPos) {
    285 => static function ($self, $stackPos) {
    286 => static function ($self, $stackPos) {
    287 => static function ($self, $stackPos) {
    288 => static function ($self, $stackPos) {
    289 => static function ($self, $stackPos) {
    290 => static function ($self, $stackPos) {
    291 => static function ($self, $stackPos) {
    292 => static function ($self, $stackPos) {
    293 => static function ($self, $stackPos) {
    295 => static function ($self, $stackPos) {
    296 => static function ($self, $stackPos) {
    299 => static function ($self, $stackPos) {
    300 => static function ($self, $stackPos) {
    301 => static function ($self, $stackPos) {
    302 => static function ($self, $stackPos) {
    304 => static function ($self, $stackPos) {
    305 => static function ($self, $stackPos) {
    306 => static function ($self, $stackPos) {
    308 => static function ($self, $stackPos) {
    309 => static function ($self, $stackPos) {
    310 => static function ($self, $stackPos) {
    311 => static function ($self, $stackPos) {
    312 => static function ($self, $stackPos) {
    313 => static function ($self, $stackPos) {
    314 => static function ($self, $stackPos) {
    315 => static function ($self, $stackPos) {
    316 => static function ($self, $stackPos) {
    318 => static function ($self, $stackPos) {
    319 => static function ($self, $stackPos) {
    321 => static function ($self, $stackPos) {
    323 => static function ($self, $stackPos) {
    324 => static function ($self, $stackPos) {
    325 => static function ($self, $stackPos) {
    326 => static function ($self, $stackPos) {
    327 => static function ($self, $stackPos) {
    328 => static function ($self, $stackPos) {
    329 => static function ($self, $stackPos) {
    330 => static function ($self, $stackPos) {
    331 => static function ($self, $stackPos) {
    332 => static function ($self, $stackPos) {
    333 => static function ($self, $stackPos) {
    334 => static function ($self, $stackPos) {
    335 => static function ($self, $stackPos) {
    337 => static function ($self, $stackPos) {
    338 => static function ($self, $stackPos) {
    341 => static function ($self, $stackPos) {
    342 => static function ($self, $stackPos) {
    343 => static function ($self, $stackPos) {
    344 => static function ($self, $stackPos) {
    345 => static function ($self, $stackPos) {
    346 => static function ($self, $stackPos) {
    347 => static function ($self, $stackPos) {
    348 => static function ($self, $stackPos) {
    349 => static function ($self, $stackPos) {
    350 => static function ($self, $stackPos) {
    351 => static function ($self, $stackPos) {
    352 => static function ($self, $stackPos) {
    353 => static function ($self, $stackPos) {
    354 => static function ($self, $stackPos) {
    355 => static function ($self, $stackPos) {
    356 => static function ($self, $stackPos) {
    357 => static function ($self, $stackPos) {
    358 => static function ($self, $stackPos) {
    359 => static function ($self, $stackPos) {
    360 => static function ($self, $stackPos) {
    361 => static function ($self, $stackPos) {
    362 => static function ($self, $stackPos) {
    363 => static function ($self, $stackPos) {
    364 => static function ($self, $stackPos) {
    365 => static function ($self, $stackPos) {
    367 => static function ($self, $stackPos) {
    368 => static function ($self, $stackPos) {
    371 => static function ($self, $stackPos) {
    372 => static function ($self, $stackPos) {
    375 => static function ($self, $stackPos) {
    376 => static function ($self, $stackPos) {
    377 => static function ($self, $stackPos) {
    378 => static function ($self, $stackPos) {
    379 => static function ($self, $stackPos) {
    380 => static function ($self, $stackPos) {
    381 => static function ($self, $stackPos) {
    382 => static function ($self, $stackPos) {
    383 => static function ($self, $stackPos) {
    384 => static function ($self, $stackPos) {
    385 => static function ($self, $stackPos) {
    387 => static function ($self, $stackPos) {
    388 => static function ($self, $stackPos) {
    389 => static function ($self, $stackPos) {
    390 => static function ($self, $stackPos) {
    391 => static function ($self, $stackPos) {
    392 => static function ($self, $stackPos) {
    393 => static function ($self, $stackPos) {
    394 => static function ($self, $stackPos) {
    395 => static function ($self, $stackPos) {
    396 => static function ($self, $stackPos) {
    397 => static function ($self, $stackPos) {
    398 => static function ($self, $stackPos) {
    399 => static function ($self, $stackPos) {
    400 => static function ($self, $stackPos) {
    401 => static function ($self, $stackPos) {
    402 => static function ($self, $stackPos) {
    405 => static function ($self, $stackPos) {
    406 => static function ($self, $stackPos) {
    407 => static function ($self, $stackPos) {
    410 => static function ($self, $stackPos) {
    411 => static function ($self, $stackPos) {
    412 => static function ($self, $stackPos) {
    413 => static function ($self, $stackPos) {
    414 => static function ($self, $stackPos) {
    417 => static function ($self, $stackPos) {
    418 => static function ($self, $stackPos) {
    419 => static function ($self, $stackPos) {
    420 => static function ($self, $stackPos) {
    421 => static function ($self, $stackPos) {
    422 => static function ($self, $stackPos) {
    423 => static function ($self, $stackPos) {
    424 => static function ($self, $stackPos) {
    425 => static function ($self, $stackPos) {
    426 => static function ($self, $stackPos) {
    427 => static function ($self, $stackPos) {
    428 => static function ($self, $stackPos) {
    429 => static function ($self, $stackPos) {
    430 => static function ($self, $stackPos) {
    431 => static function ($self, $stackPos) {
    432 => static function ($self, $stackPos) {
    433 => static function ($self, $stackPos) {
    434 => static function ($self, $stackPos) {
    435 => static function ($self, $stackPos) {
    436 => static function ($self, $stackPos) {
    437 => static function ($self, $stackPos) {
    438 => static function ($self, $stackPos) {
    439 => static function ($self, $stackPos) {
    440 => static function ($self, $stackPos) {
    441 => static function ($self, $stackPos) {
    442 => static function ($self, $stackPos) {
    443 => static function ($self, $stackPos) {
    444 => static function ($self, $stackPos) {
    445 => static function ($self, $stackPos) {
    446 => static function ($self, $stackPos) {
    447 => static function ($self, $stackPos) {
    448 => static function ($self, $stackPos) {
    449 => static function ($self, $stackPos) {
    450 => static function ($self, $stackPos) {
    451 => static function ($self, $stackPos) {
    452 => static function ($self, $stackPos) {
    453 => static function ($self, $stackPos) {
    454 => static function ($self, $stackPos) {
    455 => static function ($self, $stackPos) {
    456 => static function ($self, $stackPos) {
    457 => static function ($self, $stackPos) {
    458 => static function ($self, $stackPos) {
    459 => static function ($self, $stackPos) {
    460 => static function ($self, $stackPos) {
    461 => static function ($self, $stackPos) {
    462 => static function ($self, $stackPos) {
    463 => static function ($self, $stackPos) {
    464 => static function ($self, $stackPos) {
    465 => static function ($self, $stackPos) {
    466 => static function ($self, $stackPos) {
    467 => static function ($self, $stackPos) {
    468 => static function ($self, $stackPos) {
    469 => static function ($self, $stackPos) {
    470 => static function ($self, $stackPos) {
    471 => static function ($self, $stackPos) {
    472 => static function ($self, $stackPos) {
    473 => static function ($self, $stackPos) {
    474 => static function ($self, $stackPos) {
    475 => static function ($self, $stackPos) {
    476 => static function ($self, $stackPos) {
    477 => static function ($self, $stackPos) {
    478 => static function ($self, $stackPos) {
    479 => static function ($self, $stackPos) {
    480 => static function ($self, $stackPos) {
    481 => static function ($self, $stackPos) {
    482 => static function ($self, $stackPos) {
    483 => static function ($self, $stackPos) {
    484 => static function ($self, $stackPos) {
    485 => static function ($self, $stackPos) {
    486 => static function ($self, $stackPos) {
    488 => static function ($self, $stackPos) {
    489 => static function ($self, $stackPos) {
    490 => static function ($self, $stackPos) {
    491 => static function ($self, $stackPos) {
    492 => static function ($self, $stackPos) {
    493 => static function ($self, $stackPos) {
    494 => static function ($self, $stackPos) {
    495 => static function ($self, $stackPos) {
    496 => static function ($self, $stackPos) {
    497 => static function ($self, $stackPos) {
    498 => static function ($self, $stackPos) {
    499 => static function ($self, $stackPos) {
    500 => static function ($self, $stackPos) {
    501 => static function ($self, $stackPos) {
    502 => static function ($self, $stackPos) {
    503 => static function ($self, $stackPos) {
    504 => static function ($self, $stackPos) {
    505 => static function ($self, $stackPos) {
    506 => static function ($self, $stackPos) {
    509 => static function ($self, $stackPos) {
    510 => static function ($self, $stackPos) {
    512 => static function ($self, $stackPos) {
    513 => static function ($self, $stackPos) {
    514 => static function ($self, $stackPos) {
    515 => static function ($self, $stackPos) {
    516 => static function ($self, $stackPos) {
    517 => static function ($self, $stackPos) {
    518 => static function ($self, $stackPos) {
    519 => static function ($self, $stackPos) {
    520 => static function ($self, $stackPos) {
    522 => static function ($self, $stackPos) {
    523 => static function ($self, $stackPos) {
    524 => static function ($self, $stackPos) {
    525 => static function ($self, $stackPos) {
    528 => static function ($self, $stackPos) {
    529 => static function ($self, $stackPos) {
    532 => static function ($self, $stackPos) {
    533 => static function ($self, $stackPos) {
    534 => static function ($self, $stackPos) {
    535 => static function ($self, $stackPos) {
    537 => static function ($self, $stackPos) {
    538 => static function ($self, $stackPos) {
    539 => static function ($self, $stackPos) {
    540 => static function ($self, $stackPos) {
    541 => static function ($self, $stackPos) {
    542 => static function ($self, $stackPos) {
    543 => static function ($self, $stackPos) {
    544 => static function ($self, $stackPos) {
    545 => static function ($self, $stackPos) {
    546 => static function ($self, $stackPos) {
    547 => static function ($self, $stackPos) {
    548 => static function ($self, $stackPos) {
    549 => static function ($self, $stackPos) {
    550 => static function ($self, $stackPos) {
    551 => static function ($self, $stackPos) {
    552 => static function ($self, $stackPos) {
    553 => static function ($self, $stackPos) {
    554 => static function ($self, $stackPos) {
    555 => static function ($self, $stackPos) {
    556 => static function ($self, $stackPos) {
    560 => static function ($self, $stackPos) {
    561 => static function ($self, $stackPos) {
    562 => static function ($self, $stackPos) {
    563 => static function ($self, $stackPos) {
    566 => static function ($self, $stackPos) {
    573 => static function ($self, $stackPos) {
    577 => static function ($self, $stackPos) {
    579 => static function ($self, $stackPos) {
    580 => static function ($self, $stackPos) {
    581 => static function ($self, $stackPos) {
    585 => static function ($self, $stackPos) {
    586 => static function ($self, $stackPos) {
    588 => static function ($self, $stackPos) {
    589 => static function ($self, $stackPos) {
    590 => static function ($self, $stackPos) {
    591 => static function ($self, $stackPos) {
    592 => static function ($self, $stackPos) {
    594 => static function ($self, $stackPos) {
    595 => static function ($self, $stackPos) {
    596 => static function ($self, $stackPos) {
    597 => static function ($self, $stackPos) {
    598 => static function ($self, $stackPos) {
    600 => static function ($self, $stackPos) {
    603 => static function ($self, $stackPos) {
    605 => static function ($self, $stackPos) {
    606 => static function ($self, $stackPos) {
    607 => static function ($self, $stackPos) {
    609 => static function ($self, $stackPos) {
    610 => static function ($self, $stackPos) {
    611 => static function ($self, $stackPos) {
    612 => static function ($self, $stackPos) {
    613 => static function ($self, $stackPos) {
    614 => static function ($self, $stackPos) {
    615 => static function ($self, $stackPos) {
    616 => static function ($self, $stackPos) {
    617 => static function ($self, $stackPos) {
    618 => static function ($self, $stackPos) {
    619 => static function ($self, $stackPos) {
    620 => static function ($self, $stackPos) {
    621 => static function ($self, $stackPos) {
    622 => static function ($self, $stackPos) {
    623 => static function ($self, $stackPos) {
    624 => static function ($self, $stackPos) {
    625 => static function ($self, $stackPos) {
    627 => static function ($self, $stackPos) {
    628 => static function ($self, $stackPos) {
    629 => static function ($self, $stackPos) {
    630 => static function ($self, $stackPos) {
    631 => static function ($self, $stackPos) {
    632 => static function ($self, $stackPos) {
    633 => static function ($self, $stackPos) {
    634 => static function ($self, $stackPos) {
    635 => static function ($self, $stackPos) {
    636 => static function ($self, $stackPos) {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Parser.php
    public function parse(string $code, ?ErrorHandler $errorHandler = null): ?array;
    public function getTokens(): array;
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php
    abstract class ParserAbstract implements Parser {
    abstract protected function initReduceCallbacks(): void;
    public function __construct(Lexer $lexer, ?PhpVersion $phpVersion = null) {
    public function parse(string $code, ?ErrorHandler $errorHandler = null): ?array {
    public function getTokens(): array {
    protected function doParse(): ?array {
    protected function emitError(Error $error): void {
    protected function getErrorMessage(int $symbol, int $state): string {
    protected function getExpectedTokens(int $state): array {
    protected function getAttributes(int $tokenStartPos, int $tokenEndPos): array {
    protected function getAttributesForToken(int $tokenPos): array {
    protected function traceNewState($state, $symbol): void {
    protected function traceRead($symbol): void {
    protected function traceShift($symbol): void {
    protected function traceAccept(): void {
    protected function traceReduce($n): void {
    protected function tracePop($state): void {
    protected function traceDiscard($symbol): void {
    protected function handleNamespaces(array $stmts): array {
    private function fixupNamespaceAttributes(Node\Stmt\Namespace_ $stmt): void {
    private function getNamespaceErrorAttributes(Namespace_ $node): array {
    private function getNamespacingStyle(array $stmts): ?string {
    protected function handleBuiltinTypes(Name $name) {
    protected function getAttributesAt(int $stackPos): array {
    protected function getFloatCastKind(string $cast): int {
    protected function parseLNumber(string $str, array $attributes, bool $allowInvalidOctal = false): Int_ {
    protected function parseNumString(string $str, array $attributes) {
    protected function stripIndentation(
    function ($matches) use ($indentLen, $indentChar, $attributes) {
    protected function parseDocString(
    protected function createCommentFromToken(Token $token, int $tokenPos): Comment {
    protected function getCommentBeforeToken(int $tokenPos): ?Comment {
    protected function maybeCreateZeroLengthNop(int $tokenPos): ?Nop {
    protected function maybeCreateNop(int $tokenStartPos, int $tokenEndPos): ?Nop {
    protected function handleHaltCompiler(): string {
    protected function inlineHtmlHasLeadingNewline(int $stackPos): bool {
    protected function createEmptyElemAttributes(int $tokenPos): array {
    protected function fixupArrayDestructuring(Array_ $node): Expr\List_ {
    return new Expr\List_(array_map(function (Node\ArrayItem $item) {
    protected function postprocessList(Expr\List_ $node): void {
    protected function fixupAlternativeElse($node): void {
    protected function checkClassModifier(int $a, int $b, int $modifierPos): void {
    protected function checkModifier(int $a, int $b, int $modifierPos): void {
    protected function checkParam(Param $node): void {
    protected function checkTryCatch(TryCatch $node): void {
    protected function checkNamespace(Namespace_ $node): void {
    private function checkClassName(?Identifier $name, int $namePos): void {
    sprintf('Cannot use \'%s\' as class name as it is reserved', $name),
    private function checkImplementedInterfaces(array $interfaces): void {
    protected function checkClass(Class_ $node, int $namePos): void {
    sprintf('Cannot use \'%s\' as class name as it is reserved', $node->extends),
    protected function checkInterface(Interface_ $node, int $namePos): void {
    protected function checkEnum(Enum_ $node, int $namePos): void {
    protected function checkClassMethod(ClassMethod $node, int $modifierPos): void {
    protected function checkClassConst(ClassConst $node, int $modifierPos): void {
    protected function checkUseUse(UseItem $node, int $namePos): void {
    'Cannot use %s as %s because \'%2$s\' is a special class name',
    protected function checkPropertyHooksForMultiProperty(Property $property, int $hookPos): void {
    protected function checkEmptyPropertyHookList(array $hooks, int $hookPos): void {
    protected function checkPropertyHook(PropertyHook $hook, ?int $paramListPos): void {
    protected function checkPropertyHookModifiers(int $a, int $b, int $modifierPos): void {
    protected function checkConstantAttributes(Const_ $node): void {
    protected function addPropertyNameToHooks(Node $node): void {
    private function isSimpleExit(array $args): bool {
    protected function createExitExpr(string $name, int $namePos, array $args, array $attrs): Expr {
    protected function createTokenMap(): array {
    $tokenMap[\constant($name)] = constant(static::class . '::' . $name);
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/ParserFactory.php
    class ParserFactory {
    public function createForVersion(PhpVersion $version): Parser {
    public function createForNewestSupportedVersion(): Parser {
    public function createForHostVersion(): Parser {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/PhpVersion.php
    class PhpVersion {
    private function __construct(int $id) {
    public static function fromComponents(int $major, int $minor): self {
    public static function getNewestSupported(): self {
    public static function getHostVersion(): self {
    public static function fromString(string $version): self {
    public function equals(PhpVersion $other): bool {
    public function newerOrEqual(PhpVersion $other): bool {
    public function older(PhpVersion $other): bool {
    public function isHostVersion(): bool {
    public function supportsBuiltinType(string $type): bool {
    public function supportsShortArraySyntax(): bool {
    public function supportsShortArrayDestructuring(): bool {
    public function supportsFlexibleHeredoc(): bool {
    public function supportsTrailingCommaInParamList(): bool {
    public function allowsAssignNewByReference(): bool {
    public function allowsInvalidOctals(): bool {
    public function allowsDelInIdentifiers(): bool {
    public function supportsYieldWithoutParentheses(): bool {
    public function supportsUnicodeEscapes(): bool {
    public function supportsAttributes(): bool {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter/Standard.php
    class Standard extends PrettyPrinterAbstract {
    protected function pParam(Node\Param $node): string {
    protected function pArg(Node\Arg $node): string {
    protected function pVariadicPlaceholder(Node\VariadicPlaceholder $node): string {
    protected function pConst(Node\Const_ $node): string {
    protected function pNullableType(Node\NullableType $node): string {
    protected function pUnionType(Node\UnionType $node): string {
    protected function pIntersectionType(Node\IntersectionType $node): string {
    protected function pIdentifier(Node\Identifier $node): string {
    protected function pVarLikeIdentifier(Node\VarLikeIdentifier $node): string {
    protected function pAttribute(Node\Attribute $node): string {
    protected function pAttributeGroup(Node\AttributeGroup $node): string {
    protected function pName(Name $node): string {
    protected function pName_FullyQualified(Name\FullyQualified $node): string {
    protected function pName_Relative(Name\Relative $node): string {
    protected function pScalar_MagicConst_Class(MagicConst\Class_ $node): string {
    protected function pScalar_MagicConst_Dir(MagicConst\Dir $node): string {
    protected function pScalar_MagicConst_File(MagicConst\File $node): string {
    protected function pScalar_MagicConst_Function(MagicConst\Function_ $node): string {
    protected function pScalar_MagicConst_Line(MagicConst\Line $node): string {
    protected function pScalar_MagicConst_Method(MagicConst\Method $node): string {
    protected function pScalar_MagicConst_Namespace(MagicConst\Namespace_ $node): string {
    protected function pScalar_MagicConst_Trait(MagicConst\Trait_ $node): string {
    protected function pScalar_MagicConst_Property(MagicConst\Property $node): string {
    private function indentString(string $str): string {
    protected function pScalar_String(Scalar\String_ $node): string {
    protected function pScalar_InterpolatedString(Scalar\InterpolatedString $node): string {
    protected function pScalar_Int(Scalar\Int_ $node): string {
    protected function pScalar_Float(Scalar\Float_ $node): string {
    protected function pExpr_Assign(Expr\Assign $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignRef(Expr\AssignRef $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_Plus(AssignOp\Plus $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_Minus(AssignOp\Minus $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_Mul(AssignOp\Mul $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_Div(AssignOp\Div $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_Concat(AssignOp\Concat $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_Mod(AssignOp\Mod $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_BitwiseAnd(AssignOp\BitwiseAnd $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_BitwiseOr(AssignOp\BitwiseOr $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_BitwiseXor(AssignOp\BitwiseXor $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_ShiftLeft(AssignOp\ShiftLeft $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_ShiftRight(AssignOp\ShiftRight $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_Pow(AssignOp\Pow $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_AssignOp_Coalesce(AssignOp\Coalesce $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Plus(BinaryOp\Plus $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Minus(BinaryOp\Minus $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Mul(BinaryOp\Mul $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Div(BinaryOp\Div $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Concat(BinaryOp\Concat $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Mod(BinaryOp\Mod $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_BooleanAnd(BinaryOp\BooleanAnd $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_BooleanOr(BinaryOp\BooleanOr $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_BitwiseAnd(BinaryOp\BitwiseAnd $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_BitwiseOr(BinaryOp\BitwiseOr $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_BitwiseXor(BinaryOp\BitwiseXor $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_ShiftLeft(BinaryOp\ShiftLeft $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_ShiftRight(BinaryOp\ShiftRight $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Pow(BinaryOp\Pow $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_LogicalAnd(BinaryOp\LogicalAnd $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_LogicalOr(BinaryOp\LogicalOr $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_LogicalXor(BinaryOp\LogicalXor $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Equal(BinaryOp\Equal $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_NotEqual(BinaryOp\NotEqual $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Identical(BinaryOp\Identical $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_NotIdentical(BinaryOp\NotIdentical $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Spaceship(BinaryOp\Spaceship $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Greater(BinaryOp\Greater $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_GreaterOrEqual(BinaryOp\GreaterOrEqual $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Smaller(BinaryOp\Smaller $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_SmallerOrEqual(BinaryOp\SmallerOrEqual $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BinaryOp_Coalesce(BinaryOp\Coalesce $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_Instanceof(Expr\Instanceof_ $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BooleanNot(Expr\BooleanNot $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_BitwiseNot(Expr\BitwiseNot $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_UnaryMinus(Expr\UnaryMinus $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_UnaryPlus(Expr\UnaryPlus $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_PreInc(Expr\PreInc $node): string {
    protected function pExpr_PreDec(Expr\PreDec $node): string {
    protected function pExpr_PostInc(Expr\PostInc $node): string {
    protected function pExpr_PostDec(Expr\PostDec $node): string {
    protected function pExpr_ErrorSuppress(Expr\ErrorSuppress $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_YieldFrom(Expr\YieldFrom $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_Print(Expr\Print_ $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_Cast_Int(Cast\Int_ $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_Cast_Double(Cast\Double $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_Cast_String(Cast\String_ $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_Cast_Array(Cast\Array_ $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_Cast_Object(Cast\Object_ $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_Cast_Bool(Cast\Bool_ $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_Cast_Unset(Cast\Unset_ $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_FuncCall(Expr\FuncCall $node): string {
    protected function pExpr_MethodCall(Expr\MethodCall $node): string {
    protected function pExpr_NullsafeMethodCall(Expr\NullsafeMethodCall $node): string {
    protected function pExpr_StaticCall(Expr\StaticCall $node): string {
    protected function pExpr_Empty(Expr\Empty_ $node): string {
    protected function pExpr_Isset(Expr\Isset_ $node): string {
    protected function pExpr_Eval(Expr\Eval_ $node): string {
    protected function pExpr_Include(Expr\Include_ $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_List(Expr\List_ $node): string {
    protected function pExpr_Error(Expr\Error $node): string {
    protected function pExpr_Variable(Expr\Variable $node): string {
    protected function pExpr_Array(Expr\Array_ $node): string {
    protected function pKey(?Node $node): string {
    protected function pArrayItem(Node\ArrayItem $node): string {
    protected function pExpr_ArrayDimFetch(Expr\ArrayDimFetch $node): string {
    protected function pExpr_ConstFetch(Expr\ConstFetch $node): string {
    protected function pExpr_ClassConstFetch(Expr\ClassConstFetch $node): string {
    protected function pExpr_PropertyFetch(Expr\PropertyFetch $node): string {
    protected function pExpr_NullsafePropertyFetch(Expr\NullsafePropertyFetch $node): string {
    protected function pExpr_StaticPropertyFetch(Expr\StaticPropertyFetch $node): string {
    protected function pExpr_ShellExec(Expr\ShellExec $node): string {
    protected function pExpr_Closure(Expr\Closure $node): string {
    . 'function ' . ($node->byRef ? '&' : '')
    protected function pExpr_Match(Expr\Match_ $node): string {
    protected function pMatchArm(Node\MatchArm $node): string {
    protected function pExpr_ArrowFunction(Expr\ArrowFunction $node, int $precedence, int $lhsPrecedence): string {
    protected function pClosureUse(Node\ClosureUse $node): string {
    protected function pExpr_New(Expr\New_ $node): string {
    if ($node->class instanceof Stmt\Class_) {
    protected function pExpr_Clone(Expr\Clone_ $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_Ternary(Expr\Ternary $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_Exit(Expr\Exit_ $node): string {
    protected function pExpr_Throw(Expr\Throw_ $node, int $precedence, int $lhsPrecedence): string {
    protected function pExpr_Yield(Expr\Yield_ $node, int $precedence, int $lhsPrecedence): string {
    protected function pStmt_Namespace(Stmt\Namespace_ $node): string {
    protected function pStmt_Use(Stmt\Use_ $node): string {
    protected function pStmt_GroupUse(Stmt\GroupUse $node): string {
    protected function pUseItem(Node\UseItem $node): string {
    protected function pUseType(int $type): string {
    return $type === Stmt\Use_::TYPE_FUNCTION ? 'function '
    protected function pStmt_Interface(Stmt\Interface_ $node): string {
    protected function pStmt_Enum(Stmt\Enum_ $node): string {
    protected function pStmt_Class(Stmt\Class_ $node): string {
    protected function pStmt_Trait(Stmt\Trait_ $node): string {
    protected function pStmt_EnumCase(Stmt\EnumCase $node): string {
    protected function pStmt_TraitUse(Stmt\TraitUse $node): string {
    protected function pStmt_TraitUseAdaptation_Precedence(Stmt\TraitUseAdaptation\Precedence $node): string {
    protected function pStmt_TraitUseAdaptation_Alias(Stmt\TraitUseAdaptation\Alias $node): string {
    protected function pStmt_Property(Stmt\Property $node): string {
    protected function pPropertyItem(Node\PropertyItem $node): string {
    protected function pPropertyHook(Node\PropertyHook $node): string {
    protected function pStmt_ClassMethod(Stmt\ClassMethod $node): string {
    . 'function ' . ($node->byRef ? '&' : '') . $node->name
    protected function pStmt_ClassConst(Stmt\ClassConst $node): string {
    protected function pStmt_Function(Stmt\Function_ $node): string {
    . 'function ' . ($node->byRef ? '&' : '') . $node->name
    protected function pStmt_Const(Stmt\Const_ $node): string {
    protected function pStmt_Declare(Stmt\Declare_ $node): string {
    protected function pDeclareItem(Node\DeclareItem $node): string {
    protected function pStmt_If(Stmt\If_ $node): string {
    protected function pStmt_ElseIf(Stmt\ElseIf_ $node): string {
    protected function pStmt_Else(Stmt\Else_ $node): string {
    protected function pStmt_For(Stmt\For_ $node): string {
    protected function pStmt_Foreach(Stmt\Foreach_ $node): string {
    protected function pStmt_While(Stmt\While_ $node): string {
    protected function pStmt_Do(Stmt\Do_ $node): string {
    protected function pStmt_Switch(Stmt\Switch_ $node): string {
    protected function pStmt_Case(Stmt\Case_ $node): string {
    protected function pStmt_TryCatch(Stmt\TryCatch $node): string {
    protected function pStmt_Catch(Stmt\Catch_ $node): string {
    protected function pStmt_Finally(Stmt\Finally_ $node): string {
    protected function pStmt_Break(Stmt\Break_ $node): string {
    protected function pStmt_Continue(Stmt\Continue_ $node): string {
    protected function pStmt_Return(Stmt\Return_ $node): string {
    protected function pStmt_Label(Stmt\Label $node): string {
    protected function pStmt_Goto(Stmt\Goto_ $node): string {
    protected function pStmt_Expression(Stmt\Expression $node): string {
    protected function pStmt_Echo(Stmt\Echo_ $node): string {
    protected function pStmt_Static(Stmt\Static_ $node): string {
    protected function pStmt_Global(Stmt\Global_ $node): string {
    protected function pStaticVar(Node\StaticVar $node): string {
    protected function pStmt_Unset(Stmt\Unset_ $node): string {
    protected function pStmt_InlineHTML(Stmt\InlineHTML $node): string {
    protected function pStmt_HaltCompiler(Stmt\HaltCompiler $node): string {
    protected function pStmt_Nop(Stmt\Nop $node): string {
    protected function pStmt_Block(Stmt\Block $node): string {
    protected function pClassCommon(Stmt\Class_ $node, string $afterClassToken): string {
    protected function pObjectProperty(Node $node): string {
    protected function pEncapsList(array $encapsList, ?string $quote): string {
    protected function pSingleQuotedString(string $string): string {
    protected function escapeString(string $string, ?string $quote): string {
    return preg_replace_callback($regex, function ($matches): string {
    protected function containsEndLabel(string $string, string $label, bool $atStart = true): bool {
    protected function encapsedContainsEndLabel(array $parts, string $label): bool {
    protected function pDereferenceLhs(Node $node): string {
    protected function pStaticDereferenceLhs(Node $node): string {
    protected function pCallLhs(Node $node): string {
    protected function pNewOperand(Node $node): string {
    protected function hasNodeWithComments(array $nodes): bool {
    protected function pMaybeMultiline(array $nodes, bool $trailingComma = false): string {
    private function hasParamWithAttributes(array $params): bool {
    protected function pParams(array $params): string {
    protected function pAttrGroups(array $nodes, bool $inline = false): string {
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/PrettyPrinter.php
    public function prettyPrint(array $stmts): string;
    public function prettyPrintExpr(Expr $node): string;
    public function prettyPrintFile(array $stmts): string;
    public function printFormatPreserving(array $stmts, array $origStmts, array $origTokens): string;
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/PrettyPrinterAbstract.php
    abstract class PrettyPrinterAbstract implements PrettyPrinter {
    Expr\Clone_::class             => [-10,   0,   1],
    BinaryOp\Pow::class            => [  0,   0,   1],
    Expr\BitwiseNot::class         => [ 10,  -1,  -1],
    Expr\UnaryPlus::class          => [ 10,  -1,  -1],
    Expr\UnaryMinus::class         => [ 10,  -1,  -1],
    Cast\Int_::class               => [ 10,  -1,  -1],
    Cast\Double::class             => [ 10,  -1,  -1],
    Cast\String_::class            => [ 10,  -1,  -1],
    Cast\Array_::class             => [ 10,  -1,  -1],
    Cast\Object_::class            => [ 10,  -1,  -1],
    Cast\Bool_::class              => [ 10,  -1,  -1],
    Cast\Unset_::class             => [ 10,  -1,  -1],
    Expr\ErrorSuppress::class      => [ 10,  -1,  -1],
    Expr\Instanceof_::class        => [ 20,  -1,  -1],
    Expr\BooleanNot::class         => [ 30,  -1,  -1],
    BinaryOp\Mul::class            => [ 40,  41,  40],
    BinaryOp\Div::class            => [ 40,  41,  40],
    BinaryOp\Mod::class            => [ 40,  41,  40],
    BinaryOp\Plus::class           => [ 50,  51,  50],
    BinaryOp\Minus::class          => [ 50,  51,  50],
    BinaryOp\Concat::class         => [ 50,  51,  50],
    BinaryOp\ShiftLeft::class      => [ 60,  61,  60],
    BinaryOp\ShiftRight::class     => [ 60,  61,  60],
    BinaryOp\Smaller::class        => [ 70,  70,  70],
    BinaryOp\SmallerOrEqual::class => [ 70,  70,  70],
    BinaryOp\Greater::class        => [ 70,  70,  70],
    BinaryOp\GreaterOrEqual::class => [ 70,  70,  70],
    BinaryOp\Equal::class          => [ 80,  80,  80],
    BinaryOp\NotEqual::class       => [ 80,  80,  80],
    BinaryOp\Identical::class      => [ 80,  80,  80],
    BinaryOp\NotIdentical::class   => [ 80,  80,  80],
    BinaryOp\Spaceship::class      => [ 80,  80,  80],
    BinaryOp\BitwiseAnd::class     => [ 90,  91,  90],
    BinaryOp\BitwiseXor::class     => [100, 101, 100],
    BinaryOp\BitwiseOr::class      => [110, 111, 110],
    BinaryOp\BooleanAnd::class     => [120, 121, 120],
    BinaryOp\BooleanOr::class      => [130, 131, 130],
    BinaryOp\Coalesce::class       => [140, 140, 141],
    Expr\Ternary::class            => [150, 150, 150],
    Expr\Assign::class             => [160,  -1,  -1],
    Expr\AssignRef::class          => [160,  -1,  -1],
    AssignOp\Plus::class           => [160,  -1,  -1],
    AssignOp\Minus::class          => [160,  -1,  -1],
    AssignOp\Mul::class            => [160,  -1,  -1],
    AssignOp\Div::class            => [160,  -1,  -1],
    AssignOp\Concat::class         => [160,  -1,  -1],
    AssignOp\Mod::class            => [160,  -1,  -1],
    AssignOp\BitwiseAnd::class     => [160,  -1,  -1],
    AssignOp\BitwiseOr::class      => [160,  -1,  -1],
    AssignOp\BitwiseXor::class     => [160,  -1,  -1],
    AssignOp\ShiftLeft::class      => [160,  -1,  -1],
    AssignOp\ShiftRight::class     => [160,  -1,  -1],
    AssignOp\Pow::class            => [160,  -1,  -1],
    AssignOp\Coalesce::class       => [160,  -1,  -1],
    Expr\YieldFrom::class          => [170,  -1,  -1],
    Expr\Yield_::class             => [175,  -1,  -1],
    Expr\Print_::class             => [180,  -1,  -1],
    BinaryOp\LogicalAnd::class     => [190, 191, 190],
    BinaryOp\LogicalXor::class     => [200, 201, 200],
    BinaryOp\LogicalOr::class      => [210, 211, 210],
    Expr\Include_::class           => [220,  -1,  -1],
    Expr\ArrowFunction::class      => [230,  -1,  -1],
    Expr\Throw_::class             => [240,  -1,  -1],
    *       where $printFn is the function to print the modifiers and $token is the token before which
    public function __construct(array $options = []) {
    protected function resetState(): void {
    protected function setIndentLevel(int $level): void {
    protected function indent(): void {
    protected function outdent(): void {
    public function prettyPrint(array $stmts): string {
    public function prettyPrintExpr(Expr $node): string {
    public function prettyPrintFile(array $stmts): string {
    protected function preprocessNodes(array $nodes): void {
    protected function handleMagicTokens(string $str): string {
    protected function pStmts(array $nodes, bool $indent = true): string {
    * @param string $class Node class of operator
    protected function pInfixOp(
    * @param string $class Node class of operator
    protected function pPrefixOp(string $class, string $operatorString, Node $node, int $precedence, int $lhsPrecedence): string {
    * @param string $class Node class of operator
    protected function pPostfixOp(string $class, Node $node, string $operatorString, int $precedence, int $lhsPrecedence): string {
    protected function pImplode(array $nodes, string $glue = ''): string {
    protected function pCommaSeparated(array $nodes): string {
    protected function pCommaSeparatedMultiline(array $nodes, bool $trailingComma): string {
    protected function pComments(array $comments): string {
    public function printFormatPreserving(array $stmts, array $origStmts, array $origTokens): string {
    protected function pFallback(Node $node, int $precedence, int $lhsPrecedence): string {
    protected function p(
    $class = \get_class($node);
    \assert($class === \get_class($origNode));
    if ($node instanceof Expr\New_ && $node->class instanceof Stmt\Class_) {
    $class = PrintableNewAnonClassNode::class;
    $key = $class . '->' . $subNodeName;
    protected function pArray(
    protected function pFixup(int $fixup, Node $subNode, ?string $parentClass, int $subStartPos, int $subEndPos): string {
    protected function safeAppend(string &$str, string $append): void {
    protected function callLhsRequiresParens(Node $node): bool {
    protected function dereferenceLhsRequiresParens(Node $node): bool {
    protected function staticDereferenceLhsRequiresParens(Node $node): bool {
    protected function newOperandRequiresParens(Node $node): bool {
    protected function pModifiers(int $modifiers): string {
    protected function pStatic(bool $static): string {
    protected function isMultiline(array $nodes): bool {
    protected function initializeLabelCharMap(): void {
    protected function initializeNodeListDiffer(): void {
    $this->nodeListDiffer = new Internal\Differ(function ($a, $b) {
    protected function initializeFixupMap(): void {
    Expr\Instanceof_::class => [
    Expr\Ternary::class => [
    Expr\Yield_::class => ['value' => self::FIXUP_PREC_UNARY],
    Expr\FuncCall::class => ['name' => self::FIXUP_CALL_LHS],
    Expr\StaticCall::class => ['class' => self::FIXUP_STATIC_DEREF_LHS],
    Expr\ArrayDimFetch::class => ['var' => self::FIXUP_DEREF_LHS],
    Expr\ClassConstFetch::class => [
    Expr\New_::class => ['class' => self::FIXUP_NEW],
    Expr\MethodCall::class => [
    Expr\NullsafeMethodCall::class => [
    Expr\StaticPropertyFetch::class => [
    Expr\PropertyFetch::class => [
    Expr\NullsafePropertyFetch::class => [
    Scalar\InterpolatedString::class => [
    protected function initializeRemovalMap(): void {
    protected function initializeInsertionMap(): void {
    protected function initializeListInsertionMap(): void {
    Stmt\Catch_::class . '->types' => '|',
    UnionType::class . '->types' => '|',
    IntersectionType::class . '->types' => '&',
    Stmt\If_::class . '->elseifs' => ' ',
    Stmt\TryCatch::class . '->catches' => ' ',
    Expr\Array_::class . '->items' => ', ',
    Expr\ArrowFunction::class . '->params' => ', ',
    Expr\Closure::class . '->params' => ', ',
    Expr\Closure::class . '->uses' => ', ',
    Expr\FuncCall::class . '->args' => ', ',
    Expr\Isset_::class . '->vars' => ', ',
    Expr\List_::class . '->items' => ', ',
    Expr\MethodCall::class . '->args' => ', ',
    Expr\NullsafeMethodCall::class . '->args' => ', ',
    Expr\New_::class . '->args' => ', ',
    PrintableNewAnonClassNode::class . '->args' => ', ',
    Expr\StaticCall::class . '->args' => ', ',
    Stmt\ClassConst::class . '->consts' => ', ',
    Stmt\ClassMethod::class . '->params' => ', ',
    Stmt\Class_::class . '->implements' => ', ',
    Stmt\Enum_::class . '->implements' => ', ',
    PrintableNewAnonClassNode::class . '->implements' => ', ',
    Stmt\Const_::class . '->consts' => ', ',
    Stmt\Declare_::class . '->declares' => ', ',
    Stmt\Echo_::class . '->exprs' => ', ',
    Stmt\For_::class . '->init' => ', ',
    Stmt\For_::class . '->cond' => ', ',
    Stmt\For_::class . '->loop' => ', ',
    Stmt\Function_::class . '->params' => ', ',
    Stmt\Global_::class . '->vars' => ', ',
    Stmt\GroupUse::class . '->uses' => ', ',
    Stmt\Interface_::class . '->extends' => ', ',
    Expr\Match_::class . '->arms' => ', ',
    Stmt\Property::class . '->props' => ', ',
    Stmt\StaticVar::class . '->vars' => ', ',
    Stmt\TraitUse::class . '->traits' => ', ',
    Stmt\TraitUseAdaptation\Precedence::class . '->insteadof' => ', ',
    Stmt\Unset_::class .  '->vars' => ', ',
    Stmt\UseUse::class . '->uses' => ', ',
    MatchArm::class . '->conds' => ', ',
    AttributeGroup::class . '->attrs' => ', ',
    PropertyHook::class . '->params' => ', ',
    Expr\Closure::class . '->stmts' => "\n",
    Stmt\Case_::class . '->stmts' => "\n",
    Stmt\Catch_::class . '->stmts' => "\n",
    Stmt\Class_::class . '->stmts' => "\n",
    Stmt\Enum_::class . '->stmts' => "\n",
    PrintableNewAnonClassNode::class . '->stmts' => "\n",
    Stmt\Interface_::class . '->stmts' => "\n",
    Stmt\Trait_::class . '->stmts' => "\n",
    Stmt\ClassMethod::class . '->stmts' => "\n",
    Stmt\Declare_::class . '->stmts' => "\n",
    Stmt\Do_::class . '->stmts' => "\n",
    Stmt\ElseIf_::class . '->stmts' => "\n",
    Stmt\Else_::class . '->stmts' => "\n",
    Stmt\Finally_::class . '->stmts' => "\n",
    Stmt\Foreach_::class . '->stmts' => "\n",
    Stmt\For_::class . '->stmts' => "\n",
    Stmt\Function_::class . '->stmts' => "\n",
    Stmt\If_::class . '->stmts' => "\n",
    Stmt\Namespace_::class . '->stmts' => "\n",
    Stmt\Block::class . '->stmts' => "\n",
    Stmt\Class_::class . '->attrGroups' => "\n",
    Stmt\Enum_::class . '->attrGroups' => "\n",
    Stmt\EnumCase::class . '->attrGroups' => "\n",
    Stmt\Interface_::class . '->attrGroups' => "\n",
    Stmt\Trait_::class . '->attrGroups' => "\n",
    Stmt\Function_::class . '->attrGroups' => "\n",
    Stmt\ClassMethod::class . '->attrGroups' => "\n",
    Stmt\ClassConst::class . '->attrGroups' => "\n",
    Stmt\Property::class . '->attrGroups' => "\n",
    PrintableNewAnonClassNode::class . '->attrGroups' => ' ',
    Expr\Closure::class . '->attrGroups' => ' ',
    Expr\ArrowFunction::class . '->attrGroups' => ' ',
    Param::class . '->attrGroups' => ' ',
    PropertyHook::class . '->attrGroups' => ' ',
    Stmt\Switch_::class . '->cases' => "\n",
    Stmt\TraitUse::class . '->adaptations' => "\n",
    Stmt\TryCatch::class . '->stmts' => "\n",
    Stmt\While_::class . '->stmts' => "\n",
    PropertyHook::class . '->body' => "\n",
    Stmt\Property::class . '->hooks' => "\n",
    Param::class . '->hooks' => "\n",
    protected function initializeEmptyListInsertionMap(): void {
    Expr\ArrowFunction::class . '->params' => ['(', '', ''],
    Expr\Closure::class . '->uses' => [')', ' use (', ')'],
    Expr\Closure::class . '->params' => ['(', '', ''],
    Expr\FuncCall::class . '->args' => ['(', '', ''],
    Expr\MethodCall::class . '->args' => ['(', '', ''],
    Expr\NullsafeMethodCall::class . '->args' => ['(', '', ''],
    Expr\New_::class . '->args' => ['(', '', ''],
    PrintableNewAnonClassNode::class . '->args' => ['(', '', ''],
    PrintableNewAnonClassNode::class . '->implements' => [null, ' implements ', ''],
    Expr\StaticCall::class . '->args' => ['(', '', ''],
    Stmt\Class_::class . '->implements' => [null, ' implements ', ''],
    Stmt\Enum_::class . '->implements' => [null, ' implements ', ''],
    Stmt\ClassMethod::class . '->params' => ['(', '', ''],
    Stmt\Interface_::class . '->extends' => [null, ' extends ', ''],
    Stmt\Function_::class . '->params' => ['(', '', ''],
    Stmt\Interface_::class . '->attrGroups' => [null, '', "\n"],
    Stmt\Class_::class . '->attrGroups' => [null, '', "\n"],
    Stmt\ClassConst::class . '->attrGroups' => [null, '', "\n"],
    Stmt\ClassMethod::class . '->attrGroups' => [null, '', "\n"],
    Stmt\Function_::class . '->attrGroups' => [null, '', "\n"],
    Stmt\Property::class . '->attrGroups' => [null, '', "\n"],
    Stmt\Trait_::class . '->attrGroups' => [null, '', "\n"],
    Expr\ArrowFunction::class . '->attrGroups' => [null, '', ' '],
    Expr\Closure::class . '->attrGroups' => [null, '', ' '],
    Stmt\Const_::class . '->attrGroups' => [null, '', "\n"],
    PrintableNewAnonClassNode::class . '->attrGroups' => [\T_NEW, ' ', ''],
    protected function initializeModifierChangeMap(): void {
    Stmt\ClassConst::class . '->flags' => ['pModifiers', \T_CONST],
    Stmt\ClassMethod::class . '->flags' => ['pModifiers', \T_FUNCTION],
    Stmt\Class_::class . '->flags' => ['pModifiers', \T_CLASS],
    Stmt\Property::class . '->flags' => ['pModifiers', \T_VARIABLE],
    PrintableNewAnonClassNode::class . '->flags' => ['pModifiers', \T_CLASS],
    Param::class . '->flags' => ['pModifiers', \T_VARIABLE],
    PropertyHook::class . '->flags' => ['pModifiers', \T_STRING],
    Expr\Closure::class . '->static' => ['pStatic', \T_FUNCTION],
    Expr\ArrowFunction::class . '->static' => ['pStatic', \T_FN],
    //Stmt\TraitUseAdaptation\Alias::class . '->newModifier' => 0, // TODO
--------------------------------------------
Fichier : ./vendor/nikic/php-parser/lib/PhpParser/Token.php
    class Token extends Internal\TokenPolyfill {
    public function getEndPos(): int {
    public function getEndLine(): int {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/.php-cs-fixer.dist.php
    // This fixer removes the blank line at class start, no way to disable that, so we disable the fixer :(
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/exceptions/ElementCollectionException.php
    class ElementCollectionException extends InvalidArgumentException implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/exceptions/Exception.php
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/exceptions/InvalidApplicationNameException.php
    class InvalidApplicationNameException extends InvalidArgumentException implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/exceptions/InvalidEmailException.php
    class InvalidEmailException extends InvalidArgumentException implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/exceptions/InvalidUrlException.php
    class InvalidUrlException extends InvalidArgumentException implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/exceptions/ManifestDocumentException.php
    class ManifestDocumentException extends RuntimeException implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/exceptions/ManifestDocumentLoadingException.php
    use function sprintf;
    class ManifestDocumentLoadingException extends \Exception implements Exception {
    public function __construct(array $libxmlErrors) {
    public function getLibxmlErrors(): array {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/exceptions/ManifestDocumentMapperException.php
    class ManifestDocumentMapperException extends RuntimeException implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/exceptions/ManifestElementException.php
    class ManifestElementException extends RuntimeException implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/exceptions/ManifestLoaderException.php
    class ManifestLoaderException extends \Exception implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/exceptions/NoEmailAddressException.php
    class NoEmailAddressException extends InvalidArgumentException implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/ManifestDocumentMapper.php
    use function sprintf;
    class ManifestDocumentMapper {
    public function map(ManifestDocument $document): Manifest {
    private function mapType(ContainsElement $contains): Type {
    private function mapCopyright(CopyrightElement $copyright): CopyrightInformation {
    private function mapRequirements(RequiresElement $requires): RequirementCollection {
    private function mapBundledComponents(ManifestDocument $document): BundledComponentCollection {
    private function mapExtension(ExtensionElement $extension): Extension {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/ManifestLoader.php
    use function sprintf;
    class ManifestLoader {
    public static function fromFile(string $filename): Manifest {
    public static function fromPhar(string $filename): Manifest {
    public static function fromString(string $manifest): Manifest {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/ManifestSerializer.php
    use function count;
    use function file_put_contents;
    use function str_repeat;
    class ManifestSerializer {
    public function serializeToFile(Manifest $manifest, string $filename): void {
    public function serializeToString(Manifest $manifest): string {
    private function startDocument(): void {
    private function finishDocument(): string {
    private function addContains(ApplicationName $name, Version $version, Type $type): void {
    private function addCopyright(CopyrightInformation $copyrightInformation): void {
    private function addRequirements(RequirementCollection $requirementCollection): void {
    private function addBundles(BundledComponentCollection $bundledComponentCollection): void {
    private function addExtension(ApplicationName $applicationName, VersionConstraint $versionConstraint): void {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/Application.php
    class Application extends Type {
    public function isApplication(): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/ApplicationName.php
    use function preg_match;
    use function sprintf;
    class ApplicationName {
    public function __construct(string $name) {
    public function asString(): string {
    public function isEqual(ApplicationName $name): bool {
    private function ensureValidFormat(string $name): void {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/Author.php
    use function sprintf;
    class Author {
    public function __construct(string $name, ?Email $email = null) {
    public function asString(): string {
    public function getName(): string {
    public function hasEmail(): bool {
    public function getEmail(): Email {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/AuthorCollection.php
    use function count;
    class AuthorCollection implements Countable, IteratorAggregate {
    public function add(Author $author): void {
    public function getAuthors(): array {
    public function count(): int {
    public function getIterator(): AuthorCollectionIterator {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/AuthorCollectionIterator.php
    use function count;
    class AuthorCollectionIterator implements Iterator {
    public function __construct(AuthorCollection $authors) {
    public function rewind(): void {
    public function valid(): bool {
    public function key(): int {
    public function current(): Author {
    public function next(): void {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/BundledComponent.php
    class BundledComponent {
    public function __construct(string $name, Version $version) {
    public function getName(): string {
    public function getVersion(): Version {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/BundledComponentCollection.php
    use function count;
    class BundledComponentCollection implements Countable, IteratorAggregate {
    public function add(BundledComponent $bundledComponent): void {
    public function getBundledComponents(): array {
    public function count(): int {
    public function getIterator(): BundledComponentCollectionIterator {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/BundledComponentCollectionIterator.php
    use function count;
    class BundledComponentCollectionIterator implements Iterator {
    public function __construct(BundledComponentCollection $bundledComponents) {
    public function rewind(): void {
    public function valid(): bool {
    public function key(): int {
    public function current(): BundledComponent {
    public function next(): void {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/CopyrightInformation.php
    class CopyrightInformation {
    public function __construct(AuthorCollection $authors, License $license) {
    public function getAuthors(): AuthorCollection {
    public function getLicense(): License {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/Email.php
    use function filter_var;
    class Email {
    public function __construct(string $email) {
    public function asString(): string {
    private function ensureEmailIsValid(string $url): void {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/Extension.php
    class Extension extends Type {
    public function __construct(ApplicationName $application, VersionConstraint $versionConstraint) {
    public function getApplicationName(): ApplicationName {
    public function getVersionConstraint(): VersionConstraint {
    public function isExtension(): bool {
    public function isExtensionFor(ApplicationName $name): bool {
    public function isCompatibleWith(ApplicationName $name, Version $version): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/Library.php
    class Library extends Type {
    public function isLibrary(): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/License.php
    class License {
    public function __construct(string $name, Url $url) {
    public function getName(): string {
    public function getUrl(): Url {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/Manifest.php
    class Manifest {
    public function __construct(ApplicationName $name, Version $version, Type $type, CopyrightInformation $copyrightInformation, RequirementCollection $requirements, BundledComponentCollection $bundledComponents) {
    public function getName(): ApplicationName {
    public function getVersion(): Version {
    public function getType(): Type {
    public function getCopyrightInformation(): CopyrightInformation {
    public function getRequirements(): RequirementCollection {
    public function getBundledComponents(): BundledComponentCollection {
    public function isApplication(): bool {
    public function isLibrary(): bool {
    public function isExtension(): bool {
    public function isExtensionFor(ApplicationName $application, ?Version $version = null): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/PhpExtensionRequirement.php
    class PhpExtensionRequirement implements Requirement {
    public function __construct(string $extension) {
    public function asString(): string {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/PhpVersionRequirement.php
    class PhpVersionRequirement implements Requirement {
    public function __construct(VersionConstraint $versionConstraint) {
    public function getVersionConstraint(): VersionConstraint {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/Requirement.php
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/RequirementCollection.php
    use function count;
    class RequirementCollection implements Countable, IteratorAggregate {
    public function add(Requirement $requirement): void {
    public function getRequirements(): array {
    public function count(): int {
    public function getIterator(): RequirementCollectionIterator {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/RequirementCollectionIterator.php
    use function count;
    class RequirementCollectionIterator implements Iterator {
    public function __construct(RequirementCollection $requirements) {
    public function rewind(): void {
    public function valid(): bool {
    public function key(): int {
    public function current(): Requirement {
    public function next(): void {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/Type.php
    abstract class Type {
    public static function application(): Application {
    public static function library(): Library {
    public static function extension(ApplicationName $application, VersionConstraint $versionConstraint): Extension {
    public function isApplication(): bool {
    public function isLibrary(): bool {
    public function isExtension(): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/values/Url.php
    use function filter_var;
    class Url {
    public function __construct(string $url) {
    public function asString(): string {
    private function ensureUrlIsValid(string $url): void {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/AuthorElement.php
    class AuthorElement extends ManifestElement {
    public function getName(): string {
    public function getEmail(): string {
    public function hasEMail(): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/AuthorElementCollection.php
    class AuthorElementCollection extends ElementCollection {
    public function current(): AuthorElement {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/BundlesElement.php
    class BundlesElement extends ManifestElement {
    public function getComponentElements(): ComponentElementCollection {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/ComponentElement.php
    class ComponentElement extends ManifestElement {
    public function getName(): string {
    public function getVersion(): string {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/ComponentElementCollection.php
    class ComponentElementCollection extends ElementCollection {
    public function current(): ComponentElement {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/ContainsElement.php
    class ContainsElement extends ManifestElement {
    public function getName(): string {
    public function getVersion(): string {
    public function getType(): string {
    public function getExtensionElement(): ExtensionElement {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/CopyrightElement.php
    class CopyrightElement extends ManifestElement {
    public function getAuthorElements(): AuthorElementCollection {
    public function getLicenseElement(): LicenseElement {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/ElementCollection.php
    use function count;
    use function get_class;
    use function sprintf;
    abstract class ElementCollection implements Iterator {
    public function __construct(DOMNodeList $nodeList) {
    abstract public function current();
    public function next(): void {
    public function key(): int {
    public function valid(): bool {
    public function rewind(): void {
    protected function getCurrentElement(): DOMElement {
    private function importNodes(DOMNodeList $nodeList): void {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/ExtElement.php
    class ExtElement extends ManifestElement {
    public function getName(): string {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/ExtElementCollection.php
    class ExtElementCollection extends ElementCollection {
    public function current(): ExtElement {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/ExtensionElement.php
    class ExtensionElement extends ManifestElement {
    public function getFor(): string {
    public function getCompatible(): string {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/LicenseElement.php
    class LicenseElement extends ManifestElement {
    public function getType(): string {
    public function getUrl(): string {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/ManifestDocument.php
    use function count;
    use function file_get_contents;
    use function is_file;
    use function libxml_clear_errors;
    use function libxml_get_errors;
    use function libxml_use_internal_errors;
    use function sprintf;
    class ManifestDocument {
    public static function fromFile(string $filename): ManifestDocument {
    public static function fromString(string $xmlString): ManifestDocument {
    private function __construct(DOMDocument $dom) {
    public function getContainsElement(): ContainsElement {
    public function getCopyrightElement(): CopyrightElement {
    public function getRequiresElement(): RequiresElement {
    public function hasBundlesElement(): bool {
    public function getBundlesElement(): BundlesElement {
    private function ensureCorrectDocumentType(DOMDocument $dom): void {
    private function fetchElementByName(string $elementName): DOMElement {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/ManifestElement.php
    use function sprintf;
    class ManifestElement {
    public function __construct(DOMElement $element) {
    protected function getAttributeValue(string $name): string {
    protected function hasAttribute(string $name): bool {
    protected function getChildByName(string $elementName): DOMElement {
    protected function getChildrenByName(string $elementName): DOMNodeList {
    protected function hasChild(string $elementName): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/PhpElement.php
    class PhpElement extends ManifestElement {
    public function getVersion(): string {
    public function hasExtElements(): bool {
    public function getExtElements(): ExtElementCollection {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/src/xml/RequiresElement.php
    class RequiresElement extends ManifestElement {
    public function getPHPElement(): PhpElement {
--------------------------------------------
Fichier : ./vendor/phar-io/manifest/tools/php-cs-fixer.d/PhpdocSingleLineVarFixer.php
    class PhpdocSingleLineVarFixer implements FixerInterface {
    public function getDefinition(): FixerDefinition {
    public function isCandidate(Tokens $tokens): bool {
    public function isRisky(): bool {
    public function fix(\SplFileInfo $file, Tokens $tokens): void {
    public function getPriority(): int {
    public function getName(): string {
    public function supports(\SplFileInfo $file): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/BuildMetaData.php
    class BuildMetaData {
    public function __construct(string $value) {
    public function asString(): string {
    public function equals(BuildMetaData $other): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/constraints/AbstractVersionConstraint.php
    abstract class AbstractVersionConstraint implements VersionConstraint {
    public function __construct(string $originalValue) {
    public function asString(): string {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/constraints/AndVersionConstraintGroup.php
    class AndVersionConstraintGroup extends AbstractVersionConstraint {
    public function __construct(string $originalValue, array $constraints) {
    public function complies(Version $version): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/constraints/AnyVersionConstraint.php
    class AnyVersionConstraint implements VersionConstraint {
    public function complies(Version $version): bool {
    public function asString(): string {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/constraints/ExactVersionConstraint.php
    class ExactVersionConstraint extends AbstractVersionConstraint {
    public function complies(Version $version): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/constraints/GreaterThanOrEqualToVersionConstraint.php
    class GreaterThanOrEqualToVersionConstraint extends AbstractVersionConstraint {
    public function __construct(string $originalValue, Version $minimalVersion) {
    public function complies(Version $version): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/constraints/OrVersionConstraintGroup.php
    class OrVersionConstraintGroup extends AbstractVersionConstraint {
    public function __construct($originalValue, array $constraints) {
    public function complies(Version $version): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/constraints/SpecificMajorAndMinorVersionConstraint.php
    class SpecificMajorAndMinorVersionConstraint extends AbstractVersionConstraint {
    public function __construct(string $originalValue, int $major, int $minor) {
    public function complies(Version $version): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/constraints/SpecificMajorVersionConstraint.php
    class SpecificMajorVersionConstraint extends AbstractVersionConstraint {
    public function __construct(string $originalValue, int $major) {
    public function complies(Version $version): bool {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/constraints/VersionConstraint.php
    public function complies(Version $version): bool;
    public function asString(): string;
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/exceptions/Exception.php
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/exceptions/InvalidPreReleaseSuffixException.php
    class InvalidPreReleaseSuffixException extends \Exception implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/exceptions/InvalidVersionException.php
    class InvalidVersionException extends \InvalidArgumentException implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/exceptions/NoBuildMetaDataException.php
    class NoBuildMetaDataException extends \Exception implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/exceptions/NoPreReleaseSuffixException.php
    class NoPreReleaseSuffixException extends \Exception implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/exceptions/UnsupportedVersionConstraintException.php
    final class UnsupportedVersionConstraintException extends \RuntimeException implements Exception {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/PreReleaseSuffix.php
    class PreReleaseSuffix {
    public function __construct(string $value) {
    public function asString(): string {
    public function getValue(): string {
    public function getNumber(): ?int {
    public function isGreaterThan(PreReleaseSuffix $suffix): bool {
    private function mapValueToScore(string $value): int {
    private function parseValue(string $value): void {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/Version.php
    class Version {
    public function __construct(string $versionString) {
    public function getPreReleaseSuffix(): PreReleaseSuffix {
    public function getOriginalString(): string {
    public function getVersionString(): string {
    public function hasPreReleaseSuffix(): bool {
    public function equals(Version $other): bool {
    public function isGreaterThan(Version $version): bool {
    public function getMajor(): VersionNumber {
    public function getMinor(): VersionNumber {
    public function getPatch(): VersionNumber {
    public function hasBuildMetaData(): bool {
    public function getBuildMetaData(): BuildMetaData {
    private function parseVersion(array $matches): void {
    private function ensureVersionStringIsValid($version): void {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/VersionConstraintParser.php
    class VersionConstraintParser {
    public function parse(string $value): VersionConstraint {
    private function handleOrGroup(string $value): OrVersionConstraintGroup {
    private function handleTildeOperator(string $value): AndVersionConstraintGroup {
    private function handleCaretOperator(string $value): AndVersionConstraintGroup {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/VersionConstraintValue.php
    class VersionConstraintValue {
    public function __construct(string $versionString) {
    public function getLabel(): string {
    public function getBuildMetaData(): string {
    public function getVersionString(): string {
    public function getMajor(): VersionNumber {
    public function getMinor(): VersionNumber {
    public function getPatch(): VersionNumber {
    private function parseVersion(string $versionString): void {
    private function extractBuildMetaData(string &$versionString): void {
    private function extractLabel(string &$versionString): void {
    private function stripPotentialVPrefix(string &$versionString): void {
--------------------------------------------
Fichier : ./vendor/phar-io/version/src/VersionNumber.php
    class VersionNumber {
    public function __construct(?int $value) {
    public function isAny(): bool {
    public function getValue(): ?int {
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/get_oauth_token.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-af.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-ar.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-as.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-az.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-ba.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-be.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-bg.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-bn.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-ca.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-cs.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-da.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-de.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-el.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-eo.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-es.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-et.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-fa.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-fi.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-fo.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-fr.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-gl.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-he.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-hi.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-hr.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-hu.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-hy.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-id.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-it.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-ja.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-ka.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-ko.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-ku.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-lt.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-lv.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-mg.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-mn.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-ms.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-nb.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-nl.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-pl.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-pt.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-pt_br.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-ro.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-ru.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-si.php
    $PHPMAILER_LANG['instantiate']          = 'mail function එක ක්‍රියාත්මක කළ නොහැක.';
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-sk.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-sl.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-sr.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-sr_latn.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-sv.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-tl.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-tr.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-uk.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-ur.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-vi.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-zh.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/language/phpmailer.lang-zh_cn.php
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/src/DSNConfigurator.php
    class DSNConfigurator
    public static function mailer($dsn, $exceptions = null)
    public function configure(PHPMailer $mailer, $dsn)
    private function parseDSN($dsn)
    private function applyConfig(PHPMailer $mailer, $config)
    private function configureSMTP($mailer, $config)
    private function configureOptions(PHPMailer $mailer, $options)
    * Wrapper for the built-in parse_url function to work around a bug in PHP 5.5.
    protected function parseUrl($url)
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/src/Exception.php
    class Exception extends \Exception
    public function errorMessage()
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/src/OAuth.php
    class OAuth implements OAuthTokenProvider
    public function __construct($options)
    protected function getGrant()
    protected function getToken()
    public function getOauth64()
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/src/OAuthTokenProvider.php
    public function getOauth64();
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/src/PHPMailer.php
    class PHPMailer
    * SMTP class debug output mode.
    * Callback Action function name.
    * The function that handles the result of the send email action.
    public $action_function = '';
    public function __construct($exceptions = null)
    public function __destruct()
    private function mailPassthru($to, $subject, $body, $header, $params)
    //Check overloading of mail function to avoid double-encoding
    protected function edebug($str)
    //Avoid clash with built-in function names
    public function isHTML($isHtml = true)
    public function isSMTP()
    public function isMail()
    public function isSendmail()
    public function isQmail()
    public function addAddress($address, $name = '')
    public function addCC($address, $name = '')
    public function addBCC($address, $name = '')
    public function addReplyTo($address, $name = '')
    protected function addOrEnqueueAnAddress($kind, $address, $name)
    public function setBoundaries()
    protected function addAnAddress($kind, $address, $name = '')
    * Uses the imap_rfc822_parse_adrlist function if the IMAP extension is available.
    public static function parseAddresses($addrstr, $useimap = true, $charset = self::CHARSET_ISO88591)
    public function setFrom($address, $name = '', $auto = true)
    public function getLastMessageID()
    public static function validateAddress($address, $patternselect = null)
    public static function idnSupported()
    * This function silently returns unmodified address if:
    public function punyencodeAddress($address)
    public function send()
    public function preSend()
    public function postSend()
    protected function sendmailSend($header, $body)
    protected static function isShellSafe($string)
    protected static function isPermittedPath($path)
    protected static function fileIsAccessible($path)
    protected function mailSend($header, $body)
    * Override this function to load your own SMTP implementation,
    public function getSMTPInstance()
    public function setSMTPInstance(SMTP $smtp)
    public function setSMTPXclientAttribute($name, $value)
    public function getSMTPXclientAttributes()
    protected function smtpSend($header, $body)
    public function smtpConnect($options = null)
    public function smtpClose()
    public function setLanguage($langcode = 'en', $lang_path = '')
    public function getTranslations()
    public function addrAppend($type, $addr)
    public function addrFormat($addr)
    public function wrapText($message, $length, $qp_mode = false)
    public function utf8CharBoundary($encodedText, $maxLength)
    public function setWordWrap()
    public function createHeader()
    public function getMailMIME()
    public function getSentMIMEMessage()
    protected function generateId()
    public function createBody()
    public function getBoundaries()
    protected function getBoundary($boundary, $charSet, $contentType, $encoding)
    protected function endBoundary($boundary)
    protected function setMessageType()
    public function headerLine($name, $value)
    public function textLine($value)
    public function addAttachment(
    public function getAttachments()
    protected function attachAll($disposition_type, $boundary)
    protected function encodeFile($path, $encoding = self::ENCODING_BASE64)
    public function encodeString($str, $encoding = self::ENCODING_BASE64)
    public function encodeHeader($str, $position = 'text')
    //Use a custom function which correctly encodes and wraps long
    public function hasMultiBytes($str)
    public function has8bitChars($text)
    * Adapted from a function by paravoid.
    public function base64EncodeWrapMB($str, $linebreak = null)
    public function encodeQP($string)
    public function encodeQ($str, $position = 'text')
    public function addStringAttachment(
    public function addEmbeddedImage(
    public function addStringEmbeddedImage(
    protected function validateEncoding($encoding)
    protected function cidExists($cid)
    public function inlineImageExists()
    public function attachmentExists()
    public function alternativeExists()
    public function clearQueuedAddresses($kind)
    static function ($params) use ($kind) {
    public function clearAddresses()
    public function clearCCs()
    public function clearBCCs()
    public function clearReplyTos()
    public function clearAllRecipients()
    public function clearAttachments()
    public function clearCustomHeaders()
    public function clearCustomHeader($name, $value = null)
    public function replaceCustomHeader($name, $value = null)
    protected function setError($msg)
    public static function rfcDate()
    protected function serverHostname()
    public static function isValidHost($host)
    protected function addressHasUnicodeLocalPart($address)
    protected function anyAddressHasUnicodeLocalPart($addresses)
    public function needsSMTPUTF8()
    protected function lang($key)
    private function getSmtpErrorMessage($base_key)
    public function isError()
    public function addCustomHeader($name, $value = null)
    public function getCustomHeaders()
    public function msgHTML($message, $basedir = '', $advanced = false)
    * Note - older versions of this function used a bundled advanced converter
    public function html2text($html, $advanced = false)
    public static function _mime_types($ext = '')
    public static function filenameToType($filename)
    public static function mb_pathinfo($path, $options = null)
    * You should avoid this function - it's more verbose, less efficient, more error-prone and
    public function set($name, $value = '')
    public function secureHeader($str)
    public static function normalizeBreaks($text, $breaktype = null)
    public static function stripTrailingWSP($text)
    public static function stripTrailingBreaks($text)
    public static function getLE()
    protected static function setLE($le)
    public function sign($cert_filename, $key_filename, $key_pass, $extracerts_filename = '')
    public function DKIM_QP($txt)
    public function DKIM_Sign($signHeader)
    public function DKIM_HeaderC($signHeader)
    public function DKIM_BodyC($body)
    public function DKIM_Add($headers_line, $subject, $body)
    public static function hasLineLongerThanMax($str)
    public static function quotedString($str)
    public function getToAddresses()
    public function getCcAddresses()
    public function getBccAddresses()
    public function getReplyToAddresses()
    public function getAllRecipientAddresses()
    protected function doCallback($isSent, $to, $cc, $bcc, $subject, $body, $from, $extra)
    public function getOAuth()
    public function setOAuth(OAuthTokenProvider $oauth)
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/src/POP3.php
    * 1) This class does not support APOP authentication.
    * 4) This POP3 class is deliberately lightweight and incomplete, implementing just
    *   If you want a more complete class there are other POP3 classes for PHP available.
    class POP3
    * POP3 class debug output mode.
    public static function popBeforeSmtp(
    public function authorise($host, $port = false, $timeout = false, $username = '', $password = '', $debug_level = 0)
    public function connect($host, $port = false, $tval = 30)
    set_error_handler(function () {
    public function login($username = '', $password = '')
    public function disconnect()
    protected function getResponse($size = 128)
    protected function sendString($string)
    protected function checkResponse($string)
    protected function setError($error)
    public function getErrors()
    protected function catchWarning($errno, $errstr, $errfile, $errline)
--------------------------------------------
Fichier : ./vendor/phpmailer/phpmailer/src/SMTP.php
    class SMTP
    * This needs to be quite high to function correctly with hosts using greetdelay as an anti-spam measure.
    protected function edebug($str, $level = 0)
    //Avoid clash with built-in function names
    public function connect($host, $port = null, $timeout = 30, $options = [])
    protected function getSMTPConnection($host, $port = null, $timeout = 30, $options = [])
    set_error_handler(function () {
    set_error_handler(function () {
    public function startTLS()
    set_error_handler(function () {
    public function authenticate(
    * in case that function is not available.
    protected function hmac($data, $key)
    public function connected()
    * Don't use this function without first trying to use QUIT.
    public function close()
    public function data($msg_data)
    public function hello($host = '')
    protected function sendHello($hello, $host)
    protected function parseHelloFields($type)
    public function mail($from)
    public function quit($close_on_error = true)
    public function recipient($address, $dsn = '')
    public function xclient(array $vars)
    public function reset()
    protected function sendCommand($command, $commandstring, $expect)
    public function sendAndMail($from)
    public function verify($name)
    public function noop()
    * This is an optional command for SMTP that this class does not support.
    public function turn()
    public function client_send($data, $command = '')
    set_error_handler(function () {
    public function getError()
    public function getServerExtList()
    public function getServerExt($name)
    public function getLastReply()
    protected function get_lines()
    set_error_handler(function () {
    public function setVerp($enabled = false)
    public function getVerp()
    public function setSMTPUTF8($enabled = false)
    public function getSMTPUTF8()
    protected function setError($message, $detail = '', $smtp_code = '', $smtp_code_ex = '')
    public function setDebugOutput($method = 'echo')
    public function getDebugOutput()
    public function setDebugLevel($level = 0)
    public function getDebugLevel()
    public function setTimeout($timeout = 0)
    public function getTimeout()
    protected function errorHandler($errno, $errmsg, $errfile = '', $errline = 0)
    protected function recordLastTransactionID()
    public function getLastTransactionID()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/ArrayEnabled.php
    private static function initialiseHelper($arguments): void
    * Handles array argument processing when the function accepts a single argument that can be an array argument.
    protected static function evaluateSingleArgumentArray(callable $method, array $values): array
    * Handles array argument processing when the function accepts multiple arguments,
    protected static function evaluateArrayArguments(callable $method, mixed ...$arguments): array
    * Handles array argument processing when the function accepts multiple arguments,
    protected static function evaluateArrayArgumentsSubset(callable $method, int $limit, mixed ...$arguments): array
    private static function testFalse(mixed $value): bool
    * Handles array argument processing when the function accepts multiple arguments,
    protected static function evaluateArrayArgumentsSubsetFrom(callable $method, int $start, mixed ...$arguments): array
    * Handles array argument processing when the function accepts multiple arguments,
    protected static function evaluateArrayArgumentsIgnore(callable $method, int $ignore, mixed ...$arguments): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/BinaryComparison.php
    class BinaryComparison
    private static function strcmpLowercaseFirst(?string $str1, ?string $str2): int
    private static function strcmpAllowNull(?string $str1, ?string $str2): int
    public static function compare(mixed $operand1, mixed $operand2, string $operator): bool
    private static function evaluateComparison(mixed $operand1, mixed $operand2, string $operator, bool $useLowercaseFirstComparison): bool
    private static function equal(mixed $operand1, mixed $operand2): bool
    private static function greaterThanOrEqual(mixed $operand1, mixed $operand2, bool $useLowercaseFirstComparison): bool
    private static function lessThanOrEqual(mixed $operand1, mixed $operand2, bool $useLowercaseFirstComparison): bool
    private static function greaterThan(mixed $operand1, mixed $operand2, bool $useLowercaseFirstComparison): bool
    private static function lessThan(mixed $operand1, mixed $operand2, bool $useLowercaseFirstComparison): bool
    private static function notEqual(mixed $operand1, mixed $operand2): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Calculation.php
    class Calculation
    //    Strip xlfn and xlws prefixes from function name
    * Locale-specific argument separator for function arguments.
    public static function getLocaleBoolean(string $index): string
    public static function keyInExcelConstants(string $key): bool
    public static function getExcelConstants(string $key): bool|null
    public function __construct(?Spreadsheet $spreadsheet = null)
    private static function loadLocales(): void
    public static function getInstance(?Spreadsheet $spreadsheet = null): self
    public function flushInstance(): void
    public function getDebugLog(): Logger
    final public function __clone()
    public static function getTRUE(): string
    public static function getFALSE(): string
    public static function setArrayReturnType(string $returnType): bool
    public static function getArrayReturnType(): string
    public function setInstanceArrayReturnType(string $returnType): bool
    public function getInstanceArrayReturnType(): string
    public function getCalculationCacheEnabled(): bool
    public function setCalculationCacheEnabled(bool $calculationCacheEnabled): void
    public function enableCalculationCache(): void
    public function disableCalculationCache(): void
    public function clearCalculationCache(): void
    public function clearCalculationCacheForWorksheet(string $worksheetName): void
    public function renameCalculationCacheForWorksheet(string $fromWorksheetName, string $toWorksheetName): void
    public function setBranchPruningEnabled(mixed $enabled): void
    public function enableBranchPruning(): void
    public function disableBranchPruning(): void
    public function getLocale(): string
    private function getLocaleFile(string $localeDir, string $locale, string $language, string $file): string
    public function getFalseTrueArray(): array
    //    Retrieve the list of locale or language specific function names
    public function setLocale(string $locale): bool
    //    Search for a file with a list of function names for locale
    //    Retrieve the list of locale or language specific function names
    public static function translateSeparator(
    private static function translateFormulaBlock(
    // Temporarily adjust matrix separators so that they won't be confused with function arguments
    private static function translateFormula(array $from, array $to, string $formula, string $fromSeparator, string $toSeparator): string
    // Convert any Excel function names and constant names to the required language;
    //     and adjust function argument separators
    public function translateFormulaToLocale(string $formula): string
    // Build list of function names and constants for translation
    public function translateFormulaToEnglish(string $formula): string
    public static function localeFunc(string $function): string
    $function = self::$localeFunctions[$functionName];
    $function .= '(';
    public static function wrapResult(mixed $value): mixed
    public static function unwrapResult(mixed $value): mixed
    public function calculate(?Cell $cell = null): mixed
    public function calculateCellValue(?Cell $cell = null, bool $resetLog = true): mixed
    public function parseFormula(string $formula): array|bool
    public function calculateFormula(string $formula, ?string $cellID = null, ?Cell $cell = null): mixed
    public function getValueFromCache(string $cellReference, mixed &$cellValue): bool
    public function saveValueToCache(string $cellReference, mixed $cellValue): void
    public function _calculateFormulaValue(string $formula, ?string $cellID = null, ?Cell $cell = null, bool $ignoreQuotePrefix = false): mixed
    public static function checkMatrixOperands(mixed &$operand1, mixed &$operand2, int $resize = 1): array
    //    Note that this function should only be called if one or both of the operand is already an array
    public static function getMatrixDimensions(array &$matrix): array
    private static function resizeMatricesShrink(array &$matrix1, array &$matrix2, int $matrix1Rows, int $matrix1Columns, int $matrix2Rows, int $matrix2Columns): void
    private static function resizeMatricesExtend(array &$matrix1, array &$matrix2, int $matrix1Rows, int $matrix1Columns, int $matrix2Rows, int $matrix2Columns): void
    private function showValue(mixed $value): mixed
    private function showTypeDetails(mixed $value): ?string
    private function convertMatrixReferences(string $formula): false|string
    private function internalParseFormula(string $formula, ?Cell $cell = null): bool|array
    //        should be null in a function call
    $functionName = $matches[1]; //    Get the function name
    $output[] = $stack->pop(); //    Pop the function and push onto the output
    } else {    // did we somehow push a non-function on the stack? this should never happen
    return $this->raiseFormulaError('Formula Error: Internal error, non-function on stack');
    } elseif ($opCharacter === ',') { // Is this the separator for function arguments?
    // Can we inject a dummy function at this point so that the braces at least have some context
    // tests if the function is closed right after opening
    private static function dataTestReference(array &$operandData): mixed
    private function processTokenStack(mixed $tokens, ?string $cellID = null, ?Cell $cell = null)
    //    Process the argument with the appropriate function call
    $this->debugLog->writeDebugLog('Evaluation Result for %s() function call is %s', self::localeFunc($functionName), $this->showTypeDetails($result));
    private function validateBinaryOperand(mixed &$operand, mixed &$stack): bool
    private function executeArrayComparison(mixed $operand1, mixed $operand2, string $operation, Stack &$stack, bool $recursingArrays): array
    private function executeBinaryComparisonOperation(mixed $operand1, mixed $operand2, string $operation, Stack &$stack, bool $recursingArrays = false): array|bool
    private function executeNumericBinaryOperation(mixed $operand1, mixed $operand2, string $operation, Stack &$stack): mixed
    protected function raiseFormulaError(string $errorMessage, int $code = 0, ?Throwable $exception = null): bool
    public function extractCellRange(string &$range = 'A1', ?Worksheet $worksheet = null, bool $resetLog = true): array
    public function extractNamedRange(string &$range = 'A1', ?Worksheet $worksheet = null, bool $resetLog = true): string|array
    * Is a specific function implemented?
    * @param string $function Function Name
    public function isImplemented(string $function): bool
    $function = strtoupper($function);
    * Get a list of all implemented functions as an array of function objects.
    public static function getFunctions(): array
    * Get a list of implemented Excel function names.
    public function getImplementedFunctionNames(): array
    private function addDefaultArgumentValues(array $functionCall, array $args, array $emptyArguments): array
    private function getArgumentDefaultValue(ReflectionParameter $methodArgument): mixed
    private function addCellReference(array $args, bool $passCellReference, array|string $functionCall, ?Cell $cell = null): array
    private function evaluateDefinedName(Cell $cell, DefinedName $namedRange, Worksheet $cellWorksheet, Stack $stack, bool $ignoreScope = false): mixed
    public function setSuppressFormulaErrors(bool $suppressFormulaErrors): void
    public function getSuppressFormulaErrors(): bool
    public static function boolToString(mixed $operand1): mixed
    private static function isNumericOrBool(mixed $operand): bool
    private static function makeError(mixed $operand = ''): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Category.php
    abstract class Category
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DatabaseAbstract.php
    abstract class DatabaseAbstract
    abstract public static function evaluate(array $database, array|null|int|string $field, array $criteria): null|float|int|string;
    protected static function fieldExtract(array $database, mixed $field): ?int
    protected static function filter(array $database, array $criteria): array
    protected static function getFilteredColumn(array $database, ?int $field, array $criteria): array
    private static function buildQuery(array $criteriaNames, array $criteria): string
    private static function buildCondition(mixed $criterion, string $criterionName): string
    private static function executeQuery(array $database, string $query, array $criteria, array $fields): array
    private static function processCondition(string $criterion, array $fields, array $dataValues, string $conditions): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DAverage.php
    class DAverage extends DatabaseAbstract
    public static function evaluate(array $database, array|null|int|string $field, array $criteria): string|int|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DCount.php
    class DCount extends DatabaseAbstract
    public static function evaluate(array $database, array|null|int|string $field, array $criteria, bool $returnError = true): string|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DCountA.php
    class DCountA extends DatabaseAbstract
    public static function evaluate(array $database, array|null|int|string $field, array $criteria): string|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DGet.php
    class DGet extends DatabaseAbstract
    public static function evaluate(array $database, array|null|int|string $field, array $criteria): null|float|int|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DMax.php
    class DMax extends DatabaseAbstract
    public static function evaluate(array $database, array|null|int|string $field, array $criteria, bool $returnError = true): null|float|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DMin.php
    class DMin extends DatabaseAbstract
    public static function evaluate(array $database, array|null|int|string $field, array $criteria, bool $returnError = true): float|string|null
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DProduct.php
    class DProduct extends DatabaseAbstract
    public static function evaluate(array $database, array|null|int|string $field, array $criteria): string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DStDev.php
    class DStDev extends DatabaseAbstract
    public static function evaluate(array $database, array|null|int|string $field, array $criteria): float|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DStDevP.php
    class DStDevP extends DatabaseAbstract
    public static function evaluate(array $database, array|null|int|string $field, array $criteria): float|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DSum.php
    class DSum extends DatabaseAbstract
    public static function evaluate(array $database, array|null|int|string $field, array $criteria, bool $returnNull = false): null|float|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DVar.php
    class DVar extends DatabaseAbstract
    public static function evaluate(array $database, array|null|int|string $field, array $criteria): string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Database/DVarP.php
    class DVarP extends DatabaseAbstract
    public static function evaluate(array $database, array|null|int|string $field, array $criteria): string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/Constants.php
    class Constants
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/Current.php
    class Current
    * The NOW function is useful when you need to display the current date and time on a worksheet or
    public static function today(): DateTime|float|int|string
    * The NOW function is useful when you need to display the current date and time on a worksheet or
    public static function now(): DateTime|float|int|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/Date.php
    class Date
    * The DATE function returns a value that represents a particular date.
    public static function fromYMD(array|float|int|string $year, array|float|int|string $month, array|float|int|string $day): float|int|DateTime|string|array
    private static function getYear(mixed $year, int $baseYear): int
    private static function getMonth(mixed $month): int
    private static function getDay(mixed $day): int
    private static function adjustYearMonth(int &$year, int &$month, int $baseYear): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/DateParts.php
    class DateParts
    public static function day(mixed $dateValue): array|int|string
    public static function month(mixed $dateValue): array|string|int
    public static function year(mixed $dateValue): array|string|int
    private static function weirdCondition(mixed $dateValue): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/DateValue.php
    class DateValue
    public static function fromString(null|array|string|int|bool|float $dateValue): array|string|float|int|DateTime
    private static function t1ToString(array $t1, DateTimeImmutable $dti, bool $yearFound): string
    private static function setUpArray(string $dateValue, DateTimeImmutable $dti): array
    private static function finalResults(array $PHPDateArray, DateTimeImmutable $dti, int $baseYear): string|float|int|DateTime
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/Days.php
    class Days
    public static function between(array|DateTimeInterface|float|int|string $endDate, array|DateTimeInterface|float|int|string $startDate): array|int|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/Days360.php
    class Days360
    * which is used in some accounting calculations. Use this function to help compute payments if
    public static function between(mixed $startDate = 0, mixed $endDate = 0, mixed $method = false): array|string|int
    private static function dateDiff360(int $startDay, int $startMonth, int $startYear, int $endDay, int $endMonth, int $endYear, bool $methodUS): int
    private static function getStartDay(int $startDay, int $startMonth, int $startYear, bool $methodUS): int
    private static function getEndDay(int $endDay, int &$endMonth, int &$endYear, int $startDay, bool $methodUS): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/Difference.php
    class Difference
    public static function interval(mixed $startDate, mixed $endDate, array|string $unit = 'D')
    private static function initialDiff(float $startDate, float $endDate): float
    private static function replaceRetValue(bool|int $retVal, string $unit, string $compare): null|bool|int
    private static function datedifD(float $difference): int
    private static function datedifM(DateInterval $PHPDiffDateObject): int
    private static function datedifMD(int $startDays, int $endDays, DateTime $PHPEndDateObject, DateInterval $PHPDiffDateObject): int
    private static function datedifY(DateInterval $PHPDiffDateObject): int
    private static function datedifYD(float $difference, int $startYears, int $endYears, DateTime $PHPStartDateObject, DateTime $PHPEndDateObject): int
    private static function datedifYM(DateInterval $PHPDiffDateObject): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/Helpers.php
    class Helpers
    public static function isLeapYear(int|string $year): bool
    public static function getDateValue(mixed $dateValue, bool $allowBool = true): float
    public static function getTimeValue(string $timeValue): string|float
    public static function adjustDateByMonths(mixed $dateValue = 0, float $adjustmentMonths = 0): DateTime
    public static function replaceIfEmpty(mixed &$value, mixed $altValue): void
    public static function adjustYear(string $testVal1, string $testVal2, string &$testVal3): void
    public static function returnIn3FormatsArray(array $dateArray, bool $noFrac = false): DateTime|float|int
    public static function returnIn3FormatsFloat(float $excelDateValue): float|int|DateTime
    public static function returnIn3FormatsObject(DateTime $PHPDateObject): DateTime|float|int
    private static function baseDate(): int
    public static function nullFalseTrueToNumber(mixed &$number, bool $allowBool = true): void
    public static function validateNumericNull(mixed $number): int|float
    public static function validateNotNegative(mixed $number): float
    public static function silly1900(DateTime $PHPDateObject, string $mod = '-1 day'): void
    public static function dateParse(string $string): array
    public static function dateParseSucceeded(array $dateArray): bool
    private static function forceArray(array|bool $dateArray): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/Month.php
    class Month
    public static function adjust(mixed $dateValue, array|string|bool|float|int $adjustmentMonths): DateTime|float|int|string|array
    public static function lastDay(mixed $dateValue, array|float|int|bool|string $adjustmentMonths): array|string|DateTime|float|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/NetworkDays.php
    class NetworkDays
    public static function count(mixed $startDate, mixed $endDate, mixed ...$dateArgs): array|string|int
    //    Retrieve the mandatory start and end date that are referenced in the function definition
    private static function calcStartDow(float $startDate): int
    private static function calcEndDow(float $endDate): int
    private static function calcPartWeekDays(int $startDow, int $endDow): int
    private static function applySign(int $result, float $sDate, float $eDate): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/Time.php
    class Time
    * The TIME function returns a value that represents a particular time.
    public static function fromHMS(array|int|float|bool|null|string $hour, array|int|float|bool|null|string $minute, array|int|float|bool|null|string $second): array|string|float|int|DateTime
    private static function adjustSecond(int &$second, int &$minute): void
    private static function adjustMinute(int &$minute, int &$hour): void
    private static function toIntWithNullBool(mixed $value): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/TimeParts.php
    class TimeParts
    public static function hour(mixed $timeValue): array|string|int
    public static function minute(mixed $timeValue): array|string|int
    public static function second(mixed $timeValue): array|string|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/TimeValue.php
    class TimeValue
    public static function fromString(null|array|string|int|bool|float $timeValue): array|string|Datetime|int|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/Week.php
    class Week
    * The WEEKNUM function considers the week containing January 1 to be the first week of the year.
    * three days or less in the first week of January, the WEEKNUM function returns week numbers
    public static function number(mixed $dateValue, array|int|string|null $method = Constants::STARTWEEK_SUNDAY): array|int|string
    public static function isoWeekNumber(mixed $dateValue): array|int|string
    public static function day(null|array|float|int|string|bool $dateValue, mixed $style = 1): array|string|int
    private static function validateStyle(mixed $style): int
    private static function dow0Becomes7(int $DoW): int
    private static function apparentBug(mixed $dateValue): bool
    private static function validateDateValue(mixed $dateValue): float
    private static function validateMethod(mixed $method): int
    private static function buggyWeekNum1900(int $method): bool
    private static function buggyWeekNum1904(int $method, bool $origNull, DateTime $dateObject): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/WorkDay.php
    class WorkDay
    public static function date(mixed $startDate, array|int|string $endDays, mixed ...$dateArgs): array|float|int|DateTime|string
    //    Retrieve the mandatory start date and days that are referenced in the function definition
    private static function incrementing(float $startDate, int $endDays, array $holidayArray): float|int|DateTime
    private static function incrementingArray(float $startDate, float $endDate, array $holidayArray): float
    private static function decrementing(float $startDate, int $endDays, array $holidayArray): float|int|DateTime
    private static function decrementingArray(float $startDate, float $endDate, array $holidayArray): float
    private static function getWeekDay(float $date, int $wd): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/DateTimeExcel/YearFrac.php
    class YearFrac
    * Use the YEARFRAC worksheet function to identify the proportion of a whole year's benefits or
    public static function fraction(mixed $startDate, mixed $endDate, array|int|string|null $method = 0): array|string|int|float
    private static function excelBug(float $sDate, mixed $startDate, mixed $endDate, int $method): float
    private static function method1(float $startDate, float $endDate): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engine/ArrayArgumentHelper.php
    class ArrayArgumentHelper
    public function initialise(array $arguments): void
    public function arguments(): array
    public function hasArrayArgument(): bool
    public function getFirstArrayArgumentNumber(): int
    public function getSingleRowVector(): ?int
    private function getRowVectors(): array
    public function getSingleColumnVector(): ?int
    private function getColumnVectors(): array
    public function getMatrixPair(): array
    public function isVector(int $argument): bool
    public function isRowVector(int $argument): bool
    public function isColumnVector(int $argument): bool
    public function rowCount(int $argument): int
    public function columnCount(int $argument): int
    private function rows(array $arguments): array
    private function columns(array $arguments): array
    public function arrayArguments(): int
    private function flattenSingleCellArrays(array $arguments, array $rows, array $columns): array
    private function filterArray(array $array): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engine/ArrayArgumentProcessor.php
    class ArrayArgumentProcessor
    public static function processArguments(
    private static function evaluateVectorMatrixPair(callable $method, array $matrixIndexes, mixed ...$arguments): array
    private static function evaluateMatrixPair(callable $method, array $matrixIndexes, mixed ...$arguments): array
    private static function evaluateVectorPair(callable $method, int $rowIndex, int $columnIndex, mixed ...$arguments): array
    private static function evaluateNthArgumentAsArray(callable $method, int $nthArgument, mixed ...$arguments): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engine/BranchPruner.php
    class BranchPruner
    public function __construct(bool $branchPruningEnabled)
    public function clearBranchStore(): void
    public function initialiseForLoop(): void
    private function initialiseCondition(): void
    private function initialiseThen(): void
    private function initialiseElse(): void
    public function decrementDepth(): void
    public function incrementDepth(): void
    public function functionCall(string $functionName): void
    public function argumentSeparator(): void
    public function closingBrace(mixed $value): void
    public function currentCondition(): ?string
    public function currentOnlyIf(): ?string
    public function currentOnlyIfNot(): ?string
    private function getUnusedBranchStoreKey(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engine/CyclicReferenceStack.php
    class CyclicReferenceStack
    public function count(): int
    public function push(mixed $value): void
    public function pop(): mixed
    public function onStack(mixed $value): bool
    public function clear(): void
    public function showStack(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engine/FormattedNumber.php
    class FormattedNumber
    public static function convertToNumberIfFormatted(string &$operand): bool
    public static function convertToNumberIfNumeric(string &$operand): bool
    public static function convertToNumberIfFraction(string &$operand): bool
    public static function convertToNumberIfPercent(string &$operand): bool
    public static function convertToNumberIfCurrency(string &$operand): bool
    public static function currencyMatcherRegexp(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engine/Logger.php
    class Logger
    public function __construct(CyclicReferenceStack $stack)
    public function setWriteDebugLog(bool $writeDebugLog): void
    public function getWriteDebugLog(): bool
    public function setEchoDebugLog(bool $echoDebugLog): void
    public function getEchoDebugLog(): bool
    public function writeDebugLog(string $message, mixed ...$args): void
    public function mergeDebugLog(array $args): void
    public function clearLog(): void
    public function getLog(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engine/Operands/Operand.php
    public static function fromParser(string $formula, int $index, array $matches): self;
    public function value(): string;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engine/Operands/StructuredReference.php
    final class StructuredReference implements Operand, Stringable
    public function __construct(string $structuredReference)
    public static function fromParser(string $formula, int $index, array $matches): self
    public function parse(Cell $cell): string
    private function isRowReference(): bool
    private function getTableStructure(Cell $cell): void
    private function getTableForCell(Cell $cell): Table
    private function getTableByName(Cell $cell): Table
    private function getColumns(Cell $cell, array $tableRange): array
    private function getRowReference(Cell $cell): string
    private function adjustRowReference(string $columnName, string $reference, Cell $cell, string $columnId): string
    private function getColumnReference(): string
    private function validateParsedReference(string $reference): string
    private function fullData(int $startRow, int $endRow): string
    private function getMinimumRow(string $reference): int
    private function getMaximumRow(string $reference): int
    public function value(): string
    private function getRowsForColumnReference(string &$reference, int $startRow, int $endRow): array
    private function getColumnsForColumnReference(string $reference, int $startRow, int $endRow): string
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/BesselI.php
    class BesselI
    *    Returns the modified Bessel function In(x), which is equivalent to the Bessel function evaluated
    * NOTE: The MS Excel implementation of the BESSELI function is still not accurate.
    public static function BESSELI(mixed $x, mixed $ord): array|string|float
    private static function calculate(float $x, int $ord): float
    private static function besselI0(float $x): float
    private static function besselI1(float $x): float
    private static function besselI2(float $x, int $ord): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/BesselJ.php
    class BesselJ
    * NOTE: The MS Excel implementation of the BESSELJ function is still not accurate, particularly for higher order
    public static function BESSELJ(mixed $x, mixed $ord): array|string|float
    private static function calculate(float $x, int $ord): float
    private static function besselJ0(float $x): float
    private static function besselJ1(float $x): float
    private static function besselJ2(float $x, int $ord): float
    private static function besselj2a(float $ax, int $ord, float $x): float
    private static function besselj2b(float $ax, int $ord, float $x): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/BesselK.php
    class BesselK
    *    Returns the modified Bessel function Kn(x), which is equivalent to the Bessel functions evaluated
    public static function BESSELK(mixed $x, mixed $ord): array|string|float
    private static function calculate(float $x, int $ord): float
    private static function callBesselI(float $x, int $ord): float
    private static function besselK0(float $x): float
    private static function besselK1(float $x): float
    private static function besselK2(float $x, int $ord): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/BesselY.php
    class BesselY
    * Returns the Bessel function, which is also called the Weber function or the Neumann function.
    public static function BESSELY(mixed $x, mixed $ord): array|string|float
    private static function calculate(float $x, int $ord): float
    private static function callBesselJ(float $x, int $ord): float
    private static function besselY0(float $x): float
    private static function besselY1(float $x): float
    private static function besselY2(float $x, int $ord): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/BitWise.php
    class BitWise
    private static function splitNumber(float|int $number): array
    public static function BITAND(null|array|bool|float|int|string $number1, null|array|bool|float|int|string $number2): array|string|int|float
    public static function BITOR(null|array|bool|float|int|string $number1, null|array|bool|float|int|string $number2): array|string|int|float
    public static function BITXOR(null|array|bool|float|int|string $number1, null|array|bool|float|int|string $number2): array|string|int|float
    public static function BITLSHIFT(null|array|bool|float|int|string $number, null|array|bool|float|int|string $shiftAmount): array|string|float
    public static function BITRSHIFT(null|array|bool|float|int|string $number, null|array|bool|float|int|string $shiftAmount): array|string|float
    private static function validateBitwiseArgument(mixed $value): float
    private static function validateShiftAmount(mixed $value): int
    private static function nullFalseTrueToNumber(mixed &$number): mixed
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/Compare.php
    class Compare
    *    Use this function to filter a set of values. For example, by summing several DELTA
    *        functions you calculate the count of equal pairs. This function is also known as the
    public static function DELTA(array|float|bool|string|int $a, array|float|bool|string|int $b = 0.0): array|string|int
    *    Use this function to filter a set of values. For example, by summing several GESTEP
    public static function GESTEP(array|float|bool|string|int $number, $step = 0.0): array|string|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/Complex.php
    class Complex
    public static function COMPLEX(mixed $realNumber = 0.0, mixed $imaginary = 0.0, mixed $suffix = 'i'): array|string
    public static function IMAGINARY($complexNumber): array|string|float
    public static function IMREAL($complexNumber): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/ComplexFunctions.php
    class ComplexFunctions
    public static function IMABS(array|string $complexNumber): array|float|string
    public static function IMARGUMENT(array|string $complexNumber): array|float|string
    public static function IMCONJUGATE(array|string $complexNumber): array|string
    public static function IMCOS(array|string $complexNumber): array|string
    public static function IMCOSH(array|string $complexNumber): array|string
    public static function IMCOT(array|string $complexNumber): array|string
    public static function IMCSC(array|string $complexNumber): array|string
    public static function IMCSCH(array|string $complexNumber): array|string
    public static function IMSIN(array|string $complexNumber): array|string
    public static function IMSINH(array|string $complexNumber): array|string
    public static function IMSEC(array|string $complexNumber): array|string
    public static function IMSECH(array|string $complexNumber): array|string
    public static function IMTAN(array|string $complexNumber): array|string
    public static function IMSQRT(array|string $complexNumber): array|string
    public static function IMLN(array|string $complexNumber): array|string
    public static function IMLOG10(array|string $complexNumber): array|string
    public static function IMLOG2(array|string $complexNumber): array|string
    public static function IMEXP(array|string $complexNumber): array|string
    public static function IMPOWER(array|string $complexNumber, array|float|int|string $realNumber): array|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/ComplexOperations.php
    class ComplexOperations
    public static function IMDIV(array|string $complexDividend, array|string $complexDivisor): array|string
    public static function IMSUB(array|string $complexNumber1, array|string $complexNumber2): array|string
    public static function IMSUM(...$complexNumbers): string
    public static function IMPRODUCT(...$complexNumbers): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/Constants.php
    class Constants
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/ConvertBase.php
    abstract class ConvertBase
    protected static function validateValue(mixed $value): string
    protected static function validatePlaces(mixed $places = null): ?int
    protected static function nbrConversionFormat(string $value, ?int $places): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/ConvertBinary.php
    class ConvertBinary extends ConvertBase
    public static function toDecimal($value)
    public static function toHex($value, $places = null): array|string
    public static function toOctal($value, $places = null): array|string
    protected static function validateBinary(string $value): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/ConvertDecimal.php
    class ConvertDecimal extends ConvertBase
    public static function toBinary($value, $places = null): array|string
    public static function toHex($value, $places = null): array|string
    public static function hex32bit(float $value, string $hexstr, bool $force = false): string
    public static function toOctal($value, $places = null): array|string
    protected static function validateDecimal(string $value): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/ConvertHex.php
    class ConvertHex extends ConvertBase
    public static function toBinary($value, $places = null): array|string
    public static function toDecimal($value)
    public static function toOctal($value, $places = null): array|string
    protected static function validateHex(string $value): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/ConvertOctal.php
    class ConvertOctal extends ConvertBase
    public static function toBinary($value, $places = null): array|string
    public static function toDecimal($value)
    public static function toHex($value, $places = null): array|string
    protected static function validateOctal(string $value): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/ConvertUOM.php
    class ConvertUOM
    public static function getConversionCategories(): array
    public static function getConversionCategoryUnits(?string $category = null): array
    public static function getConversionCategoryUnitDetails(?string $category = null): array
    public static function getConversionMultipliers(): array
    public static function getBinaryConversionMultipliers(): array
    public static function CONVERT($value, $fromUOM, $toUOM)
    private static function getUOMDetails(string $uom): array
    protected static function convertTemperature(string $fromUOM, string $toUOM, float|int $value): float|int
    private static function resolveTemperatureSynonyms(string $uom): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/EngineeringValidations.php
    class EngineeringValidations
    public static function validateFloat(mixed $value): float
    public static function validateInt(mixed $value): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/Erf.php
    class Erf
    * Returns the error function integrated between the lower and upper bound arguments.
    *            the function would return a #NUM! error. However, in Excel 2010, the function algorithm was
    *            improved, so that it can now calculate the function for both positive and negative ranges.
    public static function ERF(mixed $lower, mixed $upper = null): array|float|string
    * Returns the error function integrated between the lower and upper bound arguments.
    public static function ERFPRECISE(mixed $limit)
    private static function makeFloat(mixed $value): float
    public static function erfValue(float|int|string $value): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Engineering/ErfC.php
    class ErfC
    *    Returns the complementary ERF function integrated between x and infinity
    *        the function would return a #NUM! error. However, in Excel 2010, the function algorithm was
    *        improved, so that it can now calculate the function for both positive and negative x values.
    public static function ERFC(mixed $value)
    private static function erfcValue(float|int|string $value): float|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Exception.php
    class Exception extends PhpSpreadsheetException
    public static function errorHandlerCallback(int $code, string $string, string $file, int $line): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/ExceptionHandler.php
    class ExceptionHandler
    public function __construct()
    public function __destruct()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/Amortization.php
    class Amortization
    * This function is provided for the French accounting system. If an asset is purchased in
    * The function is similar to AMORLINC, except that a depreciation coefficient is applied in
    * This function will return the depreciation until the last period of the life of the assets
    public static function AMORDEGRC(
    * This function is provided for the French accounting system. If an asset is purchased in
    public static function AMORLINC(
    private static function getAmortizationCoefficient(float $rate): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/CashFlow/CashFlowValidations.php
    class CashFlowValidations extends FinancialValidations
    public static function validateRate(mixed $rate): float
    public static function validatePeriodType(mixed $type): int
    public static function validatePresentValue(mixed $presentValue): float
    public static function validateFutureValue(mixed $futureValue): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/CashFlow/Constant/Periodic/Cumulative.php
    class Cumulative
    public static function interest(
    public static function principal(
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/CashFlow/Constant/Periodic/Interest.php
    class Interest
    public static function payment(
    public static function schedulePayment(mixed $interestRate, mixed $period, mixed $numberOfPeriods, mixed $principleRemaining): string|float
    public static function rate(
    private static function rateNextGuess(float $rate, float $numberOfPeriods, float $payment, float $presentValue, float $futureValue, int $type): string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/CashFlow/Constant/Periodic/InterestAndPrincipal.php
    class InterestAndPrincipal
    public function __construct(
    public function interest(): float
    public function principal(): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/CashFlow/Constant/Periodic/Payments.php
    class Payments
    public static function annuity(
    public static function interestPayment(
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/CashFlow/Constant/Periodic.php
    class Periodic
    public static function futureValue(
    public static function presentValue(
    public static function periods(
    private static function calculateFutureValue(
    private static function calculatePresentValue(
    private static function calculatePeriods(
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/CashFlow/Single.php
    class Single
    public static function futureValue(mixed $principal, array $schedule): string|float
    public static function periods(mixed $rate, mixed $presentValue, mixed $futureValue): string|float
    public static function interestRate(array|float $periods = 0.0, array|float $presentValue = 0.0, array|float $futureValue = 0.0): string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/CashFlow/Variable/NonPeriodic.php
    class NonPeriodic
    public static function rate(array $values, array $dates, mixed $guess = self::DEFAULT_GUESS): float|string
    public static function presentValue(array|float $rate, array $values, array $dates): float|string
    private static function bothNegAndPos(bool $neg, bool $pos): bool
    private static function xirrPart1(mixed &$values, mixed &$dates): string
    private static function xirrPart2(array &$values): string
    private static function xirrPart3(array $values, array $dates, float $x1, float $x2): float|string
    private static function xirrBisection(array $values, array $dates, float $x1, float $x2): string|float
    private static function xnpvOrdered(mixed $rate, mixed $values, mixed $dates, bool $ordered = true, bool $capAtNegative1 = false): float|string
    private static function validateXnpv(mixed $rate, array $values, array $dates): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/CashFlow/Variable/Periodic.php
    class Periodic
    public static function rate(mixed $values, mixed $guess = 0.1): string|float
    public static function modifiedRate(mixed $values, mixed $financeRate, mixed $reinvestmentRate): string|float
    public static function presentValue(mixed $rate, ...$args): int|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/Constants.php
    class Constants
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/Coupons.php
    class Coupons
    public static function COUPDAYBS(
    public static function COUPDAYS(
    public static function COUPDAYSNC(
    public static function COUPNCD(
    public static function COUPNUM(
    public static function COUPPCD(
    private static function monthsDiff(DateTime $result, int $months, string $plusOrMinus, int $day, bool $lastDayFlag): void
    private static function couponFirstPeriodDate(float $settlement, float $maturity, int $frequency, bool $next): float
    private static function validateCouponPeriod(float $settlement, float $maturity): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/Depreciation.php
    class Depreciation
    public static function DB(mixed $cost, mixed $salvage, mixed $life, mixed $period, mixed $month = 12): string|float|int
    public static function DDB(mixed $cost, mixed $salvage, mixed $life, mixed $period, mixed $factor = 2.0): float|string
    public static function SLN(mixed $cost, mixed $salvage, mixed $life): string|float
    public static function SYD(mixed $cost, mixed $salvage, mixed $life, mixed $period): string|float
    private static function validateCost(mixed $cost, bool $negativeValueAllowed = false): float
    private static function validateSalvage(mixed $salvage, bool $negativeValueAllowed = false): float
    private static function validateLife(mixed $life, bool $negativeValueAllowed = false): float
    private static function validatePeriod(mixed $period, bool $negativeValueAllowed = false): float
    private static function validateMonth(mixed $month): int
    private static function validateFactor(mixed $factor): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/Dollar.php
    class Dollar
    * This function converts a number to text using currency format, with the decimals rounded to the specified place.
    public static function format(mixed $number, mixed $precision = 2)
    public static function decimal(mixed $fractionalDollar = null, mixed $fraction = 0): array|string|float
    public static function fractional(mixed $decimalDollar = null, mixed $fraction = 0): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/FinancialValidations.php
    class FinancialValidations
    public static function validateDate(mixed $date): float
    public static function validateSettlementDate(mixed $settlement): float
    public static function validateMaturityDate(mixed $maturity): float
    public static function validateFloat(mixed $value): float
    public static function validateInt(mixed $value): int
    public static function validateRate(mixed $rate): float
    public static function validateFrequency(mixed $frequency): int
    public static function validateBasis(mixed $basis): int
    public static function validatePrice(mixed $price): float
    public static function validateParValue(mixed $parValue): float
    public static function validateYield(mixed $yield): float
    public static function validateDiscount(mixed $discount): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/Helpers.php
    class Helpers
    public static function daysPerYear($year, $basis = 0): string|int
    public static function isLastDayOfMonth(DateTimeInterface $date): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/InterestRate.php
    class InterestRate
    public static function effective(mixed $nominalRate = 0, mixed $periodsPerYear = 0): string|float
    public static function nominal(mixed $effectiveRate = 0, mixed $periodsPerYear = 0): string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/Securities/AccruedInterest.php
    class AccruedInterest
    public static function periodic(
    public static function atMaturity(
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/Securities/Price.php
    class Price
    public static function price(
    public static function priceDiscounted(
    public static function priceAtMaturity(
    public static function received(
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/Securities/Rates.php
    class Rates
    public static function discount(
    public static function interest(
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/Securities/SecurityValidations.php
    class SecurityValidations extends FinancialValidations
    public static function validateIssueDate(mixed $issue): float
    public static function validateSecurityPeriod(mixed $settlement, mixed $maturity): void
    public static function validateRedemption(mixed $redemption): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/Securities/Yields.php
    class Yields
    public static function yieldDiscounted(
    public static function yieldAtMaturity(
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Financial/TreasuryBill.php
    class TreasuryBill
    public static function bondEquivalentYield(mixed $settlement, mixed $maturity, mixed $discount): string|float
    public static function price(mixed $settlement, mixed $maturity, mixed $discount): string|float
    public static function yield(mixed $settlement, mixed $maturity, $price): string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/FormulaParser.php
    class FormulaParser
    public function __construct(?string $formula = '')
    public function getFormula(): string
    public function getToken(int $id = 0): FormulaToken
    public function getTokenCount(): int
    public function getTokens(): array
    private function parseToTokens(): void
    // to noop when appropriate, identifying operand and infix-operator subtypes, and pulling "@" from function names
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/FormulaToken.php
    class FormulaToken
    public function __construct(string $value, string $tokenType = self::TOKEN_TYPE_UNKNOWN, string $tokenSubType = self::TOKEN_SUBTYPE_NOTHING)
    public function getValue(): string
    public function setValue(string $value): void
    public function getTokenType(): string
    public function setTokenType(string $value): void
    public function getTokenSubType(): string
    public function setTokenSubType(string $value): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Functions.php
    class Functions
    public static function setCompatibilityMode(string $compatibilityMode): bool
    public static function getCompatibilityMode(): string
    public static function setReturnDateType(string $returnDateType): bool
    public static function getReturnDateType(): string
    public static function DUMMY(): string
    public static function isMatrixValue(mixed $idx): bool
    public static function isValue(mixed $idx): bool
    public static function isCellValue(mixed $idx): bool
    public static function ifCondition(mixed $condition): string
    private static function operandSpecialHandling(mixed $operand): mixed
    public static function flattenArray(mixed $array): array
    public static function flattenArray2(mixed ...$array): array
    public static function scalar(mixed $value): mixed
    public static function flattenArrayIndexed($array): array
    public static function flattenSingleValue(mixed $value): mixed
    public static function expandDefinedName(string $coordinate, Cell $cell): string
    public static function trimTrailingRange(string $coordinate): string
    public static function trimSheetFromCellReference(string $coordinate): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Information/ErrorValue.php
    class ErrorValue
    public static function isErr(mixed $value = ''): array|bool
    public static function isError(mixed $value = '', bool $tryNotImplemented = false): array|bool
    public static function isNa(mixed $value = ''): array|bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Information/ExcelError.php
    class ExcelError
    public static function throwError(mixed $value): string
    public static function type(mixed $value = ''): array|int|string
    public static function null(): string
    public static function NAN(): string
    public static function REF(): string
    public static function NA(): string
    public static function VALUE(): string
    public static function NAME(): string
    public static function DIV0(): string
    public static function CALC(): string
    public static function SPILL(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Information/Value.php
    class Value
    public static function isBlank(mixed $value = null): array|bool
    public static function isRef(mixed $value, ?Cell $cell = null): bool
    public static function isEven(mixed $value = null): array|string|bool
    public static function isOdd(mixed $value = null): array|string|bool
    public static function isNumber(mixed $value = null): array|bool
    public static function isLogical(mixed $value = null): array|bool
    public static function isText(mixed $value = null): array|bool
    public static function isNonText(mixed $value = null): array|bool
    public static function isFormula(mixed $cellReference = '', ?Cell $cell = null): array|bool|string
    public static function asNumber($value = null)
    public static function type($value = null): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Internal/ExcelArrayPseudoFunctions.php
    class ExcelArrayPseudoFunctions
    public static function single(string $cellReference, Cell $cell): mixed
    public static function anchorArray(string $cellReference, Cell $cell): array|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Internal/MakeMatrix.php
    class MakeMatrix
    public static function make(...$args): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Internal/WildcardMatch.php
    class WildcardMatch
    public static function wildcard(string $wildcard): string
    public static function compare(?string $value, string $wildcard): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Logical/Boolean.php
    class Boolean
    public static function true(): bool
    public static function false(): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Logical/Conditional.php
    class Conditional
    *                the condition argument evaluates to TRUE, then the IF function returns the text "Within budget"
    *                to FALSE, then the IF function returns the text "Over budget".
    public static function statementIf(mixed $condition = true, mixed $returnIfTrue = 0, mixed $returnIfFalse = false): mixed
    *              The SWITCH function is looking for the first value that matches the expression.
    *              A list of results. The SWITCH function returns the corresponding result when a value
    public static function statementSwitch(mixed ...$arguments): mixed
    public static function IFERROR(mixed $testValue = '', mixed $errorpart = ''): mixed
    public static function IFNA(mixed $testValue = '', mixed $napart = ''): mixed
    public static function IFS(mixed ...$arguments)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Logical/Operations.php
    class Operations
    *        If any argument value is a string, or a Null, the function returns a #VALUE! error, unless the string
    public static function logicalAnd(mixed ...$args)
    *        If any argument value is a string, or a Null, the function returns a #VALUE! error, unless the string
    public static function logicalOr(mixed ...$args)
    * i.e. the Xor function returns TRUE if an odd number of the supplied conditions evaluate to TRUE,
    *        If any argument value is a string, or a Null, the function returns a #VALUE! error, unless the string
    public static function logicalXor(mixed ...$args)
    *        If any argument value is a string, or a Null, the function returns a #VALUE! error, unless the string
    public static function NOT(mixed $logical = false): array|bool|string
    private static function countTrueValues(array $args, callable $func): bool|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/Address.php
    class Address
    public static function cell(mixed $row, mixed $column, mixed $relativity = 1, mixed $referenceStyle = true, mixed $sheetName = ''): array|string
    private static function sheetName(string $sheetName): string
    private static function formatAsA1(int $row, int $column, int $relativity, string $sheetName): string
    private static function formatAsR1C1(int $row, int $column, int $relativity, string $sheetName): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/ChooseRowsEtc.php
    class ChooseRowsEtc
    public static function transpose(array $array): array
    private static function arrayValues(mixed $array): array
    public static function chooseCols(mixed $input, mixed ...$args): array|string
    public static function chooseRows(mixed $input, mixed ...$args): array|string
    private static function dropRows(array $array, mixed $offset): array|string
    public static function drop(mixed $input, mixed $rows = null, mixed $columns = null): array|string
    private static function takeRows(array $array, mixed $offset): array|string
    public static function take(mixed $input, mixed $rows, mixed $columns = null): array|string
    public static function expand(mixed $input, mixed $rows, mixed $columns = null, mixed $pad = '#N/A'): array|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/ExcelMatch.php
    class ExcelMatch
    * The MATCH function searches for a specified item in a range of cells
    public static function MATCH(mixed $lookupValue, mixed $lookupArray, mixed $matchType = self::MATCHTYPE_LARGEST_VALUE): array|string|int|float
    private static function matchFirstValue(array $lookupArray, mixed $lookupValue): int|string|null
    private static function matchLargestValue(array $lookupArray, mixed $lookupValue, array $keySet): mixed
    private static function matchSmallestValue(array $lookupArray, mixed $lookupValue): int|string|null
    private static function validateLookupValue(mixed $lookupValue): void
    private static function validateMatchType(mixed $matchType): int
    private static function validateLookupArray(array $lookupArray): void
    private static function prepareLookupArray(array $lookupArray, mixed $matchType): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/Filter.php
    class Filter
    public static function filter(array $lookupArray, mixed $matchArray, mixed $ifEmpty = null): mixed
    private static function enumerateArrayKeys(array $sortArray): array
    function (&$columns): void {
    private static function filterByRow(array $lookupArray, array $matchArray): array
    private static function filterByColumn(array $lookupArray, array $matchArray): array
    function (&$value): void {
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/Formula.php
    class Formula
    public static function text(mixed $cellReference = '', ?Cell $cell = null): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/Helpers.php
    class Helpers
    private static function convertR1C1(string &$cellAddress1, ?string &$cellAddress2, bool $a1, ?int $baseRow = null, ?int $baseCol = null): string
    private static function adjustSheetTitle(string &$sheetTitle, ?string $value): void
    public static function extractCellAddresses(string $cellAddress, bool $a1, Worksheet $sheet, string $sheetName = '', ?int $baseRow = null, ?int $baseCol = null): array
    public static function extractWorksheet(string $cellAddress, Cell $cell): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/HLookup.php
    class HLookup extends LookupBase
    * The HLOOKUP function searches for value in the top-most row of lookup_array and returns the value
    public static function lookup(mixed $lookupValue, mixed $lookupArray, mixed $indexNumber, mixed $notExactMatch = true): mixed
    private static function hLookupSearch(mixed $lookupValue, array $lookupArray, $column, bool $notExactMatch): ?int
    private static function convertLiteralArray(array $lookupArray): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/Hyperlink.php
    class Hyperlink
    public static function set(mixed $linkURL = '', mixed $displayName = null, ?Cell $cell = null): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/Indirect.php
    class Indirect
    private static function a1Format(mixed $a1fmt): bool
    private static function validateAddress(array|string|null $cellAddress): string
    public static function INDIRECT($cellAddress, mixed $a1fmt, Cell $cell): string|array
    private static function extractRequiredCells(?Worksheet $worksheet, string $cellAddress): array
    private static function handleRowColumnRanges(?Worksheet $worksheet, string $start, string $end): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/Lookup.php
    class Lookup
    * The LOOKUP function searches for value either from a one-row or one-column range or from an array.
    public static function lookup(mixed $lookupValue, mixed $lookupVector, $resultVector = null): mixed
    private static function verifyLookupValues(array $lookupVector, array $resultVector): array
    private static function verifyResultVector(array $resultVector): array
    private static function rowCount(array $dataArray): int
    private static function columnCount(array $dataArray): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/LookupBase.php
    abstract class LookupBase
    protected static function validateLookupArray(mixed $lookup_array): void
    protected static function validateIndexLookup(array $lookup_array, $index_number): int
    protected static function checkMatch(
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/LookupRefValidations.php
    class LookupRefValidations
    public static function validateInt(mixed $value): int
    public static function validatePositiveInt(mixed $value, bool $allowZero = true): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/Matrix.php
    class Matrix
    public static function isColumnVector(array $values): bool
    public static function isRowVector(array $values): bool
    public static function transpose($matrixData): array
    public static function index(mixed $matrix, mixed $rowNum = 0, mixed $columnNum = null): mixed
    private static function extractRowValue(array $matrix, array $rowKeys, int $rowNum): mixed
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/Offset.php
    class Offset
    public static function OFFSET(?string $cellAddress = null, mixed $rows = 0, mixed $columns = 0, mixed $height = null, mixed $width = null, ?Cell $cell = null): string|array
    private static function extractRequiredCells(?Worksheet $worksheet, string $cellAddress): array
    private static function extractWorksheet(?string $cellAddress, Cell $cell): array
    private static function assessCellAddress(string $cellAddress, Cell $cell): string
    private static function adjustEndCellColumnForWidth(string $endCellColumn, mixed $width, int $startCellColumn, mixed $columns): int
    private static function adustEndCellRowForHeight(mixed $height, int $startCellRow, mixed $rows, mixed $endCellRow): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/RowColumnInformation.php
    class RowColumnInformation
    private static function cellAddressNullOrWhitespace($cellAddress): bool
    private static function cellColumn(?Cell $cell): int
    *     If cell reference is omitted, and the function is being called through the calculation engine,
    *        then it is assumed to be the reference of the cell in which the COLUMN function appears;
    *        otherwise this function returns 1.
    public static function COLUMN($cellAddress = null, ?Cell $cell = null): int|array
    public static function COLUMNS($cellAddress = null)
    private static function cellRow(?Cell $cell): int
    *     If cell reference is omitted, and the function is being called through the calculation engine,
    *        then it is assumed to be the reference of the cell in which the ROW function appears;
    *        otherwise this function returns 1.
    public static function ROW($cellAddress = null, ?Cell $cell = null): int|array
    public static function ROWS($cellAddress = null)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/Selection.php
    class Selection
    public static function choose(mixed $chosenEntry, mixed ...$chooseArgs): mixed
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/Sort.php
    class Sort extends LookupRefValidations
    * The SORT function returns a sorted array of the elements in an array.
    public static function sort(mixed $sortArray, mixed $sortIndex = 1, mixed $sortOrder = self::ORDER_ASCENDING, mixed $byColumn = false): mixed
    * The SORTBY function sorts the contents of a range or array based on the values in a corresponding range or array.
    public static function sortBy(mixed $sortArray, mixed ...$args): mixed
    private static function enumerateArrayKeys(array $sortArray): array
    function (&$columns): void {
    private static function validateScalarArgumentsForSort(mixed &$sortIndex, mixed &$sortOrder, int $sortArraySize): void
    private static function validateSortVector(mixed $sortVector, int $sortArraySize): array
    private static function validateSortOrder(mixed $sortOrder): int
    private static function validateArrayArgumentsForSort(array &$sortIndex, mixed &$sortOrder, int $sortArraySize): void
    private static function prepareSortVectorValues(array $sortVector): array
    function ($value) {
    private static function processSortBy(array $sortArray, array $sortIndex, array $sortOrder): array
    private static function sortByRow(array $sortArray, array $sortIndex, array $sortOrder): array
    private static function sortByColumn(array $sortArray, array $sortIndex, array $sortOrder): array
    private static function buildVectorForSort(array $sortArray, array $sortIndex, array $sortOrder): array
    private static function executeVectorSortQuery(array $sortData, array $sortArguments): array
    private static function sortLookupArrayFromVector(array $sortArray, array $sortVector): array
    //            function (int $a, int $b) use (array $sortVector) {
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/Unique.php
    class Unique
    * The UNIQUE function searches for value either from a one-row or one-column range or from an array.
    * @param mixed $exactlyOnce Whether the function should return only entries that occur just once in the list
    public static function unique(mixed $lookupVector, mixed $byColumn = false, mixed $exactlyOnce = false): mixed
    private static function uniqueByRow(array $lookupVector, bool $exactlyOnce): mixed
    function (array &$value): void {
    function (string &$value): void {
    private static function uniqueByColumn(array $lookupVector, bool $exactlyOnce): mixed
    private static function countValuesCaseInsensitive(array $caseSensitiveLookupValues): array
    private static function exactlyOnceFilter(array $values): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/LookupRef/VLookup.php
    class VLookup extends LookupBase
    * The VLOOKUP function searches for value in the left-most column of lookup_array and returns the value
    public static function lookup(mixed $lookupValue, mixed $lookupArray, mixed $indexNumber, mixed $notExactMatch = true): mixed
    private static function vlookupSort(array $a, array $b): int
    private static function vLookupSearch(mixed $lookupValue, array $lookupArray, $column, bool $notExactMatch): ?int
    private static function numeric(mixed $value): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Absolute.php
    class Absolute
    * Returns the result of builtin function abs after validating args.
    public static function evaluate(mixed $number): array|string|int|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Angle.php
    class Angle
    * Returns the result of builtin function rad2deg after validating args.
    public static function toDegrees(mixed $number): array|string|float
    * Returns the result of builtin function deg2rad after validating args.
    public static function toRadians(mixed $number): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Arabic.php
    class Arabic
    private static function calculateArabic(array $roman, int &$sum = 0, int $subtract = 0): int
    public static function evaluate(mixed $roman): array|int|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Base.php
    class Base
    public static function evaluate(mixed $number, mixed $radix, mixed $minLength = null): array|string
    private static function calculate(float $number, int $radix, mixed $minLength): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Ceiling.php
    class Ceiling
    public static function ceiling($number, $significance = null)
    public static function math(mixed $number, mixed $significance = null, $mode = 0): array|string|float
    public static function precise(mixed $number, $significance = 1): array|string|float
    private static function ceilingMathTest(float $significance, float $number, int $mode): bool
    private static function argumentsOk(float $number, float $significance): float|string
    private static function floorCheck1Arg(): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Combinations.php
    class Combinations
    public static function withoutRepetition(mixed $numObjs, mixed $numInSet): array|string|float
    public static function withRepetition(mixed $numObjs, mixed $numInSet): array|int|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Exp.php
    class Exp
    * Returns the result of builtin function exp after validating args.
    public static function evaluate(mixed $number): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Factorial.php
    class Factorial
    public static function fact($factVal): array|string|float|int
    public static function factDouble($factVal): array|string|float|int
    public static function multinomial(...$args): string|int|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Floor.php
    class Floor
    private static function floorCheck1Arg(): void
    public static function floor(mixed $number, mixed $significance = null)
    public static function math(mixed $number, mixed $significance = null, mixed $mode = 0)
    public static function precise($number, $significance = 1)
    private static function argumentsOkPrecise(float $number, float $significance): string|float
    private static function argsOk(float $number, float $significance, int $mode): string|float
    private static function floorMathTest(float $number, float $significance, int $mode): bool
    private static function argumentsOk(float $number, float $significance): string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Gcd.php
    class Gcd
    private static function evaluateGCD(float|int $a, float|int $b): float|int
    public static function evaluate(mixed ...$args)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Helpers.php
    class Helpers
    public static function verySmallDenominator(float $numerator, float $denominator): string|float
    public static function validateNumericNullBool(mixed $number): int|float
    public static function validateNumericNullSubstitution(mixed $number, null|float|int $substitute): float|int
    public static function validateNotNegative(float|int $number, ?string $except = null): void
    public static function validatePositive(float|int $number, ?string $except = null): void
    public static function validateNotZero(float|int $number): void
    public static function returnSign(float $number): int
    public static function getEven(float $number): float
    public static function numberOrNan(float $result): float|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/IntClass.php
    class IntClass
    public static function evaluate($number): array|string|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Lcm.php
    class Lcm
    private static function factors(float $value): array
    public static function evaluate(mixed ...$args): int|string
    private static function processPoweredFactors(array &$allPoweredFactors, array &$myPoweredFactors): void
    private static function testNonNulls(int $anyNonNulls): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Logarithms.php
    class Logarithms
    public static function withBase(mixed $number, mixed $base = 10): array|string|float
    * Returns the result of builtin function log after validating args.
    public static function base10(mixed $number): array|string|float
    * Returns the result of builtin function log after validating args.
    public static function natural(mixed $number): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/MatrixFunctions.php
    class MatrixFunctions
    private static function getMatrix(mixed $matrixValues): Matrix
    public static function sequence(mixed $rows = 1, mixed $columns = 1, mixed $start = 1, mixed $step = 1): string|array
    public static function determinant(mixed $matrixValues)
    public static function inverse(mixed $matrixValues): array|string
    public static function multiply(mixed $matrixData1, mixed $matrixData2): array|string
    public static function identity(mixed $dimension)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Operations.php
    class Operations
    public static function mod(mixed $dividend, mixed $divisor): array|string|float
    public static function power(null|array|bool|float|int|string $x, null|array|bool|float|int|string $y): array|float|int|string
    public static function product(mixed ...$args): string|float
    * QUOTIENT function returns the integer portion of a division. Numerator is the divided number
    public static function quotient(mixed $numerator, mixed $denominator): array|string|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Random.php
    class Random
    public static function rand(): int|float
    public static function randBetween(mixed $min, mixed $max): array|string|int
    public static function randArray(mixed $rows = 1, mixed $columns = 1, mixed $min = 0, mixed $max = 1, bool $wholeNumber = false): string|array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Roman.php
    class Roman
    private static function valueOk(int $aValue, int $style): string
    private static function styleOk(int $aValue, int $style): string
    public static function calculateRoman(int $aValue, int $style): string
    public static function evaluate(mixed $aValue, mixed $style = 0): array|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Round.php
    class Round
    * Returns the result of builtin function round after validating args.
    public static function round(mixed $number, mixed $precision): array|string|float
    public static function up($number, $digits): array|string|float
    public static function down($number, $digits): array|string|float
    public static function multiple(mixed $number, mixed $multiple): array|string|int|float
    * You can use this function for processing items that come in twos. For example,
    public static function even($number): array|string|float
    public static function odd($number): array|string|int|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/SeriesSum.php
    class SeriesSum
    public static function evaluate(mixed $x, mixed $n, mixed $m, ...$args): array|string|float|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Sign.php
    class Sign
    public static function evaluate($number): array|string|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Sqrt.php
    class Sqrt
    * Returns the result of builtin function sqrt after validating args.
    public static function sqrt(mixed $number)
    public static function pi($number): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Subtotal.php
    class Subtotal
    protected static function filterHiddenArgs(mixed $cellReference, mixed $args): array
    function ($index) use ($cellReference) {
    protected static function filterFormulaArgs(mixed $cellReference, mixed $args): array
    function ($index) use ($cellReference): bool {
    *            A number 1 to 11 that specifies which function to
    public static function evaluate(mixed $functionType, ...$args): float|int|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Sum.php
    class Sum
    public static function sumIgnoringStrings(mixed ...$args): float|int|string
    public static function sumErroringStrings(mixed ...$args): float|int|string|array
    public static function product(mixed ...$args): string|int|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/SumSquares.php
    class SumSquares
    public static function sumSquare(mixed ...$args): string|int|float
    private static function getCount(array $array1, array $array2): int
    private static function numericNotString(mixed $item): bool
    public static function sumXSquaredMinusYSquared(array $matrixData1, array $matrixData2): string|int|float
    public static function sumXSquaredPlusYSquared(array $matrixData1, array $matrixData2): string|int|float
    public static function sumXMinusYSquared(array $matrixData1, array $matrixData2): string|int|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Trig/Cosecant.php
    class Cosecant
    public static function csc($angle)
    public static function csch($angle)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Trig/Cosine.php
    class Cosine
    * Returns the result of builtin function cos after validating args.
    public static function cos(mixed $number): array|string|float
    * Returns the result of builtin function cosh after validating args.
    public static function cosh(mixed $number): array|string|float
    public static function acos($number)
    public static function acosh($number)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Trig/Cotangent.php
    class Cotangent
    public static function cot($angle)
    public static function coth($angle)
    public static function acot($number): array|string|float
    public static function acoth($number)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Trig/Secant.php
    class Secant
    public static function sec($angle)
    public static function sech($angle)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Trig/Sine.php
    class Sine
    * Returns the result of builtin function sin after validating args.
    public static function sin(mixed $angle): array|string|float
    * Returns the result of builtin function sinh after validating args.
    public static function sinh(mixed $angle): array|string|float
    public static function asin($number)
    public static function asinh($number)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Trig/Tangent.php
    class Tangent
    * Returns the result of builtin function tan after validating args.
    public static function tan(mixed $angle)
    * Returns the result of builtin function sinh after validating args.
    public static function tanh(mixed $angle): array|string|float
    public static function atan($number)
    public static function atanh($number)
    * This function calculates the arc tangent of the two variables x and y. It is similar to
    * Note that the Excel ATAN2() function accepts its arguments in the reverse order to the standard
    public static function atan2(mixed $xCoordinate, mixed $yCoordinate): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/MathTrig/Trunc.php
    class Trunc
    public static function evaluate(array|float|string|null $value = 0, array|float|int|string $digits = 0): array|float|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/AggregateBase.php
    abstract class AggregateBase
    protected static function testAcceptedBoolean(mixed $arg, mixed $k): mixed
    protected static function isAcceptedCountable(mixed $arg, mixed $k, bool $countNull = false): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Averages/Mean.php
    class Mean
    public static function geometric(mixed ...$args): float|int|string
    public static function harmonic(mixed ...$args): string|float|int
    public static function trim(mixed ...$args): float|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Averages.php
    class Averages extends AggregateBase
    public static function averageDeviations(mixed ...$args): string|float
    public static function average(mixed ...$args): string|int|float
    public static function averageA(mixed ...$args): string|int|float
    public static function median(mixed ...$args): float|string
    public static function mode(mixed ...$args): float|string
    protected static function filterArguments(array $args): array
    function ($value): bool {
    private static function modeCalc(array $data): float|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Conditional.php
    class Conditional
    public static function AVERAGEIF(mixed $range, null|array|string $condition, mixed $averageRange = []): null|int|float|string
    public static function AVERAGEIFS(mixed ...$args): null|int|float|string
    public static function COUNTIF(array $range, null|array|string $condition): string|int
    public static function COUNTIFS(mixed ...$args): int|string
    public static function MAXIFS(mixed ...$args): null|float|string
    public static function MINIFS(mixed ...$args): null|float|string
    public static function SUMIF(array $range, mixed $condition, array $sumRange = []): null|float|string
    public static function SUMIFS(mixed ...$args): null|float|string
    private static function buildConditionSet(...$args): array
    private static function buildConditionSetForValueRange(...$args): array
    private static function buildConditions(int $startOffset, ...$args): array
    private static function buildDatabase(...$args): array
    private static function buildDatabaseWithValueRange(...$args): array
    private static function buildDataSet(int $startOffset, array $database, ...$args): array
    private static function databaseFromRangeAndValue(array $range, array $valueRange = []): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Confidence.php
    class Confidence
    public static function CONFIDENCE(mixed $alpha, mixed $stdDev, mixed $size)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Counts.php
    class Counts extends AggregateBase
    public static function COUNT(mixed ...$args): int
    public static function COUNTA(mixed ...$args): int
    public static function COUNTBLANK(mixed $range): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Deviations.php
    class Deviations
    public static function sumSquares(mixed ...$args): string|float
    public static function kurtosis(...$args): string|int|float
    public static function skew(...$args): string|int|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/Beta.php
    class Beta
    public static function distribution(mixed $value, mixed $alpha, mixed $beta, mixed $rMin = 0.0, mixed $rMax = 1.0): array|string|float
    public static function inverse(mixed $probability, mixed $alpha, mixed $beta, mixed $rMin = 0.0, mixed $rMax = 1.0): array|string|float
    private static function calculateInverse(float $probability, float $alpha, float $beta, float $rMin, float $rMax): string|float
    public static function incompleteBeta(float $x, float $p, float $q): float
    private static function logBeta(float $p, float $q): float
    private static function betaFraction(float $x, float $p, float $q): float
    private static function betaValue(float $a, float $b): float
    private static function regularizedIncompleteBeta(float $value, float $a, float $b): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/Binomial.php
    class Binomial
    public static function distribution(mixed $value, mixed $trials, mixed $probability, mixed $cumulative)
    public static function range(mixed $trials, mixed $probability, mixed $successes, mixed $limit = null): array|string|float|int
    *        probability of a success is probability_s. This function is similar to the binomial
    public static function negative(mixed $failures, mixed $successes, mixed $probability): array|string|float
    public static function inverse(mixed $trials, mixed $probability, mixed $alpha): array|string|int
    private static function calculateCumulativeBinomial(int $value, int $trials, float $probability): float|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/ChiSquared.php
    class ChiSquared
    public static function distributionRightTail(mixed $value, mixed $degrees): array|string|int|float
    public static function distributionLeftTail(mixed $value, mixed $degrees, mixed $cumulative): array|string|int|float
    public static function inverseRightTail(mixed $probability, mixed $degrees)
    public static function inverseLeftTail(mixed $probability, mixed $degrees): array|string|float
    public static function test(mixed $actual, mixed $expected): float|string
    protected static function degrees(int $rows, int $columns): int
    private static function inverseLeftTailCalculation(float $probability, int $degrees): float
    private static function pchisq(float $chi2, int $degrees): float
    private static function gammp(int $n, float $x): float
    // Return the incomplete gamma function P(n/2,x) evaluated by
    private static function gser(int $n, float $x): float
    // Return the incomplete gamma function Q(n/2,x) evaluated by
    private static function gcf(int $n, float $x): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/DistributionValidations.php
    class DistributionValidations extends StatisticalValidations
    public static function validateProbability(mixed $probability): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/Exponential.php
    class Exponential
    public static function distribution(mixed $value, mixed $lambda, mixed $cumulative): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/F.php
    class F
    *    You can use this function to determine whether two data sets have different degrees of diversity.
    public static function distribution(mixed $value, mixed $u, mixed $v, mixed $cumulative): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/Fisher.php
    class Fisher
    * Returns the Fisher transformation at x. This transformation produces a function that
    *        is normally distributed rather than skewed. Use this function to perform hypothesis
    public static function distribution(mixed $value): array|string|float
    public static function inverse(mixed $probability): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/Gamma.php
    class Gamma extends GammaBase
    * Return the gamma function value.
    public static function gamma(mixed $value): array|string|float
    public static function distribution(mixed $value, mixed $a, mixed $b, mixed $cumulative)
    public static function inverse(mixed $probability, mixed $alpha, mixed $beta)
    public static function ln(mixed $value): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/GammaBase.php
    abstract class GammaBase
    protected static function calculateDistribution(float $value, float $a, float $b, bool $cumulative): float
    protected static function calculateInverse(float $probability, float $alpha, float $beta)
    public static function incompleteGamma(float $a, float $x): float
    public static function gammaValue(float $value): float
    * This routine calculates the LOG(GAMMA) function for a positive real argument X.
    public static function logGamma(float $x): float
    private static function logGamma1(float $y): float
    private static function logGamma2(float $y): float
    protected static function logGamma3(float $y): float
    protected static function logGamma4(float $y): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/HyperGeometric.php
    class HyperGeometric
    public static function distribution(mixed $sampleSuccesses, mixed $sampleNumber, mixed $populationSuccesses, mixed $populationNumber): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/LogNormal.php
    class LogNormal
    public static function cumulative(mixed $value, mixed $mean, mixed $stdDev)
    public static function distribution(mixed $value, mixed $mean, mixed $stdDev, mixed $cumulative = false)
    public static function inverse(mixed $probability, mixed $mean, mixed $stdDev): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/NewtonRaphson.php
    class NewtonRaphson
    public function __construct(callable $callback)
    public function execute(float $probability): string|int|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/Normal.php
    class Normal
    * function has a very wide range of applications in statistics, including hypothesis
    public static function distribution(mixed $value, mixed $mean, mixed $stdDev, mixed $cumulative): array|string|float
    public static function inverse(mixed $probability, mixed $mean, mixed $stdDev): array|string|float
    private static function inverseNcdf(float $p): float
    //    You have permission to use and distribute this function freely for
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/Poisson.php
    class Poisson
    public static function distribution(mixed $value, mixed $mean, mixed $cumulative): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/StandardNormal.php
    class StandardNormal
    * a mean of 0 (zero) and a standard deviation of one. Use this function in place of a
    public static function cumulative(mixed $value)
    * a mean of 0 (zero) and a standard deviation of one. Use this function in place of a
    public static function distribution(mixed $value, mixed $cumulative)
    public static function inverse(mixed $value)
    public static function gauss(mixed $value): array|string|float
    public static function zTest(mixed $dataSet, mixed $m0, mixed $sigma = null)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/StudentT.php
    class StudentT
    public static function distribution(mixed $value, mixed $degrees, mixed $tails)
    public static function inverse(mixed $probability, mixed $degrees)
    private static function calculateDistribution(float $value, int $degrees, int $tails): float
    //    pascal function on p81 of "Statistical Computing in Pascal" by D
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Distributions/Weibull.php
    class Weibull
    public static function distribution(mixed $value, mixed $alpha, mixed $beta, mixed $cumulative): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Maximum.php
    class Maximum extends MaxMinBase
    public static function max(mixed ...$args): float|int|string
    public static function maxA(mixed ...$args): float|int|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/MaxMinBase.php
    abstract class MaxMinBase
    protected static function datatypeAdjustmentAllowStrings(int|float|string|bool $value): int|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Minimum.php
    class Minimum extends MaxMinBase
    public static function min(mixed ...$args): float|int|string
    public static function minA(mixed ...$args): float|int|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Percentiles.php
    class Percentiles
    public static function PERCENTILE(mixed ...$args)
    public static function PERCENTRANK(mixed $valueSet, mixed $value, mixed $significance = 3): string|float
    public static function QUARTILE(mixed ...$args)
    public static function RANK(mixed $value, mixed $valueSet, mixed $order = self::RANK_SORT_DESCENDING)
    protected static function percentileFilterValues(array $dataSet): array
    protected static function rankFilterValues(array $dataSet): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Permutations.php
    class Permutations
    public static function PERMUT(mixed $numObjs, mixed $numInSet)
    public static function PERMUTATIONA(mixed $numObjs, mixed $numInSet)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Size.php
    class Size
    * Returns the nth largest value in a data set. You can use this function to
    public static function large(mixed ...$args)
    * Returns the nth smallest value in a data set. You can use this function to
    public static function small(mixed ...$args)
    protected static function filter(array $args): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/StandardDeviations.php
    class StandardDeviations
    public static function STDEV(mixed ...$args)
    public static function STDEVA(mixed ...$args): float|string
    public static function STDEVP(mixed ...$args): float|string
    public static function STDEVPA(mixed ...$args): float|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Standardize.php
    class Standardize extends StatisticalValidations
    public static function execute($value, $mean, $stdDev): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/StatisticalValidations.php
    class StatisticalValidations
    public static function validateFloat(mixed $value): float
    public static function validateInt(mixed $value): int
    public static function validateBool(mixed $value): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Trends.php
    class Trends
    private static function filterTrendValues(array &$array1, array &$array2): void
    private static function checkTrendArrays(mixed &$array1, mixed &$array2): void
    protected static function validateTrendArrays(array $yValues, array $xValues): void
    public static function CORREL(mixed $yValues, $xValues = null): float|string
    public static function COVAR(array $yValues, array $xValues): float|string
    public static function FORECAST(mixed $xValue, array $yValues, array $xValues)
    public static function GROWTH(array $yValues, array $xValues = [], array $newValues = [], mixed $const = true): array
    public static function INTERCEPT(array $yValues, array $xValues): float|string
    public static function LINEST(array $yValues, ?array $xValues = null, mixed $const = true, mixed $stats = false): string|array
    public static function LOGEST(array $yValues, ?array $xValues = null, mixed $const = true, mixed $stats = false): string|array
    public static function RSQ(array $yValues, array $xValues)
    public static function SLOPE(array $yValues, array $xValues)
    public static function STEYX(array $yValues, array $xValues): float|string
    public static function TREND(array $yValues, array $xValues = [], array $newValues = [], mixed $const = true): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/VarianceBase.php
    abstract class VarianceBase
    protected static function datatypeAdjustmentAllowStrings(int|float|string|bool $value): int|float
    protected static function datatypeAdjustmentBooleans(mixed $value): mixed
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Statistical/Variances.php
    class Variances extends VarianceBase
    public static function VAR(mixed ...$args): float|string
    public static function VARA(mixed ...$args): string|float
    public static function VARP(mixed ...$args): float|string
    public static function VARPA(mixed ...$args): string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/TextData/CaseConvert.php
    class CaseConvert
    public static function lower(mixed $mixedCaseValue): array|string
    public static function upper(mixed $mixedCaseValue): array|string
    public static function proper(mixed $mixedCaseValue): array|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/TextData/CharacterConvert.php
    class CharacterConvert
    public static function character(mixed $character): array|string
    public static function code(mixed $characters): array|string|int
    private static function unicodeToOrd(string $character): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/TextData/Concatenate.php
    class Concatenate
    public static function CONCATENATE(...$args): string
    public static function actualCONCATENATE(...$args): array|string
    private static function concatenate2Args(array|string $operand1, null|array|bool|float|int|string $operand2): array|string
    public static function TEXTJOIN(mixed $delimiter = '', mixed $ignoreEmpty = true, mixed ...$args): array|string
    private static function evaluateTextJoinArray(bool $ignoreEmpty, array &$aArgs): ?string
    * Returns the result of builtin function round after validating args.
    public static function builtinREPT(mixed $stringValue, mixed $repeatCount): array|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/TextData/Extract.php
    class Extract
    public static function left(mixed $value, mixed $chars = 1): array|string
    public static function mid(mixed $value, mixed $start, mixed $chars): array|string
    public static function right(mixed $value, mixed $chars = 1): array|string
    public static function before(mixed $text, $delimiter, mixed $instance = 1, mixed $matchMode = 0, mixed $matchEnd = 0, mixed $ifNotFound = '#N/A'): array|string
    public static function after(mixed $text, $delimiter, mixed $instance = 1, mixed $matchMode = 0, mixed $matchEnd = 0, mixed $ifNotFound = '#N/A'): array|string
    private static function validateTextBeforeAfter(string $text, null|array|string $delimiter, int $instance, int $matchMode, int $matchEnd, mixed $ifNotFound): array|string
    private static function buildDelimiter($delimiter): string
    private static function matchFlags(int $matchMode): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/TextData/Format.php
    class Format
    * This function converts a number to text using currency format, with the decimals rounded to the specified place.
    public static function DOLLAR(mixed $value = 0, mixed $decimals = 2)
    public static function FIXEDFORMAT(mixed $value, mixed $decimals = 2, mixed $noCommas = false): array|string
    public static function TEXTFORMAT(mixed $value, mixed $format): array|string
    private static function convertValue(mixed $value, bool $spacesMeanZero = false): mixed
    public static function VALUE(mixed $value = '')
    public static function valueToText(mixed $value, mixed $format = false): array|string
    private static function getDecimalSeparator(mixed $decimalSeparator): string
    private static function getGroupSeparator(mixed $groupSeparator): string
    public static function NUMBERVALUE(mixed $value = '', mixed $decimalSeparator = null, mixed $groupSeparator = null): array|string|float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/TextData/Helpers.php
    class Helpers
    public static function convertBooleanValue(bool $value): string
    public static function extractString(mixed $value, bool $throwIfError = false): string
    public static function extractInt(mixed $value, int $minValue, int $gnumericNull = 0, bool $ooBoolOk = false): int
    public static function extractFloat(mixed $value): float
    public static function validateInt(mixed $value, bool $throwIfError = false): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/TextData/Replace.php
    class Replace
    public static function replace(mixed $oldText, mixed $start, mixed $chars, mixed $newText): array|string
    public static function substitute(mixed $text = '', mixed $fromText = '', mixed $toText = '', mixed $instance = null): array|string
    private static function executeSubstitution(string $text, string $fromText, string $toText, int $instance): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/TextData/Search.php
    class Search
    public static function sensitive(mixed $needle, mixed $haystack, mixed $offset = 1): array|string|int
    public static function insensitive(mixed $needle, mixed $haystack, mixed $offset = 1): array|string|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/TextData/Text.php
    class Text
    public static function length(mixed $value = ''): array|int|string
    public static function exact(mixed $value1, mixed $value2): array|bool|string
    public static function test(mixed $testValue = ''): array|string
    public static function split(mixed $text, $columnDelimiter = null, $rowDelimiter = null, bool $ignoreEmpty = false, bool $matchMode = true, mixed $padding = '#N/A'): array|string
    function (&$row) use ($delimiter, $flags, $ignoreEmpty): void {
    private static function applyPadding(array $rows, mixed $padding): array
    private static function buildDelimiter($delimiter): string
    private static function matchFlags(bool $matchMode): string
    public static function fromArray(array $array, int $format = 0): string
    private static function formatValueMode0(mixed $cellValue): string
    private static function formatValueMode1(mixed $cellValue): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/TextData/Trim.php
    class Trim
    public static function nonPrintable(mixed $stringValue = '')
    public static function spaces(mixed $stringValue = ''): array|string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Token/Stack.php
    class Stack
    public function __construct(BranchPruner $branchPruner)
    public function count(): int
    public function push(string $type, mixed $value, ?string $reference = null): void
    public function pushStackItem(array $stackItem): void
    public function getStackItem(string $type, mixed $value, ?string $reference = null): array
    public function pop(): ?array
    public function last(int $n = 1): ?array
    public function clear(): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Calculation/Web/Service.php
    class Service
    public static function webService(string $url): string
    public static function urlEncode(mixed $text): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/AddressHelper.php
    class AddressHelper
    public static function getRowAndColumnChars(): array
    public static function convertToA1(
    protected static function convertSpreadsheetMLFormula(string $formula): string
    public static function convertFormulaToA1(
    public static function convertToR1C1(
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/AddressRange.php
    public function from(): mixed;
    public function to(): mixed;
    public function __toString(): string;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/AdvancedValueBinder.php
    class AdvancedValueBinder extends DefaultValueBinder implements IValueBinder
    public function bindValue(Cell $cell, mixed $value = null): bool
    protected function setImproperFraction(array $matches, Cell $cell): bool
    protected function setProperFraction(array $matches, Cell $cell): bool
    protected function setPercentage(string $value, Cell $cell): bool
    protected function setCurrency(float $value, Cell $cell, string $currencyCode): bool
    protected function setTimeHoursMinutes(string $value, Cell $cell): bool
    protected function setTimeHoursMinutesSeconds(string $value, Cell $cell): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/Cell.php
    class Cell implements Stringable
    public function updateInCollection(): self
    public function detach(): void
    public function attach(Cells $parent): void
    public function __construct(mixed $value, ?string $dataType, Worksheet $worksheet)
    public function getColumn(): string
    public function getRow(): int
    public function getCoordinate(): string
    public function getValue(): mixed
    public function getValueString(): string
    public function getFormattedValue(): string
    protected static function updateIfCellIsTableHeader(?Worksheet $workSheet, self $cell, mixed $oldValue, mixed $newValue): void
    public function setValue(mixed $value, ?IValueBinder $binder = null): self
    public function setValueExplicit(mixed $value, string $dataType = DataType::TYPE_STRING): self
    public static function getCalculateDateTimeType(): int
    public static function setCalculateDateTimeType(int $calculateDateTimeType): void
    private function convertDateTimeInt(mixed $result): mixed
    public function getCalculatedValueString(): string
    public function getCalculatedValue(bool $resetLog = true): mixed
    public function setCalculatedValue(mixed $originalValue, bool $tryNumeric = true): self
    public function getOldCalculatedValue(): mixed
    public function getDataType(): string
    public function setDataType(string $dataType): self
    public function isFormula(): bool
    public function hasDataValidation(): bool
    public function getDataValidation(): DataValidation
    public function setDataValidation(?DataValidation $dataValidation = null): self
    public function hasValidValue(): bool
    public function hasHyperlink(): bool
    public function getHyperlink(): Hyperlink
    public function setHyperlink(?Hyperlink $hyperlink = null): self
    public function getParent(): ?Cells
    public function getWorksheet(): Worksheet
    public function getWorksheetOrNull(): ?Worksheet
    public function isInMergeRange(): bool
    public function isMergeRangeValueCell(): bool
    public function getMergeRange()
    public function getStyle(): Style
    public function getAppliedStyle(): Style
    public function rebindParent(Worksheet $parent): self
    public function isInRange(string $range): bool
    public static function compareCells(self $a, self $b): int
    public static function getValueBinder(): IValueBinder
    public static function setValueBinder(IValueBinder $binder): void
    public function __clone()
    public function getXfIndex(): int
    public function setXfIndex(int $indexValue): self
    public function setFormulaAttributes(?array $attributes): self
    public function getFormulaAttributes(): mixed
    public function __toString(): string
    public function getIgnoredErrors(): IgnoredErrors
    public function isLocked(): bool
    public function isHiddenOnFormulaBar(): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/CellAddress.php
    class CellAddress implements Stringable
    public function __construct(string $cellAddress, ?Worksheet $worksheet = null)
    public function __destruct()
    private static function validateColumnAndRow(int|string $columnId, int|string $rowId): void
    public static function fromColumnAndRow(int|string $columnId, int|string $rowId, ?Worksheet $worksheet = null): self
    public static function fromColumnRowArray(array $array, ?Worksheet $worksheet = null): self
    public static function fromCellAddress(string $cellAddress, ?Worksheet $worksheet = null): self
    public function fullCellAddress(): string
    public function worksheet(): ?Worksheet
    public function cellAddress(): string
    public function rowId(): int
    public function columnId(): int
    public function columnName(): string
    public function nextRow(int $offset = 1): self
    public function previousRow(int $offset = 1): self
    public function nextColumn(int $offset = 1): self
    public function previousColumn(int $offset = 1): self
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/CellRange.php
    class CellRange implements AddressRange, Stringable
    public function __construct(CellAddress $from, CellAddress $to)
    private function validateFromTo(CellAddress $from, CellAddress $to): void
    private function validateWorksheets(?Worksheet $fromWorksheet, ?Worksheet $toWorksheet): void
    private function cellAddressWrapper(int $column, int $row, ?Worksheet $worksheet = null): CellAddress
    return new class ($cellAddress, $worksheet) extends CellAddress {
    public function nextRow(int $offset = 1): CellAddress
    public function previousRow(int $offset = 1): CellAddress
    public function nextColumn(int $offset = 1): CellAddress
    public function previousColumn(int $offset = 1): CellAddress
    public function from(): CellAddress
    public function to(): CellAddress
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/ColumnRange.php
    class ColumnRange implements AddressRange, Stringable
    public function __construct(string $from, ?string $to = null, ?Worksheet $worksheet = null)
    public function __destruct()
    public static function fromColumnIndexes(int $from, int $to, ?Worksheet $worksheet = null): self
    public static function fromArray(array $array, ?Worksheet $worksheet = null): self
    function (&$column): void {
    private function validateFromTo(int $from, int $to): void
    public function columnCount(): int
    public function shiftDown(int $offset = 1): self
    public function shiftUp(int $offset = 1): self
    public function from(): string
    public function to(): string
    public function fromIndex(): int
    public function toIndex(): int
    public function toCellRange(): CellRange
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/Coordinate.php
    * Helper class to manipulate cell coordinates.
    abstract class Coordinate
    public static function coordinateFromString(string $cellAddress): array
    public static function indexesFromString(string $coordinates): array
    public static function coordinateIsRange(string $cellAddress): bool
    public static function absoluteReference(int|string $cellAddress): string
    public static function absoluteCoordinate(string $cellAddress): string
    public static function splitRange(string $range): array
    public static function buildRange(array $range): string
    public static function rangeBoundaries(string $range): array
    public static function rangeDimension(string $range): array
    public static function getRangeBoundaries(string $range): array
    private static function validateReferenceAndGetData($reference): array
    public static function coordinateIsInsideRange(string $range, string $coordinate): bool
    public static function columnIndexFromString(?string $columnAddress): int
    //    caching using a static within the method is faster than a class static,
    //    We also use the language construct isset() rather than the more costly strlen() function to match the
    public static function stringFromColumnIndex(int|string $columnIndex): string
    public static function extractAllCellReferencesInRange(string $cellRange): array
    private static function processRangeSetOperators(array $operators, array $cells): array
    private static function sortCellReferenceArray(array $cellList): array
    public static function resolveUnionAndIntersection(string $cellBlock, string $implodeCharacter = ','): string
    private static function getReferencesForCellBlock(string $cellBlock): array
    * For example, this function converts:
    public static function mergeRangesInCollection(array $coordinateCollection): array
    private static function getCellBlocksFromRangeString(string $rangeString): array
    private static function validateRange(string $cellBlock, int $startColumnIndex, int $endColumnIndex, int $currentRow, int $endRow): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/DataType.php
    class DataType
    public static function getErrorCodes(): array
    public static function checkString(null|RichText|string $textValue): RichText|string
    public static function checkErrorCode(mixed $value): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/DataValidation.php
    class DataValidation
    public function __construct()
    public function getFormula1(): string
    public function setFormula1(string $formula): static
    public function getFormula2(): string
    public function setFormula2(string $formula): static
    public function getType(): string
    public function setType(string $type): static
    public function getErrorStyle(): string
    public function setErrorStyle(string $errorStyle): static
    public function getOperator(): string
    public function setOperator(string $operator): static
    public function getAllowBlank(): bool
    public function setAllowBlank(bool $allowBlank): static
    public function getShowDropDown(): bool
    public function setShowDropDown(bool $showDropDown): static
    public function getShowInputMessage(): bool
    public function setShowInputMessage(bool $showInputMessage): static
    public function getShowErrorMessage(): bool
    public function setShowErrorMessage(bool $showErrorMessage): static
    public function getErrorTitle(): string
    public function setErrorTitle(string $errorTitle): static
    public function getError(): string
    public function setError(string $error): static
    public function getPromptTitle(): string
    public function setPromptTitle(string $promptTitle): static
    public function getPrompt(): string
    public function setPrompt(string $prompt): static
    public function getHashCode(): string
    public function __clone()
    public function getSqref(): ?string
    public function setSqref(?string $str): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/DataValidator.php
    class DataValidator
    public function isValid(Cell $cell): bool
    private function numericOperator(DataValidation $dataValidation, int|float $cellValue): bool
    private function isValueInList(Cell $cell): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/DefaultValueBinder.php
    class DefaultValueBinder implements IValueBinder
    public function bindValue(Cell $cell, mixed $value): bool
    public static function dataTypeForValue(mixed $value): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/Hyperlink.php
    class Hyperlink
    public function __construct(string $url = '', string $tooltip = '')
    public function getUrl(): string
    public function setUrl(string $url): static
    public function getTooltip(): string
    public function setTooltip(string $tooltip): static
    public function isInternal(): bool
    public function getTypeHyperlink(): string
    public function getHashCode(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/IgnoredErrors.php
    class IgnoredErrors
    public function setNumberStoredAsText(bool $value): self
    public function getNumberStoredAsText(): bool
    public function setFormula(bool $value): self
    public function getFormula(): bool
    public function setTwoDigitTextYear(bool $value): self
    public function getTwoDigitTextYear(): bool
    public function setEvalError(bool $value): self
    public function getEvalError(): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/IValueBinder.php
    public function bindValue(Cell $cell, mixed $value): bool;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/RowRange.php
    class RowRange implements AddressRange, Stringable
    public function __construct(int $from, ?int $to = null, ?Worksheet $worksheet = null)
    public function __destruct()
    public static function fromArray(array $array, ?Worksheet $worksheet = null): self
    private function validateFromTo(int $from, int $to): void
    public function from(): int
    public function to(): int
    public function rowCount(): int
    public function shiftRight(int $offset = 1): self
    public function shiftLeft(int $offset = 1): self
    public function toCellRange(): CellRange
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Cell/StringValueBinder.php
    class StringValueBinder extends DefaultValueBinder implements IValueBinder
    public function setSetIgnoredErrors(bool $setIgnoredErrors = false): self
    public function setNullConversion(bool $suppressConversion = false): self
    public function setBooleanConversion(bool $suppressConversion = false): self
    public function getBooleanConversion(): bool
    public function setNumericConversion(bool $suppressConversion = false): self
    public function setFormulaConversion(bool $suppressConversion = false): self
    public function setConversionForAllValueTypes(bool $suppressConversion = false): self
    public function bindValue(Cell $cell, mixed $value): bool
    protected function bindObjectValue(Cell $cell, object $value): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/CellReferenceHelper.php
    class CellReferenceHelper
    public function __construct(string $beforeCellAddress = 'A1', int $numberOfColumns = 0, int $numberOfRows = 0)
    public function beforeCellAddress(): string
    public function refreshRequired(string $beforeCellAddress, int $numberOfColumns, int $numberOfRows): bool
    public function updateCellReference(string $cellReference = 'A1', bool $includeAbsoluteReferences = false, bool $onlyAbsoluteReferences = false): string
    public function cellAddressInDeleteRange(string $cellAddress): bool
    protected function updateColumnReference(int $newColumnIndex, string $absoluteColumn): string
    protected function updateRowReference(int $newRowIndex, string $absoluteRow): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/Axis.php
    class Axis extends Properties
    public function __construct()
    public function setAxisNumberProperties(string $format_code, ?bool $numeric = null, int $sourceLinked = 0): void
    public function getAxisNumberFormat(): string
    public function getAxisNumberSourceLinked(): string
    public function getAxisIsNumericFormat(): bool
    public function setAxisOption(string $key, null|float|int|string $value): void
    public function setAxisOptionsProperties(
    public function getAxisOptionsProperty(string $property): ?string
    public function setAxisOrientation(string $orientation): void
    public function getAxisType(): string
    public function setAxisType(string $type): self
    public function setFillParameters(?string $color, ?int $alpha = null, ?string $AlphaType = ChartColor::EXCEL_COLOR_TYPE_RGB): void
    public function getFillProperty(string $property): string
    public function getFillColorObject(): ChartColor
    public function setCrossBetween(string $crossBetween): self
    public function getCrossBetween(): string
    public function getMajorGridlines(): ?GridLines
    public function getMinorGridlines(): ?GridLines
    public function setMajorGridlines(?GridLines $gridlines): self
    public function setMinorGridlines(?GridLines $gridlines): self
    public function getAxisText(): ?AxisText
    public function setAxisText(?AxisText $axisText): self
    public function setNoFill(bool $noFill): self
    public function getNoFill(): bool
    public function setDispUnitsTitle(?Title $dispUnitsTitle): self
    public function getDispUnitsTitle(): ?Title
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/AxisText.php
    class AxisText extends Properties
    public function __construct()
    public function setRotation(?int $rotation): self
    public function getRotation(): ?int
    public function getFillColorObject(): ChartColor
    public function getFont(): Font
    public function setFont(Font $font): self
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/Chart.php
    class Chart
    public function __construct(string $name, ?Title $title = null, ?Legend $legend = null, ?PlotArea $plotArea = null, bool $plotVisibleOnly = true, string $displayBlanksAs = DataSeries::EMPTY_AS_GAP, ?Title $xAxisLabel = null, ?Title $yAxisLabel = null, ?Axis $xAxis = null, ?Axis $yAxis = null, ?GridLines $majorGridlines = null, ?GridLines $minorGridlines = null)
    public function __destruct()
    public function getName(): string
    public function setName(string $name): self
    public function getWorksheet(): ?Worksheet
    public function setWorksheet(?Worksheet $worksheet = null): static
    public function getTitle(): ?Title
    public function setTitle(Title $title): static
    public function getLegend(): ?Legend
    public function setLegend(Legend $legend): static
    public function getXAxisLabel(): ?Title
    public function setXAxisLabel(Title $label): static
    public function getYAxisLabel(): ?Title
    public function setYAxisLabel(Title $label): static
    public function getPlotArea(): ?PlotArea
    public function getPlotAreaOrThrow(): PlotArea
    public function setPlotArea(PlotArea $plotArea): self
    public function getPlotVisibleOnly(): bool
    public function setPlotVisibleOnly(bool $plotVisibleOnly): static
    public function getDisplayBlanksAs(): string
    public function setDisplayBlanksAs(string $displayBlanksAs): static
    public function getChartAxisY(): Axis
    public function setChartAxisY(?Axis $axis): self
    public function getChartAxisX(): Axis
    public function setChartAxisX(?Axis $axis): self
    public function setTopLeftPosition(string $cellAddress, ?int $xOffset = null, ?int $yOffset = null): static
    public function getTopLeftPosition(): array
    public function getTopLeftCell(): string
    public function setTopLeftCell(string $cellAddress): static
    public function setTopLeftOffset(?int $xOffset, ?int $yOffset): static
    public function getTopLeftOffset(): array
    public function setTopLeftXOffset(int $xOffset): static
    public function getTopLeftXOffset(): int
    public function setTopLeftYOffset(int $yOffset): static
    public function getTopLeftYOffset(): int
    public function setBottomRightPosition(string $cellAddress = '', ?int $xOffset = null, ?int $yOffset = null): static
    public function getBottomRightPosition(): array
    public function setBottomRightCell(string $cellAddress = ''): static
    public function getBottomRightCell(): string
    public function setBottomRightOffset(?int $xOffset, ?int $yOffset): static
    public function getBottomRightOffset(): array
    public function setBottomRightXOffset(int $xOffset): static
    public function getBottomRightXOffset(): int
    public function setBottomRightYOffset(int $yOffset): static
    public function getBottomRightYOffset(): int
    public function refresh(): void
    public function render(?string $outputDestination = null): bool
    public function getRotX(): ?int
    public function setRotX(?int $rotX): self
    public function getRotY(): ?int
    public function setRotY(?int $rotY): self
    public function getRAngAx(): ?int
    public function setRAngAx(?int $rAngAx): self
    public function getPerspective(): ?int
    public function setPerspective(?int $perspective): self
    public function getOneCellAnchor(): bool
    public function setOneCellAnchor(bool $oneCellAnchor): self
    public function getAutoTitleDeleted(): bool
    public function setAutoTitleDeleted(bool $autoTitleDeleted): self
    public function getNoFill(): bool
    public function setNoFill(bool $noFill): self
    public function getNoBorder(): bool
    public function setNoBorder(bool $noBorder): self
    public function getRoundedCorners(): bool
    public function setRoundedCorners(?bool $roundedCorners): self
    public function getBorderLines(): GridLines
    public function setBorderLines(GridLines $borderLines): self
    public function getFillColor(): ChartColor
    public function setRenderedWidth(?float $width): self
    public function getRenderedWidth(): ?float
    public function setRenderedHeight(?float $height): self
    public function getRenderedHeight(): ?float
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/ChartColor.php
    class ChartColor
    public function __construct($value = '', ?int $alpha = null, ?string $type = null, ?int $brightness = null)
    public function getValue(): string
    public function setValue(string $value): self
    public function getType(): string
    public function setType(string $type): self
    public function getAlpha(): ?int
    public function setAlpha(?int $alpha): self
    public function getBrightness(): ?int
    public function setBrightness(?int $brightness): self
    public function setColorProperties(?string $color, null|float|int|string $alpha = null, ?string $type = null, null|float|int|string $brightness = null): self
    public function setColorPropertiesArray(array $color): self
    public function isUsable(): bool
    public function getColorProperty(string $propertyName): null|int|string
    public static function alphaToXml(int $alpha): string
    public static function alphaFromXml(float|int|string $alpha): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/DataSeries.php
    class DataSeries
    public function __construct(
    public function getPlotType(): ?string
    public function setPlotType(string $plotType): static
    public function getPlotGrouping(): ?string
    public function setPlotGrouping(string $groupingType): static
    public function getPlotDirection(): string
    public function setPlotDirection(string $plotDirection): static
    public function getPlotOrder(): array
    public function getPlotLabels(): array
    public function getPlotLabelByIndex(int $index): bool|DataSeriesValues
    public function getPlotCategories(): array
    public function getPlotCategoryByIndex(int $index): bool|DataSeriesValues
    public function getPlotStyle(): ?string
    public function setPlotStyle(?string $plotStyle): static
    public function getPlotValues(): array
    public function getPlotValuesByIndex(int $index): bool|DataSeriesValues
    public function getPlotBubbleSizes(): array
    public function setPlotBubbleSizes(array $plotBubbleSizes): self
    public function getPlotSeriesCount(): int
    public function getSmoothLine(): bool
    public function setSmoothLine(bool $smoothLine): static
    public function refresh(Worksheet $worksheet): void
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/DataSeriesValues.php
    class DataSeriesValues extends Properties
    public function __construct(
    public function getDataType(): string
    public function setDataType(string $dataType): static
    public function getDataSource(): ?string
    public function setDataSource(?string $dataSource): static
    public function getPointMarker(): ?string
    public function setPointMarker(string $marker): static
    public function getMarkerFillColor(): ChartColor
    public function getMarkerBorderColor(): ChartColor
    public function getPointSize(): int
    public function setPointSize(int $size = 3): static
    public function getFormatCode(): ?string
    public function setFormatCode(string $formatCode): static
    public function getPointCount(): int
    public function getFillColorObject()
    private function stringToChartColor(string $fillString): ChartColor
    private function chartColorToString(ChartColor $chartColor): string
    public function getFillColor(): string|array
    public function setFillColor($color): static
    private function validateColor(string $color): bool
    public function getLineWidth(): null|float|int
    public function setLineWidth(null|float|int $width): static
    public function isMultiLevelSeries(): ?bool
    public function multiLevelCount(): int
    public function getDataValues(): ?array
    public function getDataValue(): mixed
    public function setDataValues(array $dataValues): static
    public function refresh(Worksheet $worksheet, bool $flatten = true): void
    public function getScatterLines(): bool
    public function setScatterLines(bool $scatterLines): self
    public function getBubble3D(): bool
    public function setBubble3D(bool $bubble3D): self
    public function getSmoothLine(): bool
    public function setSmoothLine(bool $smoothLine): static
    public function getLabelLayout(): ?Layout
    public function setLabelLayout(?Layout $labelLayout): self
    public function setTrendLines(array $trendLines): self
    public function getTrendLines(): array
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/Exception.php
    class Exception extends PhpSpreadsheetException
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/GridLines.php
    class GridLines extends Properties
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/Layout.php
    class Layout
    public function __construct(array $layout = [])
    private function initBoolean(array $layout, string $name): void
    private function initColor(array $layout, string $name): void
    public function getLayoutTarget(): ?string
    public function setLayoutTarget(?string $target): static
    public function getXMode(): ?string
    public function setXMode(?string $mode): static
    public function getYMode(): ?string
    public function setYMode(?string $mode): static
    public function getXPosition(): null|float|int
    public function setXPosition(float $position): static
    public function getYPosition(): ?float
    public function setYPosition(float $position): static
    public function getWidth(): ?float
    public function setWidth(?float $width): static
    public function getHeight(): ?float
    public function setHeight(?float $height): static
    public function getShowLegendKey(): ?bool
    public function setShowLegendKey(?bool $showLegendKey): self
    public function getShowVal(): ?bool
    public function setShowVal(?bool $showDataLabelValues): self
    public function getShowCatName(): ?bool
    public function setShowCatName(?bool $showCategoryName): self
    public function getShowSerName(): ?bool
    public function setShowSerName(?bool $showSeriesName): self
    public function getShowPercent(): ?bool
    public function setShowPercent(?bool $showPercentage): self
    public function getShowBubbleSize(): ?bool
    public function setShowBubbleSize(?bool $showBubbleSize): self
    public function getShowLeaderLines(): ?bool
    public function setShowLeaderLines(?bool $showLeaderLines): self
    public function getLabelFillColor(): ?ChartColor
    public function setLabelFillColor(?ChartColor $chartColor): self
    public function getLabelBorderColor(): ?ChartColor
    public function setLabelBorderColor(?ChartColor $chartColor): self
    public function getLabelFont(): ?Font
    public function setLabelFont(?Font $labelFont): self
    public function getLabelEffects(): ?Properties
    public function getLabelFontColor(): ?ChartColor
    public function setLabelFontColor(?ChartColor $chartColor): self
    public function getDLblPos(): string
    public function setDLblPos(string $dLblPos): self
    public function getNumFmtCode(): string
    public function setNumFmtCode(string $numFmtCode): self
    public function getNumFmtLinked(): bool
    public function setNumFmtLinked(bool $numFmtLinked): self
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/Legend.php
    class Legend
    public function __construct(string $position = self::POSITION_RIGHT, ?Layout $layout = null, bool $overlay = false)
    public function getFillColor(): ChartColor
    public function getPosition(): string
    public function setPosition(string $position): bool
    public function getPositionXL(): false|int
    public function setPositionXL(int $positionXL): bool
    public function getOverlay(): bool
    public function setOverlay(bool $overlay): void
    public function getLayout(): ?Layout
    public function getLegendText(): ?AxisText
    public function setLegendText(?AxisText $legendText): self
    public function getBorderLines(): GridLines
    public function setBorderLines(GridLines $borderLines): self
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/PlotArea.php
    class PlotArea
    public function __construct(?Layout $layout = null, array $plotSeries = [])
    public function getLayout(): ?Layout
    public function getPlotGroupCount(): int
    public function getPlotSeriesCount(): int|float
    public function getPlotGroup(): array
    public function getPlotGroupByIndex(int $index): DataSeries
    public function setPlotSeries(array $plotSeries): static
    public function refresh(Worksheet $worksheet): void
    public function setNoFill(bool $noFill): self
    public function getNoFill(): bool
    public function setGradientFillProperties(array $gradientFillStops, ?float $gradientFillAngle): self
    public function getGradientFillAngle(): ?float
    public function getGradientFillStops(): array
    public function getGapWidth(): ?int
    public function setGapWidth(?int $gapWidth): self
    public function getUseUpBars(): bool
    public function setUseUpBars(bool $useUpBars): self
    public function getUseDownBars(): bool
    public function setUseDownBars(bool $useDownBars): self
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/Properties.php
    abstract class Properties
    public function __construct()
    public function getObjectState(): bool
    public function activateObject()
    public static function pointsToXml(float $width): string
    public static function xmlToPoints(string $width): float
    public static function angleToXml(float $angle): string
    public static function xmlToAngle(string $angle): float
    public static function tenthOfPercentToXml(float $value): string
    public static function xmlToTenthOfPercent(string $value): float
    protected function setColorProperties(?string $color, null|float|int|string $alpha, ?string $colorType): array
    protected function getShadowPresetsMap(int $presetsOption): array
    protected function getArrayElementsValue(array $properties, array|int|string $elements): mixed
    public function setGlowProperties(float $size, ?string $colorValue = null, ?int $colorAlpha = null, ?string $colorType = null): void
    public function getGlowProperty(array|string $property): null|array|float|int|string
    public function getGlowColor(string $propertyName): null|int|string
    public function getGlowColorObject(): ChartColor
    public function getGlowSize(): ?float
    protected function setGlowSize(?float $size)
    public function setSoftEdges(?float $size): void
    public function getSoftEdgesSize(): ?float
    public function setShadowProperty(string $propertyName, mixed $value): self
    public function setShadowProperties(int $presets, ?string $colorValue = null, ?string $colorType = null, null|float|int|string $colorAlpha = null, ?float $blur = null, ?int $angle = null, ?float $distance = null): void
    protected function setShadowPresetsProperties(int $presets)
    protected function setShadowPropertiesMapValues(array $propertiesMap, ?array &$reference = null)
    protected function setShadowBlur(?float $blur)
    protected function setShadowAngle(null|float|int|string $angle)
    protected function setShadowDistance(?float $distance)
    public function getShadowColorObject(): ChartColor
    public function getShadowProperty($elements): array|string|null
    public function getShadowArray(): array
    public function copyLineStyles(self $otherProperties): void
    public function getLineColor(): ChartColor
    public function setLineColorProperties(?string $value, ?int $alpha = null, ?string $colorType = null): void
    public function getLineColorProperty(string $propertyName): null|int|string
    public function setLineStyleProperties(
    public function getLineStyleArray(): array
    public function setLineStyleArray(array $lineStyleProperties = []): self
    public function setLineStyleProperty(string $propertyName, mixed $value): self
    public function getLineStyleProperty(array|string $elements): ?string
    protected function getLineStyleArrowSize(int $arraySelector, string $arrayKaySelector): string
    public function getLineStyleArrowParameters(string $arrowSelector, string $propertySelector): string
    public function getLineStyleArrowWidth(string $arrow): ?string
    public function getLineStyleArrowLength(string $arrow): ?string
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/Renderer/IRenderer.php
    public function __construct(Chart $chart);
    public function render(?string $filename): bool;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/Renderer/JpGraph.php
    * are skipped. So, do not measure code coverage for this class till that
    class JpGraph extends JpGraphRendererBase
    protected static function init(): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/Renderer/JpGraphRendererBase.php
    * Base class for different Jpgraph implementations as charts renderer.
    abstract class JpGraphRendererBase implements IRenderer
    public function __construct(Chart $chart)
    private function getGraphWidth(): float
    private function getGraphHeight(): float
    abstract protected static function init(): void;
    private function formatPointMarker($seriesPlot, $markerID)
    private function formatDataSetLabels(int $groupID, array $datasetLabels, $rotation = '')
    private function percentageSumCalculation(int $groupID, $seriesCount)
    private function percentageAdjustValues(array $dataValues, array $sumValues)
    private function getCaption($captionElement)
    private function renderTitle(): void
    private function renderLegend(): void
    private function renderCartesianPlotArea(string $type = 'textlin'): void
    private function renderPiePlotArea(): void
    private function renderRadarPlotArea(): void
    private function getDataLabel(int $groupId, int $index): mixed
    private function renderPlotLine(int $groupID, bool $filled = false, bool $combination = false): void
    private function renderPlotBar(int $groupID, ?string $dimensions = '2d'): void
    private function renderPlotScatter(int $groupID, bool $bubble): void
    private function renderPlotRadar(int $groupID): void
    private function renderPlotContour(int $groupID): void
    private function renderPlotStock(int $groupID): void
    private function renderAreaChart($groupCount): void
    private function renderLineChart($groupCount): void
    private function renderBarChart($groupCount, ?string $dimensions = '2d'): void
    private function renderScatterChart($groupCount): void
    private function renderBubbleChart($groupCount): void
    private function renderPieChart($groupCount, ?string $dimensions = '2d', bool $doughnut = false, bool $multiplePlots = false): void
    private function renderRadarChart($groupCount): void
    private function renderStockChart($groupCount): void
    private function renderContourChart($groupCount): void
    private function renderCombinationChart($groupCount, $outputDestination): bool
    public function render(?string $outputDestination): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/Renderer/MtJpGraphRenderer.php
    class MtJpGraphRenderer extends JpGraphRendererBase
    protected static function init(): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/Title.php
    class Title
    public function __construct(array|RichText|string $caption = '', ?Layout $layout = null, bool $overlay = false)
    public function getCaption(): array|RichText|string
    public function getCaptionText(?Spreadsheet $spreadsheet = null): string
    public function setCaption(array|RichText|string $caption): static
    public function getOverlay(): bool
    public function setOverlay(bool $overlay): self
    public function getLayout(): ?Layout
    public function setCellReference(string $cellReference): self
    public function getCellReference(): string
    public function getCalculatedTitle(?Spreadsheet $spreadsheet): ?string
    public function getFont(): ?Font
    public function setFont(?Font $font): self
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Chart/TrendLine.php
    class TrendLine extends Properties
    public function __construct(
    public function getTrendLineType(): string
    public function setTrendLineType(string $trendLineType): self
    public function getOrder(): int
    public function setOrder(int $order): self
    public function getPeriod(): int
    public function setPeriod(int $period): self
    public function getDispRSqr(): bool
    public function setDispRSqr(bool $dispRSqr): self
    public function getDispEq(): bool
    public function setDispEq(bool $dispEq): self
    public function getName(): string
    public function setName(string $name): self
    public function getBackward(): float
    public function setBackward(float $backward): self
    public function getForward(): float
    public function setForward(float $forward): self
    public function getIntercept(): float
    public function setIntercept(float $intercept): self
    public function setTrendLineProperties(
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Collection/Cells.php
    class Cells
    public function __construct(Worksheet $parent, CacheInterface $cache)
    public function getParent(): ?Worksheet
    public function has(string $cellCoordinate): bool
    public function update(Cell $cell): Cell
    public function delete(string $cellCoordinate): void
    public function getCoordinates(): array
    public function getSortedCoordinates(): array
    public function getSortedCoordinatesInt(): array
    public function getCurrentCoordinate(): ?string
    public function getCurrentColumn(): string
    public function getCurrentRow(): int
    public function getHighestRowAndColumn(): array
    public function getHighestColumn($row = null): string
    public function getHighestRow(?string $column = null): int
    private function getUniqueID(): string
    public function cloneCellCollection(Worksheet $worksheet): static
    public function removeRow($row): void
    public function removeColumn(string $column): void
    private function storeCurrentCell(): void
    private function destructIfNeeded(self $cells, string $message): void
    public function add(string $cellCoordinate, Cell $cell): Cell
    public function get(string $cellCoordinate): ?Cell
    public function unsetWorksheetCells(): void
    public function __destruct()
    private function getAllCacheKeys(): iterable
    private function getCache(string $cellCoordinate): Cell
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Collection/CellsFactory.php
    abstract class CellsFactory
    public static function getInstance(Worksheet $worksheet): Cells
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Collection/Memory/SimpleCache1.php
    class SimpleCache1 implements CacheInterface
    public function clear(): bool
    public function delete($key): bool
    public function deleteMultiple($keys): bool
    public function get($key, $default = null): mixed
    public function getMultiple($keys, $default = null): iterable
    public function has($key): bool
    public function set($key, $value, $ttl = null): bool
    public function setMultiple($values, $ttl = null): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Collection/Memory/SimpleCache3.php
    class SimpleCache3 implements CacheInterface
    public function clear(): bool
    public function delete(string $key): bool
    public function deleteMultiple(iterable $keys): bool
    public function get(string $key, mixed $default = null): mixed
    public function getMultiple(iterable $keys, mixed $default = null): iterable
    public function has(string $key): bool
    public function set(string $key, mixed $value, null|int|DateInterval $ttl = null): bool
    public function setMultiple(iterable $values, null|int|DateInterval $ttl = null): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Comment.php
    class Comment implements IComparable, Stringable
    public function __construct()
    public function getAuthor(): string
    public function setAuthor(string $author): self
    public function getText(): RichText
    public function setText(RichText $text): self
    public function getWidth(): string
    public function setWidth(string $width): self
    public function getHeight(): string
    public function setHeight(string $height): self
    public function getMarginLeft(): string
    public function setMarginLeft(string $margin): self
    public function getMarginTop(): string
    public function setMarginTop(string $margin): self
    public function getVisible(): bool
    public function setVisible(bool $visibility): self
    public function setFillColor(Color $color): self
    public function getFillColor(): Color
    public function setAlignment(string $alignment): self
    public function getAlignment(): string
    public function setTextboxDirection(string $textboxDirection): self
    public function getTextboxDirection(): string
    public function getHashCode(): string
    public function __clone()
    public function __toString(): string
    public function hasBackgroundImage(): bool
    public function getBackgroundImage(): Drawing
    public function setBackgroundImage(Drawing $objDrawing): self
    public function setSizeAsBackgroundImage(): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/DefinedName.php
    abstract class DefinedName
    public function __construct(
    public function __destruct()
    public static function createInstance(
    public static function testIfFormula(string $value): bool
    public function getName(): string
    public function setName(string $name): self
    public function getWorksheet(): ?Worksheet
    public function setWorksheet(?Worksheet $worksheet): self
    public function getValue(): string
    public function setValue(string $value): self
    public function getLocalOnly(): bool
    public function setLocalOnly(bool $localScope): self
    public function getScope(): ?Worksheet
    public function setScope(?Worksheet $worksheet): self
    public function isFormula(): bool
    public static function resolveName(string $definedName, Worksheet $worksheet, string $sheetName = ''): ?self
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Document/Properties.php
    class Properties
    public function __construct()
    public function getCreator(): string
    public function setCreator(string $creator): self
    public function getLastModifiedBy(): string
    public function setLastModifiedBy(string $modifiedBy): self
    private static function intOrFloatTimestamp(null|bool|float|int|string $timestamp): float|int
    public function getCreated(): float|int
    public function setCreated(null|float|int|string $timestamp): self
    public function getModified(): float|int
    public function setModified(null|float|int|string $timestamp): self
    public function getTitle(): string
    public function setTitle(string $title): self
    public function getDescription(): string
    public function setDescription(string $description): self
    public function getSubject(): string
    public function setSubject(string $subject): self
    public function getKeywords(): string
    public function setKeywords(string $keywords): self
    public function getCategory(): string
    public function setCategory(string $category): self
    public function getCompany(): string
    public function setCompany(string $company): self
    public function getManager(): string
    public function setManager(string $manager): self
    public function getCustomProperties(): array
    public function isCustomPropertySet(string $propertyName): bool
    public function getCustomPropertyValue(string $propertyName): bool|int|float|string|null
    public function getCustomPropertyType(string $propertyName): ?string
    private function identifyPropertyType(bool|int|float|string|null $propertyValue): string
    public function setCustomProperty(string $propertyName, bool|int|float|string|null $propertyValue = '', ?string $propertyType = null): self
    public static function convertProperty(bool|int|float|string|null $propertyValue, string $propertyType): bool|int|float|string|null
    private static function convertProperty2(bool|int|float|string|null $propertyValue, string $type): bool|int|float|string|null
    public static function convertPropertyType(string $propertyType): string
    public function getHyperlinkBase(): string
    public function setHyperlinkBase(string $hyperlinkBase): self
    public function getViewport(): string
    public function setViewport(string $viewport): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Document/Security.php
    class Security
    public function __construct()
    public function isSecurityEnabled(): bool
    public function getLockRevision(): bool
    public function setLockRevision(?bool $locked): self
    public function getLockStructure(): bool
    public function setLockStructure(?bool $locked): self
    public function getLockWindows(): bool
    public function setLockWindows(?bool $locked): self
    public function getRevisionsPassword(): string
    public function setRevisionsPassword(?string $password, bool $alreadyHashed = false): static
    public function getWorkbookPassword(): string
    public function setWorkbookPassword(?string $password, bool $alreadyHashed = false): static
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Exception.php
    class Exception extends RuntimeException
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/HashTable.php
    class HashTable
    public function __construct(?array $source = [])
    public function addFromSource(?array $source = null): void
    public function add(IComparable $source): void
    public function remove(IComparable $source): void
    public function clear(): void
    public function count(): int
    public function getIndexForHashCode(string $hashCode): false|int
    public function getByIndex(int $index): ?IComparable
    public function getByHashCode(string $hashCode): ?IComparable
    public function toArray(): array
    public function __clone()
    // each member of this class is an array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Helper/Dimension.php
    class Dimension
    * Phpstan bug has been fixed; this function allows us to
    private static function stanBugFixed(array|int|null $value): array
    public function __construct(string $dimension)
    public function width(): float
    public function height(): float
    public function toUnit(string $unitOfMeasure): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Helper/Downloader.php
    class Downloader
    public function __construct(string $folder, string $filename, ?string $filetype = null)
    public function download(): void
    public function headers(): void
    protected function contentType(): void
    protected function contentDisposition(): void
    protected function cacheHeaders(): void
    protected function fileSize(): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Helper/Handler.php
    class Handler
    public static function suppressed(): bool
    public static function deprecated(): string
    public static function notice(string $value): void
    public static function warning(): bool
    public static function userDeprecated(): bool
    public static function userNotice(): bool
    public static function userWarning(): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Helper/Html.php
    class Html
    private function initialise(): void
    public function toRichTextObject(string $html, bool $preserveWhiteSpace = false): RichText
    private function cleanWhitespace(): void
    private function buildTextRun(): void
    private function rgbToColour(string $rgbValue): string
    public static function colourNameLookup(string $colorName): string
    protected function startFontTag(DOMElement $tag): void
    protected function endFontTag(): void
    protected function startBoldTag(): void
    protected function endBoldTag(): void
    protected function startItalicTag(): void
    protected function endItalicTag(): void
    protected function startUnderlineTag(): void
    protected function endUnderlineTag(): void
    protected function startSubscriptTag(): void
    protected function endSubscriptTag(): void
    protected function startSuperscriptTag(): void
    protected function endSuperscriptTag(): void
    protected function startStrikethruTag(): void
    protected function endStrikethruTag(): void
    public function breakTag(): void
    private function parseTextNode(DOMText $textNode): void
    public function addStartTagCallback(string $tag, callable $callback): void
    public function addEndTagCallback(string $tag, callable $callback): void
    private function handleCallback(DOMElement $element, string $callbackTag, array $callbacks): void
    private function parseElementNode(DOMElement $element): void
    private function parseElements(DOMNode $element): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Helper/Sample.php
    * Helper class to be used in sample code.
    class Sample
    public function isCli(): bool
    public function getScriptFilename(): string
    public function isIndex(): bool
    public function getPageTitle(): string
    public function getPageHeading(): string
    public function getSamples(): array
    public function write(Spreadsheet $spreadsheet, string $filename, array $writers = ['Xlsx', 'Xls'], bool $withCharts = false, ?callable $writerCallback = null, bool $resetActiveSheet = true): void
    protected function isDirOrMkdir(string $folder): bool
    public function getTemporaryFolder(): string
    public function getFilename(string $filename, string $extension = 'xlsx'): string
    public function getTemporaryFilename(string $extension = 'xlsx'): string
    public function log(string $message): void
    public function renderChart(Chart $chart, string $fileName, ?Spreadsheet $spreadsheet = null): void
    public function titles(string $category, string $functionName, ?string $description = null): void
    public function displayGrid(array $matrix): void
    public function logCalculationResult(
    public function logEndingNotes(): void
    public function logWrite(IWriter $writer, string $path, float $callStartTime): void
    public function logRead(string $format, string $path, float $callStartTime): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Helper/Size.php
    class Size implements Stringable
    public function __construct(string $size)
    public function valid(): bool
    public function size(): string
    public function unit(): string
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Helper/TextGrid.php
    class TextGrid
    public function __construct(array $matrix, bool $isCli = true)
    function (&$row): void {
    public function render(): string
    private function renderRows(int $maxRowLength, array $columnWidths): void
    private function renderCells(array $rowData, array $columnWidths): void
    private function renderColumnHeader(int $maxRowLength, array $columnWidths): void
    private function renderFooter(int $maxRowLength, array $columnWidths): void
    private function getColumnWidths(): array
    private function getColumnWidth(array $columnData): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/IComparable.php
    public function getHashCode(): string;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/IOFactory.php
    abstract class IOFactory
    public static function createWriter(Spreadsheet $spreadsheet, string $writerType): IWriter
    public static function createReader(string $readerType): IReader
    public static function load(string $filename, int $flags = 0, ?array $readers = null): Spreadsheet
    public static function identify(string $filename, ?array $readers = null): string
    public static function createReaderForFile(string $filename, ?array $readers = null): IReader
    private static function getReaderTypeFromExtension(string $filename): ?string
    * Register a writer with its type and class name.
    public static function registerWriter(string $writerType, string $writerClass): void
    * Register a reader with its type and class name.
    public static function registerReader(string $readerType, string $readerClass): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/NamedFormula.php
    class NamedFormula extends DefinedName
    public function __construct(
    public function getFormula(): string
    public function setFormula(string $formula): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/NamedRange.php
    class NamedRange extends DefinedName
    public function __construct(
    public function getRange(): string
    public function setRange(string $range): self
    public function getCellsInRange(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/BaseReader.php
    abstract class BaseReader implements IReader
    public function __construct()
    public function getReadDataOnly(): bool
    public function setReadDataOnly(bool $readCellValuesOnly): self
    public function getReadEmptyCells(): bool
    public function setReadEmptyCells(bool $readEmptyCells): self
    public function getIgnoreRowsWithNoCells(): bool
    public function setIgnoreRowsWithNoCells(bool $ignoreRowsWithNoCells): self
    public function getIncludeCharts(): bool
    public function setIncludeCharts(bool $includeCharts): self
    public function getLoadSheetsOnly(): ?array
    public function setLoadSheetsOnly(string|array|null $sheetList): self
    public function setLoadAllSheets(): self
    public function getReadFilter(): IReadFilter
    public function setReadFilter(IReadFilter $readFilter): self
    public function getSecurityScanner(): ?XmlScanner
    public function getSecurityScannerOrThrow(): XmlScanner
    protected function processFlags(int $flags): void
    protected function loadSpreadsheetFromFile(string $filename): Spreadsheet
    public function load(string $filename, int $flags = 0): Spreadsheet
    protected function openFile(string $filename): void
    public function listWorksheetInfo(string $filename): array
    public function listWorksheetNames(string $filename): array
    public function getValueBinder(): ?IValueBinder
    public function setValueBinder(?IValueBinder $valueBinder): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Csv/Delimiter.php
    class Delimiter
    public function __construct($fileHandle, string $escapeCharacter, string $enclosure)
    public function getDefaultDelimiter(): string
    public function linesCounted(): int
    protected function countPotentialDelimiters(): void
    protected function countDelimiterValues(string $line, array $delimiterKeys): void
    public function infer(): ?string
    public function getNextLine()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Csv.php
    class Csv extends BaseReader
    public function __construct()
    public static function setConstructorCallback(?callable $callback): void
    public static function getConstructorCallback(): ?callable
    public function setInputEncoding(string $encoding): self
    public function getInputEncoding(): string
    public function setFallbackEncoding(string $fallbackEncoding): self
    public function getFallbackEncoding(): string
    protected function skipBOM(): void
    protected function checkSeparator(): void
    protected function inferSeparator(): void
    public function listWorksheetInfo(string $filename): array
    protected function loadSpreadsheetFromFile(string $filename): Spreadsheet
    public function loadSpreadsheetFromString(string $contents): Spreadsheet
    private function openFileOrMemory(string $filename): void
    public function setTestAutoDetect(bool $value): self
    private function setAutoDetect(?string $value): ?string
    public function castFormattedNumberToNumeric(
    private function openDataUri(string $filename): void
    public function loadIntoExisting(string $filename, Spreadsheet $spreadsheet): Spreadsheet
    private function loadStringOrFile(string $filename, Spreadsheet $spreadsheet, bool $dataUri): Spreadsheet
    private function loadStringOrFile2(string $filename, Spreadsheet $spreadsheet, bool $dataUri): void
    private function convertBoolean(mixed &$rowDatum): void
    private function convertFormattedNumber(mixed &$rowDatum): string
    public function getDelimiter(): ?string
    public function setDelimiter(?string $delimiter): self
    public function getEnclosure(): string
    public function setEnclosure(string $enclosure): self
    public function getSheetIndex(): int
    public function setSheetIndex(int $indexValue): self
    public function setContiguous(bool $contiguous): self
    public function getContiguous(): bool
    public function setEscapeCharacter(string $escapeCharacter): self
    public function getEscapeCharacter(): string
    public function canRead(string $filename): bool
    private static function guessEncodingTestNoBom(string &$encoding, string &$contents, string $compare, string $setEncoding): void
    private static function guessEncodingNoBom(string $filename): string
    private static function guessEncodingTestBom(string &$encoding, string $first4, string $compare, string $setEncoding): void
    public static function guessEncodingBom(string $filename, ?string $convertString = null): string
    public static function guessEncoding(string $filename, string $dflt = self::DEFAULT_FALLBACK_ENCODING): string
    public function setPreserveNullString(bool $value): self
    public function getPreserveNullString(): bool
    public function setSheetNameIsFileName(bool $sheetNameIsFileName): self
    private static function getCsv(
    public static function affectedByPhp9(
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/DefaultReadFilter.php
    class DefaultReadFilter implements IReadFilter
    public function readCell(string $columnAddress, int $row, string $worksheetName = ''): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Exception.php
    class Exception extends PhpSpreadsheetException
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Gnumeric/PageSetup.php
    class PageSetup
    public function __construct(Spreadsheet $spreadsheet)
    public function printInformation(SimpleXMLElement $sheet): self
    public function sheetMargins(SimpleXMLElement $sheet): self
    private function buildMarginSet(SimpleXMLElement $sheet, array $marginSet): array
    private function adjustMargins(array $marginSet): void
    private function sheetMargin(string $key, float $marginSize): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Gnumeric/Properties.php
    class Properties
    public function __construct(Spreadsheet $spreadsheet)
    private function docPropertiesOld(SimpleXMLElement $gnmXML): void
    private function docPropertiesDC(SimpleXMLElement $officePropertyDC): void
    private function docPropertiesMeta(SimpleXMLElement $officePropertyMeta): void
    private function userDefinedProperties(string $attrName, string $propertyValue): void
    public function readProperties(SimpleXMLElement $xml, SimpleXMLElement $gnmXML): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Gnumeric/Styles.php
    class Styles
    public function __construct(Spreadsheet $spreadsheet, bool $readDataOnly)
    public function read(SimpleXMLElement $sheet, int $maxRow, int $maxCol): void
    private function readStyles(SimpleXMLElement $styleRegion, int $maxRow, int $maxCol): void
    private function addBorderDiagonal(SimpleXMLElement $srssb, array &$styleArray): void
    private function addBorderStyle(SimpleXMLElement $srssb, array &$styleArray, string $direction): void
    private function calcRotation(SimpleXMLElement $styleAttributes): int
    private static function addStyle(array &$styleArray, string $key, string $value): void
    private static function addStyle2(array &$styleArray, string $key1, string $key, string $value): void
    private static function parseBorderAttributes(?SimpleXMLElement $borderAttributes): array
    private static function parseGnumericColour(string $gnmColour): string
    private function addColors(array &$styleArray, SimpleXMLElement $styleAttributes): void
    private function readStyleRange(SimpleXMLElement $styleAttributes, int $maxCol, int $maxRow): string
    private function readStyle(array $styleArray, SimpleXMLElement $styleAttributes, SimpleXMLElement $style): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Gnumeric.php
    class Gnumeric extends BaseReader
    public function __construct()
    public function canRead(string $filename): bool
    private static function matchXml(XMLReader $xml, string $expectedLocalName): bool
    public function listWorksheetNames(string $filename): array
    public function listWorksheetInfo(string $filename): array
    private function gzfileGetContents(string $filename): string
    public static function gnumericMappings(): array
    private function processComments(SimpleXMLElement $sheet): void
    private static function testSimpleXml(mixed $value): SimpleXMLElement
    protected function loadSpreadsheetFromFile(string $filename): Spreadsheet
    public function loadIntoExisting(string $filename, Spreadsheet $spreadsheet): Spreadsheet
    private function setSelectedSheet(SimpleXMLElement $gnmXML): void
    private function setSelectedCells(?SimpleXMLElement $sheet): void
    private function processMergedCells(?SimpleXMLElement $sheet): void
    private function processAutofilter(?SimpleXMLElement $sheet): void
    private function setColumnWidth(int $whichColumn, float $defaultWidth): void
    private function setColumnInvisible(int $whichColumn): void
    private function processColumnLoop(int $whichColumn, int $maxCol, ?SimpleXMLElement $columnOverride, float $defaultWidth): int
    private function processColumnWidths(?SimpleXMLElement $sheet, int $maxCol): void
    private function setRowHeight(int $whichRow, float $defaultHeight): void
    private function setRowInvisible(int $whichRow): void
    private function processRowLoop(int $whichRow, int $maxRow, ?SimpleXMLElement $rowOverride, float $defaultHeight): int
    private function processRowHeights(?SimpleXMLElement $sheet, int $maxRow): void
    private function processDefinedNames(?SimpleXMLElement $gnmXML): void
    private function parseRichText(string $is): RichText
    private function loadCell(
    private function getArrayFormulaRange(string $column, int $row, int $cols, int $rows): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Html.php
    class Html extends BaseReader
    public function __construct()
    public function canRead(string $filename): bool
    private function readBeginning(): string
    private function readEnding(): string
    private static function startsWithTag(string $data): bool
    private static function endsWithTag(string $data): bool
    private static function containsTags(string $data): bool
    public function loadSpreadsheetFromFile(string $filename): Spreadsheet
    protected function setTableStartColumn(string $column): string
    protected function getTableStartColumn(): string
    protected function releaseTableStartColumn(): string
    protected function flushCell(Worksheet $sheet, string $column, int|string $row, mixed &$cellContent, array $attributeArray): void
    private static function convertBoolean(?string $cellContent): bool|string
    private function processDomElementBody(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child): void
    private function processDomElementTitle(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child, array &$attributeArray): void
    private function processDomElementSpanEtc(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child, array &$attributeArray): void
    private function processDomElementHr(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child, array &$attributeArray): void
    private function processDomElementBr(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child, array &$attributeArray): void
    private function processDomElementA(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child, array &$attributeArray): void
    private function processDomElementH1Etc(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child, array &$attributeArray): void
    private function processDomElementLi(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child, array &$attributeArray): void
    private function processDomElementImg(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child, array &$attributeArray): void
    private function processDomElementTable(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child, array &$attributeArray): void
    private function processDomElementTr(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child, array &$attributeArray): void
    private function processDomElementThTdOther(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child, array &$attributeArray): void
    private function processDomElementBgcolor(Worksheet $sheet, int $row, string $column, array $attributeArray): void
    private function processDomElementWidth(Worksheet $sheet, string $column, array $attributeArray): void
    private function processDomElementHeight(Worksheet $sheet, int $row, array $attributeArray): void
    private function processDomElementAlign(Worksheet $sheet, int $row, string $column, array $attributeArray): void
    private function processDomElementVAlign(Worksheet $sheet, int $row, string $column, array $attributeArray): void
    private function processDomElementDataFormat(Worksheet $sheet, int $row, string $column, array $attributeArray): void
    private function processDomElementThTd(Worksheet $sheet, int &$row, string &$column, string &$cellContent, DOMElement $child, array &$attributeArray): void
    protected function processDomElement(DOMNode $element, Worksheet $sheet, int &$row, string &$column, string &$cellContent): void
    public function loadIntoExisting(string $filename, Spreadsheet $spreadsheet): Spreadsheet
    private static function loadProperties(DOMDocument $dom, Spreadsheet $spreadsheet): void
    private static function replaceNonAscii(array $matches): string
    private static function replaceNonAsciiIfNeeded(string $convert): ?string
    public function loadFromString(string $content, ?Spreadsheet $spreadsheet = null): Spreadsheet
    private function loadDocument(DOMDocument $document, Spreadsheet $spreadsheet): Spreadsheet
    public function getSheetIndex(): int
    public function setSheetIndex(int $sheetIndex): static
    private function applyInlineStyle(Worksheet &$sheet, int $row, string $column, array $attributeArray): void
    public function getStyleColor(?string $value): string
    private function insertImage(Worksheet $sheet, string $column, int $row, array $attributes): void
    private static function getStyleArray(array $attributes): array
    public static function getBorderMappings(): array
    public function getBorderStyle(string $style): ?string
    private function setBorderStyle(Style $cellStyle, string $styleValue, string $type): void
    public function listWorksheetInfo(string $filename): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/IReader.php
    public function __construct();
    public function canRead(string $filename): bool;
    public function getReadDataOnly(): bool;
    public function setReadDataOnly(bool $readDataOnly): self;
    public function getReadEmptyCells(): bool;
    public function setReadEmptyCells(bool $readEmptyCells): self;
    public function getIncludeCharts(): bool;
    public function setIncludeCharts(bool $includeCharts): self;
    public function getLoadSheetsOnly(): ?array;
    public function setLoadSheetsOnly(string|array|null $value): self;
    public function setLoadAllSheets(): self;
    public function getReadFilter(): IReadFilter;
    public function setReadFilter(IReadFilter $readFilter): self;
    public function load(string $filename, int $flags = 0): Spreadsheet;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/IReadFilter.php
    public function readCell(string $columnAddress, int $row, string $worksheetName = ''): bool;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Ods/AutoFilter.php
    class AutoFilter extends BaseLoader
    public function read(DOMElement $workbookData): void
    protected function readAutoFilters(DOMElement $workbookData): void
    protected function getAttributeValue(?DOMNode $node, string $attributeName): ?string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Ods/BaseLoader.php
    abstract class BaseLoader
    public function __construct(Spreadsheet $spreadsheet, string $tableNs)
    abstract public function read(DOMElement $workbookData): void;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Ods/DefinedNames.php
    class DefinedNames extends BaseLoader
    public function read(DOMElement $workbookData): void
    protected function readDefinedRanges(DOMElement $workbookData): void
    protected function readDefinedExpressions(DOMElement $workbookData): void
    private function addDefinedName(string $baseAddress, string $definedName, string $value): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Ods/FormulaTranslator.php
    class FormulaTranslator
    private static function replaceQuotedPeriod(string $value): string
    public static function convertToExcelAddressValue(string $openOfficeAddress): string
    public static function convertToExcelFormulaValue(string $openOfficeFormula): string
    // Convert ODS function argument separators to Excel function argument separators
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Ods/PageSettings.php
    class PageSettings
    public function __construct(DOMDocument $styleDom)
    private function setDomNameSpaces(DOMDocument $styleDom): void
    private function readPageSettingStyles(DOMDocument $styleDom): void
    private function readStyleMasterLookup(DOMDocument $styleDom): void
    public function readStyleCrossReferences(DOMDocument $contentDom): void
    public function setVisibilityForWorksheet(Worksheet $worksheet, string $styleName): void
    public function setPrintSettingsForWorksheet(Worksheet $worksheet, string $styleName): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Ods/Properties.php
    class Properties
    public function __construct(Spreadsheet $spreadsheet)
    public function load(SimpleXMLElement $xml, array $namespacesMeta): void
    private function setCoreProperties(DocumentProperties $docProps, SimpleXMLElement $officePropertyDC): void
    private function setMetaProperties(
    private function setUserDefinedProperty(iterable $propertyValueAttributes, string $propertyValue, DocumentProperties $docProps): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Ods.php
    class Ods extends BaseReader
    public function __construct()
    public function canRead(string $filename): bool
    public function listWorksheetNames(string $filename): array
    public function listWorksheetInfo(string $filename): array
    private static function getXmlName(XMLReader $xml): string
    protected function loadSpreadsheetFromFile(string $filename): Spreadsheet
    public function loadIntoExisting(string $filename, Spreadsheet $spreadsheet): Spreadsheet
    private function processSettings(ZipArchive $zip, Spreadsheet $spreadsheet): void
    private function lookForActiveSheet(DOMElement $settings, Spreadsheet $spreadsheet, string $configNs): void
    private function lookForSelectedCells(DOMElement $settings, Spreadsheet $spreadsheet, string $configNs): void
    private function setSelected(Spreadsheet $spreadsheet, string $wsname, string $setCol, string $setRow): void
    protected function scanElementForText(DOMNode $element): string
    private static function getMultiplier(?DOMAttr $cAttr): int
    private function parseRichText(string $is): RichText
    private function processMergedCells(
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Security/XmlScanner.php
    class XmlScanner
    public function __construct(string $pattern = '<!DOCTYPE')
    public static function getInstance(Reader\IReader $reader): self
    public function setAdditionalCallback(callable $callback): void
    private static function forceString(mixed $arg): string
    private function toUtf8(string $xml): string
    private function findCharSet(string $xml): string
    public function scan($xml): string
    public function scanFile(string $filestream): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Slk.php
    class Slk extends BaseReader
    public function __construct()
    public function canRead(string $filename): bool
    private function canReadOrBust(string $filename): void
    public function listWorksheetInfo(string $filename): array
    protected function loadSpreadsheetFromFile(string $filename): Spreadsheet
    private function processFormula(string $rowDatum, bool &$hasCalculatedValue, string &$cellDataFormula, string $row, string $column): void
    private function processCRecord(array $rowData, Spreadsheet &$spreadsheet, string &$row, string &$column): void
    private function processCFinal(Spreadsheet &$spreadsheet, bool $hasCalculatedValue, string $cellDataFormula, string $cellData, string $coordinate, bool $tryNumeric): void
    private function processFRecord(array $rowData, Spreadsheet &$spreadsheet, string &$row, string &$column): void
    private function styleSettings(string $rowDatum, array &$styleData, string &$fontStyle): void
    private function addFormats(Spreadsheet &$spreadsheet, string $formatStyle, string $row, string $column): void
    private function addFonts(Spreadsheet &$spreadsheet, string $fontStyle, string $row, string $column): void
    private function addStyle(Spreadsheet &$spreadsheet, array $styleData, string $row, string $column): void
    private function addWidth(Spreadsheet $spreadsheet, string $columnWidth, string $startCol, string $endCol): void
    private function processPRecord(array $rowData, Spreadsheet &$spreadsheet): void
    private function processPColors(string $rowDatum, array &$formatArray): void
    private function processPFontStyles(string $rowDatum, array &$formatArray): void
    private function processPFinal(Spreadsheet &$spreadsheet, array $formatArray): void
    public function loadIntoExisting(string $filename, Spreadsheet $spreadsheet): Spreadsheet
    private function columnRowFromRowData(array $rowData, string &$column, string &$row): void
    public function getSheetIndex(): int
    public function setSheetIndex(int $sheetIndex): static
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/Biff5.php
    class Biff5 extends Xls
    public static function readBIFF5CellRangeAddressFixed(string $subData): string
    public static function readBIFF5CellRangeAddressList(string $subData): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/Biff8.php
    class Biff8 extends Xls
    protected static function readBIFF8ConstantArray(string $arrayData): array
    private static function readBIFF8Constant(string $valueData): array
    public static function readBIFF8CellRangeAddressList(string $subData): array
    protected static function readBIFF8CellAddress(string $cellAddressStructure): string
    protected static function readBIFF8CellAddressB(string $cellAddressStructure, string $baseCell = 'A1'): string
    protected static function readBIFF8CellRangeAddressFixed(string $subData): string
    protected static function readBIFF8CellRangeAddress(string $subData): string
    protected static function readBIFF8CellRangeAddressB(string $subData, string $baseCell = 'A1'): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/Color/BIFF5.php
    class BIFF5
    public static function lookup(int $color): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/Color/BIFF8.php
    class BIFF8
    public static function lookup(int $color): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/Color/BuiltIn.php
    class BuiltIn
    public static function lookup(int $color): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/Color.php
    class Color
    public static function map(int $color, array $palette, int $version): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/ConditionalFormatting.php
    class ConditionalFormatting extends Xls
    public static function type(int $type): ?string
    public static function operator(int $operator): ?string
    protected function readCFHeader2(Xls $xls): array
    protected function readCFRule2(array $cellRangeAddresses, Xls $xls): void
    /*private function getCFStyleOptions(int $options, Style $style, Xls $xls): void
    private function getCFFontStyle(string $options, Style $style, Xls $xls): void
    /*private function getCFAlignmentStyle(string $options, Style $style, Xls $xls): void
    private function getCFBorderStyle(string $options, Style $style, bool $hasBorderLeft, bool $hasBorderRight, bool $hasBorderTop, bool $hasBorderBottom, Xls $xls): void
    private function getCFFillStyle(string $options, Style $style, Xls $xls): void
    /*private function getCFProtectionStyle(string $options, Style $style, Xls $xls): void
    private function readCFFormula(string $recordData, int $offset, int $size, Xls $xls): float|int|string|null
    private function setCFRules(array $cellRanges, string $type, string $operator, null|float|int|string $formula1, null|float|int|string $formula2, Style $style, bool $noFormatSet, Xls $xls): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/DataValidationHelper.php
    class DataValidationHelper extends Xls
    public static function type(int $type): ?string
    public static function errorStyle(int $errorStyle): ?string
    public static function operator(int $operator): ?string
    protected function readDataValidation2(Xls $xls): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/ErrorCode.php
    class ErrorCode
    public static function lookup(int $code): string|bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/Escher.php
    class Escher
    public function __construct(BSE|BstoreContainer|DgContainer|DggContainer|\PhpOffice\PhpSpreadsheet\Shared\Escher|SpContainer|SpgrContainer $object)
    public function load(string $data): BSE|BstoreContainer|DgContainer|DggContainer|\PhpOffice\PhpSpreadsheet\Shared\Escher|SpContainer|SpgrContainer
    private function readDefault(): void
    private function readDggContainer(): void
    private function readDgg(): void
    private function readBstoreContainer(): void
    private function readBSE(): void
    private function readBlipJPEG(): void
    private function readBlipPNG(): void
    private function readOPT(): void
    private function readTertiaryOPT(): void
    private function readSplitMenuColors(): void
    private function readDgContainer(): void
    private function readDg(): void
    private function readSpgrContainer(): void
    private function readSpContainer(): void
    private function readSpgr(): void
    private function readSp(): void
    private function readClientTextbox(): void
    private function readClientAnchor(): void
    private function applyAttribute(string $name, mixed $value): void
    private function readClientData(): void
    private function readOfficeArtRGFOPTE(string $data, int $n): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/ListFunctions.php
    class ListFunctions extends Xls
    protected function listWorksheetNames2(string $filename, Xls $xls): array
    protected function listWorksheetInfo2(string $filename, Xls $xls): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/LoadSpreadsheet.php
    class LoadSpreadsheet extends Xls
    protected function loadSpreadsheetFromFile2(string $filename, Xls $xls): Spreadsheet
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/Mappings.php
    class Mappings
    * First element of array is Excel function name.
    * Value is Excel function name.
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/MD5.php
    class MD5
    public function __construct()
    public function reset(): void
    public function getContext(): string
    public function add(string $data): void
    private static function f(int $X, int $Y, int $Z): int
    private static function g(int $X, int $Y, int $Z): int
    private static function h(int $X, int $Y, int $Z): int
    private static function i(int $X, int $Y, int $Z): int
    private static function step(callable $func, int &$A, int $B, int $C, int $D, int $M, int $s, $t): void
    private static function signedInt($result): int
    private static function rotate(int $decimal, int $bits): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/RC4.php
    class RC4
    public function __construct(string $key)
    public function RC4(string $data): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/Style/Border.php
    class Border
    public static function lookup(int $index): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/Style/CellAlignment.php
    class CellAlignment
    public static function horizontal(Alignment $alignment, int $horizontal): void
    public static function vertical(Alignment $alignment, int $vertical): void
    public static function wrap(Alignment $alignment, int $wrap): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/Style/CellFont.php
    class CellFont
    public static function escapement(Font $font, int $escapement): void
    public static function underline(Font $font, int $underline): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls/Style/FillPattern.php
    class FillPattern
    public static function lookup(int $index): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xls.php
    class Xls extends XlsBase
    public function listWorksheetNames(string $filename): array
    public function listWorksheetInfo(string $filename): array
    protected function loadSpreadsheetFromFile(string $filename): Spreadsheet
    protected function readRecordData(string $data, int $pos, int $len): string
    protected function loadOLE(string $filename): void
    protected function readSummaryInformation(): void
    // offset: 28; size: 16; first section's class id: e0 85 9f f2 f9 4f 68 10 ab 91 08 00 2b 27 b3 d9
    protected function readDocumentSummaryInformation(): void
    // offset: 28;    size: 16;    first section's class id: 02 d5 cd d5 9c 2e 1b 10 93 97 08 00 2b 2c f9 ae
    protected function readDefault(): void
    protected function readNote(): void
    protected function readTextObject(): void
    protected function readBof(): void
    protected function readFilepass(): void
    private function makeKey(int $block, string $valContext): Xls\RC4
    private function verifyPassword(string $password, string $docid, string $salt_data, string $hashedsalt_data, string &$valContext): bool
    protected function readCodepage(): void
    protected function readDateMode(): void
    protected function readFont(): void
    protected function readFormat(): void
    protected function readXf(): void
    protected function readXfExt(): void
    protected function readStyle(): void
    protected function readPalette(): void
    protected function readSheet(): void
    protected function readExternalBook(): void
    protected function readExternName(): void
    protected function readExternSheet(): void
    protected function readDefinedName(): void
    protected function readMsoDrawingGroup(): void
    protected function readSst(): void
    protected function readPrintGridlines(): void
    protected function readDefaultRowHeight(): void
    protected function readSheetPr(): void
    protected function readHorizontalPageBreaks(): void
    protected function readVerticalPageBreaks(): void
    protected function readHeader(): void
    protected function readFooter(): void
    protected function readHcenter(): void
    protected function readVcenter(): void
    protected function readLeftMargin(): void
    protected function readRightMargin(): void
    protected function readTopMargin(): void
    protected function readBottomMargin(): void
    protected function readPageSetup(): void
    protected function readProtect(): void
    protected function readScenProtect(): void
    protected function readObjectProtect(): void
    protected function readPassword(): void
    protected function readDefColWidth(): void
    protected function readColInfo(): void
    protected function readRow(): void
    protected function readRk(): void
    protected function readLabelSst(): void
    protected function readMulRk(): void
    protected function readNumber(): void
    protected function readFormula(): void
    * Read a SHAREDFMLA record. This function just stores the binary shared formula in the reader,
    protected function readSharedFmla(): void
    protected function readString(): string
    protected function readBoolErr(): void
    protected function readMulBlank(): void
    protected function readLabel(): void
    protected function readBlank(): void
    protected function readMsoDrawing(): void
    protected function readObj(): void
    protected function readWindow2(): void
    protected function readPageLayoutView(): void
    protected function readScl(): void
    protected function readPane(): void
    protected function readSelection(): string
    private function includeCellRangeFiltered(string $cellRangeAddress): bool
    protected function readMergedCells(): void
    protected function readHyperLink(): void
    protected function readDataValidations(): void
    protected function readDataValidation(): void
    protected function readSheetLayout(): void
    protected function readSheetProtection(): void
    protected function readRangeProtection(): void
    protected function readContinue(): void
    private function getSplicedRecordData(): array
    protected function getFormulaFromStructure(string $formulaStructure, string $baseCell = 'A1'): string
    private function getFormulaFromData(string $formulaData, string $additionalData = '', string $baseCell = 'A1'): string
    private function createFormulaFromTokens(array $tokens, string $additionalData): string
    case 'tAttrSum': // SUM function with one parameter
    case 'tFunc': // function with fixed number of arguments
    case 'tFuncV': // function with variable number of arguments
    $function = array_pop($formulaStrings);
    private function getNextToken(string $formulaData, string $baseCell = 'A1'): array
    // offset: 2; size: 2; number of choices in the CHOOSE function ($nc, number of parameters decreased by 1)
    case 0x21:    //    function with fixed number of arguments
    throw new Exception('Unrecognized function in formula');
    case 0x22:    //    function with variable number of arguments
    $function = Xls\Mappings::TFUNCV_MAPPINGS[$index] ?? null;
    if ($function === null) {
    throw new Exception('Unrecognized function in formula');
    protected function readSheetRangeByRefIndex(int $index): string|false
    protected function readByteStringShort(string $subData): array
    protected function readByteStringLong(string $subData): array
    protected function parseRichText(string $is): RichText
    * For now, however, this function makes it readable,
    public function getMapCellStyleXfIndex(): array
    protected function readCFHeader(): array
    protected function readCFRule(array $cellRangeAddresses): void
    public function getVersion(): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/XlsBase.php
    class XlsBase extends BaseReader
    public function setCodepage(string $codepage): void
    public function getCodepage(): string
    public function canRead(string $filename): bool
    protected static function readRGB(string $rgb): array
    * function will automatically find out where the Unicode string ends.
    protected static function readUnicodeStringShort(string $subData): array
    * this function is under construction, needs to support rich text, and Asian phonetic settings.
    protected static function readUnicodeStringLong(string $subData): array
    * this function is under construction, needs to support rich text, and Asian phonetic settings
    protected static function readUnicodeString(string $subData, int $characterCount): array
    protected static function UTF8toExcelDoubleQuoted(string $value): string
    protected static function extractNumber(string $data): int|float
    protected static function getIEEE754(int $rknum): float|int
    protected static function encodeUTF16(string $string, bool $compressed = false): string
    protected static function uncompressByteString(string $string): string
    protected function decodeCodepage(string $string): string
    public static function getUInt2d(string $data, int $pos): int
    public static function getInt2d(string $data, int $pos): int
    public static function getInt4d(string $data, int $pos): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/AutoFilter.php
    class AutoFilter
    public function __construct(Table|Worksheet $parent, SimpleXMLElement $worksheetXml)
    public function load(): void
    private function readAutoFilter(string $autoFilterRange): void
    private function readDateRangeAutoFilter(SimpleXMLElement $filters, Column $column): void
    private function readCustomAutoFilter(?SimpleXMLElement $filterColumn, Column $column): void
    private function readDynamicAutoFilter(?SimpleXMLElement $filterColumn, Column $column): void
    private function readTopTenAutoFilter(?SimpleXMLElement $filterColumn, Column $column): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/BaseParserClass.php
    class BaseParserClass
    protected static function boolean(mixed $value): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/Chart.php
    class Chart
    public function __construct(string $cNamespace = Namespaces::CHART, string $aNamespace = Namespaces::DRAWINGML)
    private static function getAttributeString(SimpleXMLElement $component, string $name): string|null
    private static function getAttributeInteger(SimpleXMLElement $component, string $name): int|null
    private static function getAttributeBoolean(SimpleXMLElement $component, string $name): bool|null
    private static function getAttributeFloat(SimpleXMLElement $component, string $name): float|null
    public function readChart(SimpleXMLElement $chartElements, string $chartName): \PhpOffice\PhpSpreadsheet\Chart\Chart
    private function chartTitle(SimpleXMLElement $titleDetails): Title
    private function chartLayoutDetails(SimpleXMLElement $chartDetail): ?Layout
    private function chartDataSeries(SimpleXMLElement $chartDetail, string $plotType): DataSeries
    private function chartDataSeriesValueSet(SimpleXMLElement $seriesDetail, ?string $marker = null, ?ChartColor $fillColor = null, ?string $pointSize = null): ?DataSeriesValues
    private function chartDataSeriesValues(SimpleXMLElement $seriesValueSet, string $dataType = 'n'): array
    private function chartDataSeriesValuesMultiLevel(SimpleXMLElement $seriesValueSet, string $dataType = 'n'): array
    private function parseRichText(SimpleXMLElement $titleDetailPart): RichText
    private function parseFont(SimpleXMLElement $titleDetailPart): ?Font
    private function readChartAttributes(?SimpleXMLElement $chartDetail): array
    private function setChartAttributes(Layout $plotArea, array $plotAttributes): void
    private function readEffects(SimpleXMLElement $chartDetail, ?ChartProperties $chartObject, bool $getSppr = true): void
    private function readColor(SimpleXMLElement $colorXml): array
    private function readLineStyle(SimpleXMLElement $chartDetail, ?ChartProperties $chartObject): void
    private function setAxisProperties(SimpleXMLElement $chartDetail, ?Axis $whichAxis): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/ColumnAndRowAttributes.php
    class ColumnAndRowAttributes extends BaseParserClass
    public function __construct(Worksheet $workSheet, ?SimpleXMLElement $worksheetXml = null)
    private function setColumnAttributes(string $columnAddress, array $columnAttributes): void
    private function setRowAttributes(int $rowNumber, array $rowAttributes): void
    public function load(?IReadFilter $readFilter = null, bool $readDataOnly = false, bool $ignoreRowsWithNoCells = false): void
    if ($readFilter !== null && $readFilter::class === DefaultReadFilter::class) {
    private function isFilteredColumn(IReadFilter $readFilter, string $columnCoordinate, array $rowsAttributes): bool
    private function readColumnAttributes(SimpleXMLElement $worksheetCols, bool $readDataOnly): array
    private function readColumnRangeAttributes(?SimpleXMLElement $column, bool $readDataOnly): array
    private function isFilteredRow(IReadFilter $readFilter, int $rowCoordinate, array $columnsAttributes): bool
    private function readRowAttributes(SimpleXMLElement $worksheetRow, bool $readDataOnly, bool $ignoreRowsWithNoCells): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/ConditionalStyles.php
    class ConditionalStyles
    public function __construct(Worksheet $workSheet, SimpleXMLElement $worksheetXml, array $dxfs, StyleReader $styleReader)
    public function load(): void
    public function loadFromExt(): void
    private function setConditionalsFromExt(array $conditionals): void
    private function readConditionalsFromExt(SimpleXMLElement $extLst): array
    private function readConditionalRuleFromExt(SimpleXMLElement $cfRuleXml, SimpleXMLElement $attributes): Conditional
    private function readStyleFromExt(SimpleXMLElement $extCfRuleXml): Style
    private function readConditionalStyles(SimpleXMLElement $xmlSheet): array
    private function setConditionalStyles(Worksheet $worksheet, array $conditionals, SimpleXMLElement $xmlExtLst): void
    private function readStyleRules(array $cfRules, SimpleXMLElement $extLst): array
    private function readDataBarOfConditionalRule(SimpleXMLElement $cfRule, array $conditionalFormattingRuleExtensions): ConditionalDataBar
    private function readColorScale(SimpleXMLElement|stdClass $cfRule): ConditionalColorScale
    private function readDataBarExtLstOfConditionalRule(ConditionalDataBar $dataBar, SimpleXMLElement $cfRule, array $conditionalFormattingRuleExtensions): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/DataValidations.php
    class DataValidations
    public function __construct(Worksheet $workSheet, SimpleXMLElement $worksheetXml)
    public function load(): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/Hyperlinks.php
    class Hyperlinks
    public function __construct(Worksheet $workSheet)
    public function readHyperlinks(SimpleXMLElement $relsWorksheet): void
    public function setHyperlinks(SimpleXMLElement $worksheetXml): void
    private function setHyperlink(SimpleXMLElement $hyperlink, Worksheet $worksheet): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/Namespaces.php
    class Namespaces
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/PageSetup.php
    class PageSetup extends BaseParserClass
    public function __construct(Worksheet $workSheet, ?SimpleXMLElement $worksheetXml = null)
    public function load(array $unparsedLoadedData): array
    private function margins(SimpleXMLElement $xmlSheet, Worksheet $worksheet): void
    private function pageSetup(SimpleXMLElement $xmlSheet, Worksheet $worksheet, array $unparsedLoadedData): array
    private function headerFooter(SimpleXMLElement $xmlSheet, Worksheet $worksheet): void
    private function pageBreaks(SimpleXMLElement $xmlSheet, Worksheet $worksheet): void
    private function rowBreaks(SimpleXMLElement $xmlSheet, Worksheet $worksheet): void
    private function columnBreaks(SimpleXMLElement $xmlSheet, Worksheet $worksheet): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/Properties.php
    class Properties
    public function __construct(XmlScanner $securityScanner, DocumentProperties $docProps)
    private function extractPropertyData(string $propertyData): ?SimpleXMLElement
    public function readCoreProperties(string $propertyData): void
    public function readExtendedProperties(string $propertyData): void
    public function readCustomProperties(string $propertyData): void
    private function getArrayItem(null|array|false $array): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/SharedFormula.php
    class SharedFormula
    public function __construct(string $master, string $formula)
    public function master(): string
    public function formula(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/SheetViewOptions.php
    class SheetViewOptions extends BaseParserClass
    public function __construct(Worksheet $workSheet, ?SimpleXMLElement $worksheetXml = null)
    public function load(bool $readDataOnly, Styles $styleReader): void
    private function tabColor(SimpleXMLElement $sheetPr, Styles $styleReader): void
    private function codeName(SimpleXMLElement $sheetPrx): void
    private function outlines(SimpleXMLElement $sheetPr): void
    private function pageSetup(SimpleXMLElement $sheetPr): void
    private function sheetFormat(SimpleXMLElement $sheetFormatPrx): void
    private function printOptions(SimpleXMLElement $printOptionsx): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/SheetViews.php
    class SheetViews extends BaseParserClass
    public function __construct(SimpleXMLElement $sheetViewXml, Worksheet $workSheet)
    public function load(): void
    private function zoomScale(): void
    private function view(): void
    private function topLeft(): void
    private function gridLines(): void
    private function headers(): void
    private function direction(): void
    private function showZeros(): void
    private function pane(): void
    private function selection(?SimpleXMLElement $selection, bool $usesPanes): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/Styles.php
    class Styles extends BaseParserClass
    public function setNamespace(string $namespace): void
    public function setWorkbookPalette(array $palette): void
    private function getStyleAttributes(SimpleXMLElement $value): SimpleXMLElement
    public function setStyleXml(SimpleXMLElement $styleXml): void
    public function setTheme(Theme $theme): void
    public function setStyleBaseData(?Theme $theme = null, array $styles = [], array $cellStyles = []): void
    public function readFontStyle(Font $fontStyle, SimpleXMLElement $fontStyleXml): void
    private function readNumberFormat(NumberFormat $numfmtStyle, SimpleXMLElement $numfmtStyleXml): void
    public function readFillStyle(Fill $fillStyle, SimpleXMLElement $fillStyleXml): void
    public function readBorderStyle(Borders $borderStyle, SimpleXMLElement $borderStyleXml): void
    private function getAttribute(SimpleXMLElement $xml, string $attribute): string
    private function readBorder(Border $border, SimpleXMLElement $borderXml): void
    public function readAlignmentStyle(Alignment $alignment, SimpleXMLElement $alignmentXml): void
    private static function formatGeneral(string $formatString): string
    public function readStyle(Style $docStyle, SimpleXMLElement|stdClass $style): void
    public function readProtectionLocked(Style $docStyle, SimpleXMLElement $style): void
    public function readProtectionHidden(Style $docStyle, SimpleXMLElement $style): void
    public function readColor(SimpleXMLElement $color, bool $background = false): string
    public function dxfs(bool $readDataOnly = false): array
    public function styles(): array
    private static function getArrayItem(mixed $array): ?SimpleXMLElement
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/TableReader.php
    class TableReader
    public function __construct(Worksheet $workSheet, SimpleXMLElement $tableXml)
    public function load(): void
    private function readTable(string $tableRange): void
    private function readTableAutoFilter(Table $table, SimpleXMLElement $autoFilterXml): void
    private function readTableColumns(Table $table, SimpleXMLElement $tableColumnsXml): void
    private function readTableStyle(Table $table, SimpleXMLElement $tableStyleInfoXml): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/Theme.php
    class Theme
    public function __construct(string $themeName, string $colourSchemeName, array $colourMap)
    public function getThemeName(): string
    public function getColourSchemeName(): string
    public function getColourByIndex(int $index): ?string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx/WorkbookView.php
    class WorkbookView
    public function __construct(Spreadsheet $spreadsheet)
    public function viewSettings(SimpleXMLElement $xmlWorkbook, string $mainNS, array $mapSheetId, bool $readDataOnly): void
    public static function testSimpleXml(mixed $value): SimpleXMLElement
    public static function getAttributes(?SimpleXMLElement $value, string $ns = ''): SimpleXMLElement
    private function castXsdBooleanToBool(string $xsdBoolean): bool
    private function horizontalScroll(SimpleXMLElement $workbookViewAttributes): void
    private function verticalScroll(SimpleXMLElement $workbookViewAttributes): void
    private function sheetTabs(SimpleXMLElement $workbookViewAttributes): void
    private function minimized(SimpleXMLElement $workbookViewAttributes): void
    private function autoFilterDateGrouping(SimpleXMLElement $workbookViewAttributes): void
    private function firstSheet(SimpleXMLElement $workbookViewAttributes): void
    private function visibility(SimpleXMLElement $workbookViewAttributes): void
    private function tabRatio(SimpleXMLElement $workbookViewAttributes): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xlsx.php
    class Xlsx extends BaseReader
    public function __construct()
    public function canRead(string $filename): bool
    public static function testSimpleXml(mixed $value): SimpleXMLElement
    public static function getAttributes(?SimpleXMLElement $value, string $ns = ''): SimpleXMLElement
    private static function xpathNoFalse(SimpleXMLElement $sxml, string $path): array
    public static function falseToArray(mixed $value): array
    private function loadZip(string $filename, string $ns = '', bool $replaceUnclosedBr = false): SimpleXMLElement
    // This function is just to identify cases where I'm not sure
    private function loadZipNonamespace(string $filename, string $ns): SimpleXMLElement
    public function listWorksheetNames(string $filename): array
    public function listWorksheetInfo(string $filename): array
    private static function castToBoolean(SimpleXMLElement $c): bool
    private static function castToError(?SimpleXMLElement $c): ?string
    private static function castToString(?SimpleXMLElement $c): ?string
    public static function replacePrefixes(string $formula): string
    private function castToFormula(?SimpleXMLElement $c, string $r, string &$cellDataType, mixed &$value, mixed &$calculatedValue, string $castBaseType, bool $updateSharedCells = true): void
    private function fileExistsInArchive(ZipArchive $archive, string $fileName = ''): bool
    private function getFromZipArchive(ZipArchive $archive, string $fileName = ''): string
    protected function loadSpreadsheetFromFile(string $filename): Spreadsheet
    private function parseRichText(?SimpleXMLElement $is): RichText
    private function readRibbon(Spreadsheet $excel, string $customUITarget, ZipArchive $zip): void
    private static function getArrayItem(null|array|bool|SimpleXMLElement $array, int|string $key = 0): mixed
    private static function getArrayItemString(null|array|bool|SimpleXMLElement $array, int|string $key = 0): string
    private static function getArrayItemIntOrSxml(null|array|bool|SimpleXMLElement $array, int|string $key = 0): int|SimpleXMLElement
    private static function dirAdd(null|SimpleXMLElement|string $base, null|SimpleXMLElement|string $add): string
    private static function toCSSArray(string $style): array
    public static function stripWhiteSpaceFromStyleString(string $string): string
    private static function boolean(string $value): bool
    private function readHyperLinkDrawing(\PhpOffice\PhpSpreadsheet\Worksheet\Drawing $objDrawing, SimpleXMLElement $cellAnchor, array $hyperlinks): void
    private function readProtection(Spreadsheet $excel, SimpleXMLElement $xmlWorkbook): void
    private static function getLockValue(SimpleXMLElement $protection, string $key): ?bool
    private function readFormControlProperties(Spreadsheet $excel, string $dir, string $fileWorksheet, Worksheet $docSheet, array &$unparsedLoadedData): void
    private function readPrinterSettings(Spreadsheet $excel, string $dir, string $fileWorksheet, Worksheet $docSheet, array &$unparsedLoadedData): void
    private function getWorkbookBaseName(): array
    private function readSheetProtection(Worksheet $docSheet, SimpleXMLElement $xmlSheet): void
    private function readAutoFilter(
    private function readBackgroundImage(
    private function readTables(
    private function readTablesInTablesFile(
    private static function extractStyles(?SimpleXMLElement $sxml, string $node1, string $node2): array
    private static function extractPalette(?SimpleXMLElement $sxml): array
    private function processIgnoredErrors(SimpleXMLElement $xml, Worksheet $sheet): void
    private static function storeFormulaAttributes(SimpleXMLElement $f, Worksheet $docSheet, string $r): void
    private static function onlyNoteVml(string $data): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xml/DataValidations.php
    class DataValidations
    private function replaceR1C1(array $matches): string
    public function loadDataValidations(SimpleXMLElement $worksheet, Spreadsheet $spreadsheet): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xml/PageSettings.php
    class PageSettings
    public function __construct(SimpleXMLElement $xmlX)
    public function loadPageSettings(Spreadsheet $spreadsheet): void
    private function getPrintDefaults(): stdClass
    private function pageSetup(SimpleXMLElement $xmlX, stdClass $printDefaults): stdClass
    private function printSetup(SimpleXMLElement $xmlX, stdClass $printDefaults): stdClass
    private function setLayout(stdClass $printDefaults, SimpleXMLElement $pageSetupAttributes): void
    private function setMargins(stdClass $printDefaults, SimpleXMLElement $pageSetupAttributes): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xml/Properties.php
    class Properties
    public function __construct(Spreadsheet $spreadsheet)
    public function readProperties(SimpleXMLElement $xml, array $namespaces): void
    protected function readStandardProperties(SimpleXMLElement $xml): void
    protected function readCustomProperties(SimpleXMLElement $xml, array $namespaces): void
    protected function processStandardProperty(
    protected function processCustomProperty(
    protected function hex2str(array $hex): string
    private static function getAttributes(?SimpleXMLElement $simple, string $node): SimpleXMLElement
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xml/Style/Alignment.php
    class Alignment extends StyleBase
    public function parseStyle(SimpleXMLElement $styleAttributes): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xml/Style/Border.php
    class Border extends StyleBase
    public function parseStyle(SimpleXMLElement $styleData, array $namespaces): array
    protected function parsePosition(string $borderStyleValue, string $diagonalDirection): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xml/Style/Fill.php
    class Fill extends StyleBase
    public function parseStyle(SimpleXMLElement $styleAttributes): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xml/Style/Font.php
    class Font extends StyleBase
    protected function parseUnderline(array $style, string $styleAttributeValue): array
    protected function parseVerticalAlign(array $style, string $styleAttributeValue): array
    public function parseStyle(SimpleXMLElement $styleAttributes): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xml/Style/NumberFormat.php
    class NumberFormat extends StyleBase
    public function parseStyle(SimpleXMLElement $styleAttributes): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xml/Style/StyleBase.php
    abstract class StyleBase
    protected static function identifyFixedStyleValue(array $styleList, string &$styleAttributeValue): bool
    protected static function getAttributes(?SimpleXMLElement $simple, string $node): SimpleXMLElement
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xml/Style.php
    class Style
    public function parseStyles(SimpleXMLElement $xml, array $namespaces): array
    private static function getAttributes(?SimpleXMLElement $simple, string $node): SimpleXMLElement
    private static function getSxml(?SimpleXMLElement $simple): SimpleXMLElement
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Reader/Xml.php
    class Xml extends BaseReader
    public function __construct()
    public static function unentity(string $contents): string
    public static function xmlMappings(): array
    public function canRead(string $filename): bool
    private function trySimpleXMLLoadStringPrivate(string $filename, string $fileOrString = 'file'): SimpleXMLElement|bool
    public function listWorksheetNames(string $filename): array
    public function listWorksheetInfo(string $filename): array
    public function loadSpreadsheetFromString(string $contents): Spreadsheet
    protected function loadSpreadsheetFromFile(string $filename): Spreadsheet
    public function loadIntoExisting(string $filename, Spreadsheet $spreadsheet, bool $useContents = false): Spreadsheet
    protected function parseCellComment(
    protected function parseRichText(string $annotation): RichText
    private static function getAttributes(?SimpleXMLElement $simple, string $node): SimpleXMLElement
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/ReferenceHelper.php
    class ReferenceHelper
    public static function getInstance(): self
    protected function __construct()
    * Intended for use as a Callback function for sorting column addresses by column.
    public static function columnSort(string $a, string $b): int
    * Intended for use as a Callback function for reverse sorting column addresses by column.
    public static function columnReverseSort(string $a, string $b): int
    * Intended for use as a Callback function for sorting cell addresses by column and row.
    public static function cellSort(string $a, string $b): int
    * Intended for use as a Callback function for sorting cell addresses by column and row.
    public static function cellReverseSort(string $a, string $b): int
    protected function adjustPageBreaks(Worksheet $worksheet, int $numberOfColumns, int $numberOfRows): void
    protected function adjustComments(Worksheet $worksheet): void
    protected function adjustHyperlinks(Worksheet $worksheet, int $numberOfColumns, int $numberOfRows): void
    protected function adjustConditionalFormatting(Worksheet $worksheet, int $numberOfColumns, int $numberOfRows): void
    protected function adjustDataValidations(Worksheet $worksheet, int $numberOfColumns, int $numberOfRows): void
    protected function adjustMergeCells(Worksheet $worksheet): void
    protected function adjustProtectedCells(Worksheet $worksheet, int $numberOfColumns, int $numberOfRows): void
    protected function adjustColumnDimensions(Worksheet $worksheet): void
    protected function adjustRowDimensions(Worksheet $worksheet, int $beforeRow, int $numberOfRows): void
    public function insertNewBefore(
    private static function matchSheetName(?string $match, string $worksheetName): bool
    private static function sheetnameBeforeCells(string $match, string $worksheetName, string $cells): string
    public function updateFormulaReferences(
    public function updateFormulaReferencesAnyWorksheet(string $formula = '', int $numberOfColumns = 0, int $numberOfRows = 0): string
    private function updateCellReferencesAllWorksheets(string $formula, int $numberOfColumns, int $numberOfRows): string
    private function updateColumnRangesAllWorksheets(string $formula, int $numberOfColumns): string
    private function updateRowRangesAllWorksheets(string $formula, int $numberOfRows): string
    private function updateCellReference(string $cellReference = 'A1', bool $includeAbsoluteReferences = false, bool $onlyAbsoluteReferences = false): string
    public function updateNamedFormulae(Spreadsheet $spreadsheet, string $oldName = '', string $newName = ''): void
    private function updateDefinedNames(Worksheet $worksheet, string $beforeCellAddress, int $numberOfColumns, int $numberOfRows): void
    private function updateNamedRange(DefinedName $definedName, Worksheet $worksheet, string $beforeCellAddress, int $numberOfColumns, int $numberOfRows): void
    private function updateNamedFormula(DefinedName $definedName, Worksheet $worksheet, string $beforeCellAddress, int $numberOfColumns, int $numberOfRows): void
    private function updateCellRange(string $cellRange = 'A1:A1', bool $includeAbsoluteReferences = false, bool $onlyAbsoluteReferences = false): string
    private function clearColumnStrips(int $highestRow, int $beforeColumn, int $numberOfColumns, Worksheet $worksheet): void
    private function clearRowStrips(string $highestColumn, int $beforeColumn, int $beforeRow, int $numberOfRows, Worksheet $worksheet): void
    private function clearStripCell(Worksheet $worksheet, string $coordinate): void
    private function adjustAutoFilter(Worksheet $worksheet, string $beforeCellAddress, int $numberOfColumns): void
    private function adjustAutoFilterDeleteRules(int $columnIndex, int $numberOfColumns, array $autoFilterColumns, AutoFilter $autoFilter): void
    private function adjustAutoFilterInsert(int $startCol, int $numberOfColumns, int $rangeEnd, AutoFilter $autoFilter): void
    private function adjustAutoFilterDelete(int $startCol, int $numberOfColumns, int $rangeEnd, AutoFilter $autoFilter): void
    private function adjustTable(Worksheet $worksheet, string $beforeCellAddress, int $numberOfColumns): void
    private function adjustTableDeleteRules(int $columnIndex, int $numberOfColumns, array $tableColumns, Table $table): void
    private function adjustTableInsert(int $startCol, int $numberOfColumns, int $rangeEnd, Table $table): void
    private function adjustTableDelete(int $startCol, int $numberOfColumns, int $rangeEnd, Table $table): void
    private function duplicateStylesByColumn(Worksheet $worksheet, int $beforeColumn, int $beforeRow, int $highestRow, int $numberOfColumns): void
    private function duplicateStylesByRow(Worksheet $worksheet, int $beforeColumn, int $beforeRow, string $highestColumn, int $numberOfRows): void
    final public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/RichText/ITextElement.php
    public function getText(): string;
    public function setText(string $text): self;
    public function getFont(): ?Font;
    public function getHashCode(): string;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/RichText/RichText.php
    class RichText implements IComparable, Stringable
    public function __construct(?Cell $cell = null)
    public function addText(ITextElement $text): static
    public function createText(string $text): TextElement
    public function createTextRun(string $text): Run
    public function getPlainText(): string
    public function __toString(): string
    public function getRichTextElements(): array
    public function setRichTextElements(array $textElements): static
    public function getHashCode(): string
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/RichText/Run.php
    class Run extends TextElement implements ITextElement
    public function __construct(string $text = '')
    public function getFont(): ?Font
    public function getFontOrThrow(): Font
    public function setFont(?Font $font = null): static
    public function getHashCode(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/RichText/TextElement.php
    class TextElement implements ITextElement
    public function __construct(string $text = '')
    public function getText(): string
    public function setText(string $text): self
    public function getFont(): ?Font
    public function getHashCode(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Settings.php
    class Settings
    public static function setLocale(string $locale): bool
    public static function getLocale(): string
    public static function setChartRenderer(string $rendererClassName): void
    public static function unsetChartRenderer(): void
    public static function getChartRenderer(): ?string
    public static function htmlEntityFlags(): int
    public static function setLibXmlLoaderOptions(?int $options): int
    public static function getLibXmlLoaderOptions(): int
    public static function setCache(?CacheInterface $cache): void
    public static function getCache(): CacheInterface
    public static function useSimpleCacheVersion3(): bool
    public static function setHttpClient(ClientInterface $httpClient, RequestFactoryInterface $requestFactory): void
    public static function unsetHttpClient(): void
    public static function getHttpClient(): ClientInterface
    public static function getRequestFactory(): RequestFactoryInterface
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/CodePage.php
    class CodePage
    public static function validate(string $codePage): bool
    public static function numberToName(int $codePage): string
    public static function getEncodings(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Date.php
    class Date
    public static function setExcelCalendar(?int $baseYear): bool
    public static function getExcelCalendar(): int
    public static function setDefaultTimezone($timeZone): bool
    public static function getDefaultTimezone(): DateTimeZone
    public static function getDefaultOrLocalTimezone(): DateTimeZone
    public static function getDefaultTimezoneOrNull(): ?DateTimeZone
    private static function validateTimeZone($timeZone): ?DateTimeZone
    public static function convertIsoDate(mixed $value): float|int
    public static function excelToDateTimeObject(float|int $excelTimestamp, null|DateTimeZone|string $timeZone = null): DateTime
    public static function excelToTimestamp($excelTimestamp, $timeZone = null): int
    public static function PHPToExcel(mixed $dateValue)
    public static function dateTimeToExcel(DateTimeInterface $dateValue): float
    public static function timestampToExcel($unixTimestamp): bool|float
    public static function formattedPHPToExcel(int $year, int $month, int $day, int $hours = 0, int $minutes = 0, float|int $seconds = 0): float
    public static function isDateTime(Cell $cell, mixed $value = null, bool $dateWithoutTimeOkay = true): bool
    public static function isDateTimeFormat(NumberFormat $excelFormatCode, bool $dateWithoutTimeOkay = true): bool
    public static function isDateTimeFormatCode(string $excelFormatCode, bool $dateWithoutTimeOkay = true): bool
    public static function stringToExcel(string $dateValue): bool|float
    public static function monthStringToNumber(string $monthName)
    public static function dayStringToNumber(string $day)
    public static function dateTimeFromTimestamp(string $date, ?DateTimeZone $timeZone = null): DateTime
    public static function formattedDateTimeFromTimestamp(string $date, string $format, ?DateTimeZone $timeZone = null): string
    public static function roundMicroseconds(DateTime $dti): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Drawing.php
    class Drawing
    public static function pixelsToEMU(int $pixelValue): int|float
    public static function EMUToPixels($emuValue): int
    public static function pixelsToCellDimension(int $pixelValue, \PhpOffice\PhpSpreadsheet\Style\Font $defaultFont): int|float
    public static function cellDimensionToPixels(float $cellWidth, \PhpOffice\PhpSpreadsheet\Style\Font $defaultFont): int
    public static function pixelsToPoints(int $pixelValue): float
    public static function pointsToPixels($pointValue): int
    public static function degreesToAngle(int $degrees): int
    public static function angleToDegrees($angle): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Escher/DgContainer/SpgrContainer/SpContainer.php
    class SpContainer
    public function setParent(SpgrContainer $parent): void
    public function getParent(): SpgrContainer
    public function setSpgr(bool $value): void
    public function getSpgr(): bool
    public function setSpType(int $value): void
    public function getSpType(): int
    public function setSpFlag(int $value): void
    public function getSpFlag(): int
    public function setSpId(int $value): void
    public function getSpId(): int
    public function setOPT(int $property, mixed $value): void
    public function getOPT(int $property): mixed
    public function getOPTCollection(): array
    public function setStartCoordinates(string $value): void
    public function getStartCoordinates(): string
    public function setStartOffsetX(int|float $startOffsetX): void
    public function getStartOffsetX(): int|float
    public function setStartOffsetY(int|float $startOffsetY): void
    public function getStartOffsetY(): int|float
    public function setEndCoordinates(string $value): void
    public function getEndCoordinates(): string
    public function setEndOffsetX(int|float $endOffsetX): void
    public function getEndOffsetX(): int|float
    public function setEndOffsetY(int|float $endOffsetY): void
    public function getEndOffsetY(): int|float
    public function getNestingLevel(): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Escher/DgContainer/SpgrContainer.php
    class SpgrContainer
    public function setParent(?self $parent): void
    public function getParent(): ?self
    public function addChild(mixed $child): void
    public function getChildren(): array
    public function getAllSpContainers(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Escher/DgContainer.php
    class DgContainer
    public function getDgId(): ?int
    public function setDgId(int $value): void
    public function getLastSpId(): ?int
    public function setLastSpId(int $value): void
    public function getSpgrContainer(): ?SpgrContainer
    public function getSpgrContainerOrThrow(): SpgrContainer
    public function setSpgrContainer(SpgrContainer $spgrContainer): SpgrContainer
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Escher/DggContainer/BstoreContainer/BSE/Blip.php
    class Blip
    public function getData(): string
    public function setData(string $data): void
    public function setParent(BSE $parent): void
    public function getParent(): BSE
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Escher/DggContainer/BstoreContainer/BSE.php
    class BSE
    public function setParent(BstoreContainer $parent): void
    public function getParent(): BstoreContainer
    public function getBlip(): ?BSE\Blip
    public function setBlip(BSE\Blip $blip): void
    public function getBlipType(): int
    public function setBlipType(int $blipType): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Escher/DggContainer/BstoreContainer.php
    class BstoreContainer
    public function addBSE(BstoreContainer\BSE $BSE): void
    public function getBSECollection(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Escher/DggContainer.php
    class DggContainer
    public function getSpIdMax(): int
    public function setSpIdMax(int $value): void
    public function getCDgSaved(): int
    public function setCDgSaved(int $value): void
    public function getCSpSaved(): int
    public function setCSpSaved(int $value): void
    public function getBstoreContainer(): ?DggContainer\BstoreContainer
    public function setBstoreContainer(DggContainer\BstoreContainer $bstoreContainer): void
    public function setOPT(int $property, mixed $value): void
    public function getOPT(int $property): mixed
    public function getIDCLs(): array
    public function setIDCLs(array $IDCLs): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Escher.php
    class Escher
    public function getDggContainer(): ?Escher\DggContainer
    public function setDggContainer(Escher\DggContainer $dggContainer): Escher\DggContainer
    public function getDgContainer(): ?Escher\DgContainer
    public function setDgContainer(Escher\DgContainer $dgContainer): Escher\DgContainer
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/File.php
    class File
    public static function setUseUploadTempDirectory(bool $useUploadTempDir): void
    public static function getUseUploadTempDirectory(): bool
    private static function validateZipFirst4(string $zipFile): bool
    public static function fileExists(string $filename): bool
    public static function realpath(string $filename): string
    public static function sysGetTempDir(): string
    public static function temporaryFilename(): string
    public static function assertFile(string $filename, string $zipMember = ''): void
    public static function testFileNoThrow(string $filename, ?string $zipMember = null): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Font.php
    class Font
    public static function setExtraFontArray(array $extraFontArray): void
    public static function getExtraFontArray(): array
    public static function setAutoSizeMethod(string $method): bool
    public static function getAutoSizeMethod(): string
    public static function setTrueTypeFontPath(string $folderPath): void
    public static function getTrueTypeFontPath(): string
    public static function setPaddingAmountExact(null|float|int $paddingAmountExact): void
    public static function getPaddingAmountExact(): null|float|int
    public static function calculateColumnWidth(
    public static function getTextWidthPixelsExact(string $text, FontStyle $font, int $rotation = 0): float
    public static function getTextWidthPixelsApprox(string $columnText, FontStyle $font, int $rotation = 0): int
    public static function fontSizeToPixels(float|int $fontSizeInPoints): int
    public static function inchSizeToPixels(int|float $sizeInInch): int|float
    public static function centimeterSizeToPixels(int|float $sizeInCm): float
    public static function getTrueTypeFontFileFromFont(FontStyle $font, bool $checkPath = true): string
    public static function getCharsetFromFontName(string $fontName): int
    public static function getDefaultColumnWidthByFont(FontStyle $font, bool $returnAsPixels = false): float|int
    public static function getDefaultRowHeightByFont(FontStyle $font): float
    private static function findFontFile(string $startDirectory, string $desiredFont): ?string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/IntOrFloat.php
    class IntOrFloat
    public static function evaluate(float|int $value): float|int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/OLE/ChainedBlockStream.php
    class ChainedBlockStream
    public function stream_open(string $path, string $mode, int $options, ?string &$openedPath): bool // @codingStandardsIgnoreLine
    public function stream_close(): void // @codingStandardsIgnoreLine
    public function stream_read(int $count): bool|string // @codingStandardsIgnoreLine
    public function stream_eof(): bool // @codingStandardsIgnoreLine
    public function stream_tell(): int // @codingStandardsIgnoreLine
    public function stream_seek(int $offset, int $whence): bool // @codingStandardsIgnoreLine
    public function stream_stat(): array // @codingStandardsIgnoreLine
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/OLE/PPS/File.php
    class File extends PPS
    public function __construct(string $name)
    public function init(): bool
    public function append(string $data): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/OLE/PPS/Root.php
    class Root extends PPS
    public function __construct($time_1st, $time_2nd, array $raChild)
    public function save($fileHandle): bool
    private function calcSize(array &$raList): array
    * Helper function for caculating a magic value for block sizes.
    private static function adjust2(int $i2): float
    private function saveHeader(int $iSBDcnt, int $iBBcnt, int $iPPScnt): void
    private function saveBigData(int $iStBlk, array &$raList): void
    private function makeSmallData(array &$raList): string
    private function savePps(array &$raList): void
    private function saveBbd(int $iSbdSize, int $iBsize, int $iPpsCnt): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/OLE/PPS.php
    class PPS
    public function __construct(?int $No, ?string $name, ?int $type, ?int $prev, ?int $next, ?int $dir, $time_1st, $time_2nd, ?string $data, array $children)
    public function getDataLen(): int
    public function getPpsWk(): string
    public static function savePpsSetPnt(array &$raList, mixed $to_save, int $depth = 0): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/OLE.php
    class OLE
    public function read(string $filename): bool
    public function getBlockOffset(int $blockId): int
    public function getStream($blockIdOrPps)
    private static function readInt1($fileHandle): int
    private static function readInt2($fileHandle): int
    private static function readInt4($fileHandle): int
    public function readPpsWks(int $blockId): bool
    private function ppsTreeComplete(int $index): bool
    public function isFile(int $index): bool
    public function isRoot(int $index): bool
    public function ppsTotal(): int
    public function getData(int $index, int $position, int $length): string
    public function getDataLength(int $index): int
    * Utility function to transform ASCII text to Unicode.
    public static function ascToUcs(string $ascii): string
    public static function localDateToOLE($date): string
    public static function OLE2LocalDate(string $oleTimestamp)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/OLERead.php
    class OLERead
    public function read(string $filename): void
    public function getStream(?int $stream): ?string
    private function readData(int $block): string
    private function readPropertySets(): void
    private static function getInt4d(string $data, int $pos): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/PasswordHasher.php
    class PasswordHasher
    private static function getAlgorithm(string $algorithmName): string
    private static function defaultHashPassword(string $password): string
    public static function hashPassword(string $password, string $algorithm = '', string $salt = '', int $spinCount = 10000): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/StringHelper.php
    class StringHelper
    private static function buildControlCharacters(): void
    private static function buildSYLKCharacters(): void
    public static function getIsIconvEnabled(): bool
    private static function buildCharacterSets(): void
    public static function controlCharacterOOXML2PHP(string $textValue): string
    public static function controlCharacterPHP2OOXML(string $textValue): string
    public static function sanitizeUTF8(string $textValue): string
    public static function isUTF8(string $textValue): bool
    public static function formatNumber(float|int|string|null $numericValue): string
    public static function UTF8toBIFF8UnicodeShort(string $textValue, array $arrcRuns = []): string
    public static function UTF8toBIFF8UnicodeLong(string $textValue): string
    public static function convertEncoding(string $textValue, string $to, string $from): string
    public static function countCharacters(string $textValue, string $encoding = 'UTF-8'): int
    public static function countCharactersDbcs(string $textValue, string $encoding = 'UTF-8'): int
    public static function substring(string $textValue, int $offset, ?int $length = 0): string
    public static function strToUpper(string $textValue): string
    public static function strToLower(string $textValue): string
    public static function strToTitle(string $textValue): string
    public static function mbIsUpper(string $character): bool
    public static function mbStrSplit(string $string): array
    public static function strCaseReverse(string $textValue): string
    private static function useAlt(string $altValue, string $default, bool $trimAlt): string
    private static function getLocaleValue(string $key, string $altKey, string $default, bool $trimAlt = false): string
    public static function getDecimalSeparator(): string
    public static function setDecimalSeparator(?string $separator): void
    public static function getThousandsSeparator(): string
    public static function setThousandsSeparator(?string $separator): void
    public static function getCurrencyCode(bool $trimAlt = false): string
    public static function setCurrencyCode(?string $currencyCode): void
    public static function SYLKtoUTF8(string $textValue): string
    public static function testStringAsNumeric(string $textValue): float|string
    public static function strlenAllowNull(?string $string): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/TimeZone.php
    class TimeZone
    private static function validateTimeZone(string $timezoneName): bool
    public static function setTimeZone(string $timezoneName): bool
    public static function getTimeZone(): string
    public static function getTimeZoneAdjustment(?string $timezoneName, $timestamp): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Trend/BestFit.php
    abstract class BestFit
    public function getError(): bool
    public function getBestFitType(): string
    abstract public function getValueOfYForX(float $xValue): float;
    abstract public function getValueOfXForY(float $yValue): float;
    public function getXValues(): array
    abstract public function getEquation(int $dp = 0): string;
    public function getSlope(int $dp = 0): float
    public function getSlopeSE(int $dp = 0): float
    public function getIntersect(int $dp = 0): float
    public function getIntersectSE(int $dp = 0): float
    public function getGoodnessOfFit(int $dp = 0): float
    public function getGoodnessOfFitPercent(int $dp = 0): float
    public function getStdevOfResiduals(int $dp = 0): float
    public function getSSRegression(int $dp = 0): float
    public function getSSResiduals(int $dp = 0): float
    public function getDFResiduals(int $dp = 0): float
    public function getF(int $dp = 0): float
    public function getCovariance(int $dp = 0): float
    public function getCorrelation(int $dp = 0): float
    public function getYBestFitValues(): array
    protected function calculateGoodnessOfFit(float $sumX, float $sumY, float $sumX2, float $sumY2, float $sumXY, float $meanX, float $meanY, bool|int $const): void
    private function sumSquares(array $values)
    protected function leastSquareFit(array $yValues, array $xValues, bool $const): void
    public function __construct(array $yValues, array $xValues = [])
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Trend/ExponentialBestFit.php
    class ExponentialBestFit extends BestFit
    public function getValueOfYForX(float $xValue): float
    public function getValueOfXForY(float $yValue): float
    public function getEquation(int $dp = 0): string
    public function getSlope(int $dp = 0): float
    public function getIntersect(int $dp = 0): float
    private function exponentialRegression(array $yValues, array $xValues, bool $const): void
    public function __construct(array $yValues, array $xValues = [], bool $const = true)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Trend/LinearBestFit.php
    class LinearBestFit extends BestFit
    public function getValueOfYForX(float $xValue): float
    public function getValueOfXForY(float $yValue): float
    public function getEquation(int $dp = 0): string
    private function linearRegression(array $yValues, array $xValues, bool $const): void
    public function __construct(array $yValues, array $xValues = [], bool $const = true)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Trend/LogarithmicBestFit.php
    class LogarithmicBestFit extends BestFit
    public function getValueOfYForX(float $xValue): float
    public function getValueOfXForY(float $yValue): float
    public function getEquation(int $dp = 0): string
    private function logarithmicRegression(array $yValues, array $xValues, bool $const): void
    public function __construct(array $yValues, array $xValues = [], bool $const = true)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Trend/PolynomialBestFit.php
    class PolynomialBestFit extends BestFit
    public function getOrder(): int
    public function getValueOfYForX(float $xValue): float
    public function getValueOfXForY(float $yValue): float
    public function getEquation(int $dp = 0): string
    public function getSlope(int $dp = 0): float
    public function getCoefficients(int $dp = 0): array
    private function polynomialRegression(int $order, array $yValues, array $xValues): void
    *    The function fits a polynomial function of order $order through
    public function __construct(int $order, array $yValues, array $xValues = [])
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Trend/PowerBestFit.php
    class PowerBestFit extends BestFit
    public function getValueOfYForX(float $xValue): float
    public function getValueOfXForY(float $yValue): float
    public function getEquation(int $dp = 0): string
    public function getIntersect(int $dp = 0): float
    private function powerRegression(array $yValues, array $xValues, bool $const): void
    public function __construct(array $yValues, array $xValues = [], bool $const = true)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Trend/Trend.php
    class Trend
    public static function calculate(string $trendType = self::TREND_BEST_FIT, array $yValues = [], array $xValues = [], bool $const = true): mixed
    //    Instantiate and return the class for the requested Trend method
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/Xls.php
    class Xls
    public static function sizeCol(Worksheet $worksheet, string $col = 'A'): int
    public static function sizeRow(Worksheet $worksheet, int $row = 1): int
    public static function getDistanceX(Worksheet $worksheet, string $startColumn = 'A', float|int $startOffsetX = 0, string $endColumn = 'A', float|int $endOffsetX = 0): int
    public static function getDistanceY(Worksheet $worksheet, int $startRow = 1, float|int $startOffsetY = 0, int $endRow = 1, float|int $endOffsetY = 0): int
    * This function is ported from PEAR Spreadsheet_Writer_Excel with small modifications.
    public static function oneAnchor2twoAnchor(Worksheet $worksheet, string $coordinates, int $offsetX, int $offsetY, int $width, int $height): ?array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Shared/XMLWriter.php
    class XMLWriter extends \XMLWriter
    public function __construct(int $temporaryStorage = self::STORAGE_MEMORY, ?string $temporaryStorageFolder = null)
    public function __destruct()
    public function __wakeup(): void
    public function getData(): string
    public function writeRawData($rawTextData): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Spreadsheet.php
    class Spreadsheet implements JsonSerializable
    public function getTheme(): Theme
    public function hasMacros(): bool
    public function setHasMacros(bool $hasMacros): void
    public function setMacrosCode(string $macroCode): void
    public function getMacrosCode(): ?string
    public function setMacrosCertificate(?string $certificate): void
    public function hasMacrosCertificate(): bool
    public function getMacrosCertificate(): ?string
    public function discardMacros(): void
    public function setRibbonXMLData(mixed $target, mixed $xmlData): void
    public function getRibbonXMLData(string $what = 'all'): null|array|string //we need some constants here...
    public function setRibbonBinObjects(mixed $binObjectsNames, mixed $binObjectsData): void
    public function getUnparsedLoadedData(): array
    public function setUnparsedLoadedData(array $unparsedLoadedData): void
    public function getRibbonBinObjects(string $what = 'all'): ?array
    public function hasRibbon(): bool
    public function hasRibbonBinObjects(): bool
    public function sheetCodeNameExists(string $codeName): bool
    public function getSheetByCodeName(string $codeName): ?Worksheet
    public function __construct()
    public function __destruct()
    public function disconnectWorksheets(): void
    public function getCalculationEngine(): ?Calculation
    public function getProperties(): Properties
    public function setProperties(Properties $documentProperties): void
    public function getSecurity(): Security
    public function setSecurity(Security $documentSecurity): void
    public function getActiveSheet(): Worksheet
    public function createSheet(?int $sheetIndex = null): Worksheet
    public function sheetNameExists(string $worksheetName): bool
    public function duplicateWorksheetByTitle(string $title): Worksheet
    public function addSheet(Worksheet $worksheet, ?int $sheetIndex = null, bool $retitleIfNeeded = false): Worksheet
    public function removeSheetByIndex(int $sheetIndex): void
    public function getSheet(int $sheetIndex): Worksheet
    public function getAllSheets(): array
    public function getSheetByName(string $worksheetName): ?Worksheet
    public function getSheetByNameOrThrow(string $worksheetName): Worksheet
    public function getIndex(Worksheet $worksheet, bool $noThrow = false): int
    public function setIndexByName(string $worksheetName, int $newIndexPosition): int
    public function getSheetCount(): int
    public function getActiveSheetIndex(): int
    public function setActiveSheetIndex(int $worksheetIndex): Worksheet
    public function setActiveSheetIndexByName(string $worksheetName): Worksheet
    public function getSheetNames(): array
    public function addExternalSheet(Worksheet $worksheet, ?int $sheetIndex = null): Worksheet
    public function getNamedRanges(): array
    public function getNamedFormulae(): array
    public function getDefinedNames(): array
    public function addNamedRange(NamedRange $namedRange): void
    public function addNamedFormula(NamedFormula $namedFormula): void
    public function addDefinedName(DefinedName $definedName): void
    public function getNamedRange(string $namedRange, ?Worksheet $worksheet = null): ?NamedRange
    public function getNamedFormula(string $namedFormula, ?Worksheet $worksheet = null): ?NamedFormula
    private function getGlobalDefinedNameByType(string $name, bool $type): ?DefinedName
    private function getLocalDefinedNameByType(string $name, bool $type, ?Worksheet $worksheet = null): ?DefinedName
    public function getDefinedName(string $definedName, ?Worksheet $worksheet = null): ?DefinedName
    public function removeNamedRange(string $namedRange, ?Worksheet $worksheet = null): self
    public function removeNamedFormula(string $namedFormula, ?Worksheet $worksheet = null): self
    public function removeDefinedName(string $definedName, ?Worksheet $worksheet = null): self
    public function getWorksheetIterator(): Iterator
    public function copy(): self
    public function __clone()
    public function getCellXfCollection(): array
    public function getCellXfByIndex(int $cellStyleIndex): Style
    public function getCellXfByIndexOrNull(?int $cellStyleIndex): ?Style
    public function getCellXfByHashCode(string $hashcode): bool|Style
    public function cellXfExists(Style $cellStyleIndex): bool
    public function getDefaultStyle(): Style
    public function addCellXf(Style $style): void
    public function removeCellXfByIndex(int $cellStyleIndex): void
    public function getCellXfSupervisor(): Style
    public function getCellStyleXfCollection(): array
    public function getCellStyleXfByIndex(int $cellStyleIndex): Style
    public function getCellStyleXfByHashCode(string $hashcode): bool|Style
    public function addCellStyleXf(Style $style): void
    public function removeCellStyleXfByIndex(int $cellStyleIndex): void
    public function garbageCollect(): void
    public function getID(): string
    public function getShowHorizontalScroll(): bool
    public function setShowHorizontalScroll(bool $showHorizontalScroll): void
    public function getShowVerticalScroll(): bool
    public function setShowVerticalScroll(bool $showVerticalScroll): void
    public function getShowSheetTabs(): bool
    public function setShowSheetTabs(bool $showSheetTabs): void
    public function getMinimized(): bool
    public function setMinimized(bool $minimized): void
    public function getAutoFilterDateGrouping(): bool
    public function setAutoFilterDateGrouping(bool $autoFilterDateGrouping): void
    public function getFirstSheetIndex(): int
    public function setFirstSheetIndex(int $firstSheetIndex): void
    public function getVisibility(): string
    public function setVisibility(?string $visibility): void
    public function getTabRatio(): int
    public function setTabRatio(int $tabRatio): void
    public function reevaluateAutoFilters(bool $resetToMax): void
    public function __serialize(): array
    public function jsonSerialize(): mixed
    public function resetThemeFonts(): void
    public function getTableByName(string $tableName): ?Table
    public function setExcelCalendar(int $baseYear): bool
    public function getExcelCalendar(): int
    public function deleteLegacyDrawing(Worksheet $worksheet): void
    public function getLegacyDrawing(Worksheet $worksheet): ?string
    public function getValueBinder(): ?IValueBinder
    public function setValueBinder(?IValueBinder $valueBinder): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/Alignment.php
    class Alignment extends Supervisor
    public function __construct(bool $isSupervisor = false, bool $isConditional = false)
    public function getSharedComponent(): self
    public function getStyleArray(array $array): array
    public function applyFromArray(array $styleArray): static
    public function getHorizontal(): null|string
    public function setHorizontal(string $horizontalAlignment): static
    public function getVertical(): null|string
    public function setVertical(string $verticalAlignment): static
    public function getTextRotation(): null|int
    public function setTextRotation(int $angleInDegrees): static
    public function getWrapText(): bool
    public function setWrapText(bool $wrapped): static
    public function getShrinkToFit(): bool
    public function setShrinkToFit(bool $shrink): static
    public function getIndent(): int
    public function setIndent(int $indent): static
    public function getReadOrder(): int
    public function setReadOrder(int $readOrder): static
    public function getHashCode(): string
    protected function exportArray1(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/Border.php
    class Border extends Supervisor
    public function __construct(bool $isSupervisor = false, bool $isConditional = false)
    public function getSharedComponent(): self
    public function getStyleArray(array $array): array
    public function applyFromArray(array $styleArray): static
    public function getBorderStyle(): string
    public function setBorderStyle(bool|string $style): static
    public function getColor(): Color
    public function setColor(Color $color): static
    public function getHashCode(): string
    protected function exportArray1(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/Borders.php
    class Borders extends Supervisor
    public function __construct(bool $isSupervisor = false, bool $isConditional = false)
    public function getSharedComponent(): self
    public function getStyleArray(array $array): array
    public function applyFromArray(array $styleArray): static
    public function getLeft(): Border
    public function getRight(): Border
    public function getTop(): Border
    public function getBottom(): Border
    public function getDiagonal(): Border
    public function getAllBorders(): Border
    public function getOutline(): Border
    public function getInside(): Border
    public function getVertical(): Border
    public function getHorizontal(): Border
    public function getDiagonalDirection(): int
    public function setDiagonalDirection(int $direction): static
    public function getHashCode(): string
    protected function exportArray1(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/Color.php
    class Color extends Supervisor
    public function __construct(string $colorValue = self::COLOR_BLACK, bool $isSupervisor = false, bool $isConditional = false)
    public function getSharedComponent(): self
    public function getStyleArray(array $array): array
    public function applyFromArray(array $styleArray): static
    private function validateColor(?string $colorValue): string
    public function getARGB(): ?string
    public function setARGB(?string $colorValue = self::COLOR_BLACK, bool $nullStringOkay = false): static
    public function getRGB(): string
    public function setRGB(?string $colorValue = self::COLOR_BLACK): static
    private static function getColourComponent(string $rgbValue, int $offset, bool $hex = true): string|int
    public static function getRed(string $rgbValue, bool $hex = true)
    public static function getGreen(string $rgbValue, bool $hex = true)
    public static function getBlue(string $rgbValue, bool $hex = true)
    public static function changeBrightness(string $hexColourValue, float $adjustPercentage): string
    public static function indexedColor(int $colorIndex, bool $background = false, ?array $palette = null): self
    public function getHashCode(): string
    protected function exportArray1(): array
    public function getHasChanged(): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/Conditional.php
    class Conditional implements IComparable
    public function __construct()
    public function getNoFormatSet(): bool
    public function setNoFormatSet(bool $noFormatSet): self
    public function getConditionType(): string
    public function setConditionType(string $type): static
    public function getOperatorType(): string
    public function setOperatorType(string $type): static
    public function getText(): string
    public function setText(string $text): static
    public function getStopIfTrue(): bool
    public function setStopIfTrue(bool $stopIfTrue): static
    public function getConditions(): array
    public function setConditions($conditions): static
    public function addCondition($condition): static
    public function getStyle(): Style
    public function setStyle(Style $style): static
    public function getDataBar(): ?ConditionalDataBar
    public function setDataBar(ConditionalDataBar $dataBar): static
    public function getColorScale(): ?ConditionalColorScale
    public function setColorScale(ConditionalColorScale $colorScale): static
    public function getHashCode(): string
    public function __clone()
    public static function isValidConditionType(string $type): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/CellMatcher.php
    class CellMatcher
    public function __construct(Cell $cell, string $conditionalRange)
    protected function setReferenceCellForExpressions(string $conditionalRange): void
    public function evaluateConditional(Conditional $conditional): bool
    protected function wrapValue(mixed $value): float|int|string
    protected function wrapCellValue(): float|int|string
    protected function conditionCellAdjustment(array $matches): float|int|string
    protected function cellConditionCheck(string $condition): string
    protected function adjustConditionsForCellReferences(array $conditions): array
    protected function processOperatorComparison(Conditional $conditional): bool
    protected function processRangeOperator(Conditional $conditional): bool
    protected function processDuplicatesComparison(Conditional $conditional): bool
    protected function processExpression(Conditional $conditional): bool
    protected function evaluateExpression(string $expression): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/CellStyleAssessor.php
    class CellStyleAssessor
    public function __construct(Cell $cell, string $conditionalRange)
    public function matchConditions(array $conditionalStyles = []): Style
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/ConditionalColorScale.php
    class ConditionalColorScale
    public function getMinimumConditionalFormatValueObject(): ?ConditionalFormatValueObject
    public function setMinimumConditionalFormatValueObject(ConditionalFormatValueObject $minimumConditionalFormatValueObject): self
    public function getMidpointConditionalFormatValueObject(): ?ConditionalFormatValueObject
    public function setMidpointConditionalFormatValueObject(ConditionalFormatValueObject $midpointConditionalFormatValueObject): self
    public function getMaximumConditionalFormatValueObject(): ?ConditionalFormatValueObject
    public function setMaximumConditionalFormatValueObject(ConditionalFormatValueObject $maximumConditionalFormatValueObject): self
    public function getMinimumColor(): ?Color
    public function setMinimumColor(Color $minimumColor): self
    public function getMidpointColor(): ?Color
    public function setMidpointColor(Color $midpointColor): self
    public function getMaximumColor(): ?Color
    public function setMaximumColor(Color $maximumColor): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/ConditionalDataBar.php
    class ConditionalDataBar
    public function getShowValue(): ?bool
    public function setShowValue(bool $showValue): self
    public function getMinimumConditionalFormatValueObject(): ?ConditionalFormatValueObject
    public function setMinimumConditionalFormatValueObject(ConditionalFormatValueObject $minimumConditionalFormatValueObject): self
    public function getMaximumConditionalFormatValueObject(): ?ConditionalFormatValueObject
    public function setMaximumConditionalFormatValueObject(ConditionalFormatValueObject $maximumConditionalFormatValueObject): self
    public function getColor(): string
    public function setColor(string $color): self
    public function getConditionalFormattingRuleExt(): ?ConditionalFormattingRuleExtension
    public function setConditionalFormattingRuleExt(ConditionalFormattingRuleExtension $conditionalFormattingRuleExt): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/ConditionalDataBarExtension.php
    class ConditionalDataBarExtension
    public function getXmlAttributes(): array
    public function getXmlElements(): array
    public function getMinLength(): int
    public function setMinLength(int $minLength): self
    public function getMaxLength(): int
    public function setMaxLength(int $maxLength): self
    public function getBorder(): ?bool
    public function setBorder(bool $border): self
    public function getGradient(): ?bool
    public function setGradient(bool $gradient): self
    public function getDirection(): ?string
    public function setDirection(string $direction): self
    public function getNegativeBarBorderColorSameAsPositive(): ?bool
    public function setNegativeBarBorderColorSameAsPositive(bool $negativeBarBorderColorSameAsPositive): self
    public function getAxisPosition(): ?string
    public function setAxisPosition(string $axisPosition): self
    public function getMaximumConditionalFormatValueObject(): ConditionalFormatValueObject
    public function setMaximumConditionalFormatValueObject(ConditionalFormatValueObject $maximumConditionalFormatValueObject): self
    public function getMinimumConditionalFormatValueObject(): ConditionalFormatValueObject
    public function setMinimumConditionalFormatValueObject(ConditionalFormatValueObject $minimumConditionalFormatValueObject): self
    public function getBorderColor(): ?string
    public function setBorderColor(string $borderColor): self
    public function getNegativeFillColor(): ?string
    public function setNegativeFillColor(string $negativeFillColor): self
    public function getNegativeBorderColor(): ?string
    public function setNegativeBorderColor(string $negativeBorderColor): self
    public function getAxisColor(): array
    public function setAxisColor(mixed $rgb, mixed $theme = null, mixed $tint = null): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/ConditionalFormattingRuleExtension.php
    class ConditionalFormattingRuleExtension
    public function __construct(?string $id = null, string $cfRule = self::CONDITION_EXTENSION_DATABAR)
    private function generateUuid(): string
    public static function parseExtLstXml(?SimpleXMLElement $extLstXml): array
    private static function parseExtDataBarAttributesFromXml(
    private static function parseExtDataBarElementChildrenFromXml(ConditionalDataBarExtension $extDataBarObj, SimpleXMLElement $dataBarXml, array $ns): void
    public function getId(): string
    public function setId(string $id): self
    public function getCfRule(): string
    public function setCfRule(string $cfRule): self
    public function getDataBarExt(): ConditionalDataBarExtension
    public function setDataBarExt(ConditionalDataBarExtension $dataBar): self
    public function getSqref(): string
    public function setSqref(string $sqref): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/ConditionalFormatValueObject.php
    class ConditionalFormatValueObject
    public function __construct(string $type, null|float|int|string $value = null, ?string $cellFormula = null)
    public function getType(): string
    public function setType(string $type): self
    public function getValue(): null|float|int|string
    public function setValue(null|float|int|string $value): self
    public function getCellFormula(): ?string
    public function setCellFormula(?string $cellFormula): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/StyleMerger.php
    class StyleMerger
    public function __construct(Style $baseStyle)
    public function getStyle(): Style
    public function mergeStyle(Style $style): void
    protected function mergeFontStyle(Font $baseFontStyle, Font $fontStyle): void
    protected function mergeFillStyle(Fill $baseFillStyle, Fill $fillStyle): void
    protected function mergeBordersStyle(Borders $baseBordersStyle, Borders $bordersStyle): void
    protected function mergeBorderStyle(Border $baseBorderStyle, Border $borderStyle): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/Wizard/Blanks.php
    class Blanks extends WizardAbstract implements WizardInterface
    public function __construct(string $cellRange, bool $inverse = false)
    protected function inverse(bool $inverse): void
    protected function getExpression(): void
    public function getConditional(): Conditional
    public static function fromConditional(Conditional $conditional, string $cellRange = 'A1'): WizardInterface
    public function __call(string $methodName, array $arguments): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/Wizard/CellValue.php
    class CellValue extends WizardAbstract implements WizardInterface
    public function __construct(string $cellRange)
    protected function operator(string $operator): void
    protected function operand(int $index, mixed $operand, string $operandValueType = Wizard::VALUE_TYPE_LITERAL): void
    protected function wrapValue(mixed $value, string $operandValueType): float|int|string
    public function getConditional(): Conditional
    protected static function unwrapString(string $condition): string
    public static function fromConditional(Conditional $conditional, string $cellRange = 'A1'): WizardInterface
    public function __call(string $methodName, array $arguments): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/Wizard/DateValue.php
    class DateValue extends WizardAbstract implements WizardInterface
    public function __construct(string $cellRange)
    protected function operator(string $operator): void
    protected function setExpression(): void
    public function getConditional(): Conditional
    public static function fromConditional(Conditional $conditional, string $cellRange = 'A1'): WizardInterface
    public function __call(string $methodName, array $arguments): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/Wizard/Duplicates.php
    class Duplicates extends WizardAbstract implements WizardInterface
    public function __construct(string $cellRange, bool $inverse = false)
    protected function inverse(bool $inverse): void
    public function getConditional(): Conditional
    public static function fromConditional(Conditional $conditional, string $cellRange = 'A1'): WizardInterface
    public function __call(string $methodName, array $arguments): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/Wizard/Errors.php
    class Errors extends WizardAbstract implements WizardInterface
    public function __construct(string $cellRange, bool $inverse = false)
    protected function inverse(bool $inverse): void
    protected function getExpression(): void
    public function getConditional(): Conditional
    public static function fromConditional(Conditional $conditional, string $cellRange = 'A1'): WizardInterface
    public function __call(string $methodName, array $arguments): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/Wizard/Expression.php
    class Expression extends WizardAbstract implements WizardInterface
    public function __construct(string $cellRange)
    public function expression(string $expression): self
    public function getConditional(): Conditional
    public static function fromConditional(Conditional $conditional, string $cellRange = 'A1'): WizardInterface
    public function __call(string $methodName, array $arguments): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/Wizard/TextValue.php
    class TextValue extends WizardAbstract implements WizardInterface
    public function __construct(string $cellRange)
    protected function operator(string $operator): void
    protected function operand(string $operand, string $operandValueType = Wizard::VALUE_TYPE_LITERAL): void
    protected function wrapValue(string $value): string
    protected function setExpression(): void
    public function getConditional(): Conditional
    public static function fromConditional(Conditional $conditional, string $cellRange = 'A1'): WizardInterface
    public function __call(string $methodName, array $arguments): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/Wizard/WizardAbstract.php
    abstract class WizardAbstract
    public function __construct(string $cellRange)
    public function getCellRange(): string
    public function setCellRange(string $cellRange): void
    protected function setReferenceCellForExpressions(string $conditionalRange): void
    public function getStopIfTrue(): bool
    public function setStopIfTrue(bool $stopIfTrue): void
    public function getStyle(): Style
    public function setStyle(Style $style): void
    protected function validateOperand(string $operand, string $operandValueType = Wizard::VALUE_TYPE_LITERAL): string
    protected static function reverseCellAdjustment(array $matches, int $referenceColumn, int $referenceRow): string
    public static function reverseAdjustCellRef(string $condition, string $cellRange): string
    protected function conditionCellAdjustment(array $matches): string
    protected function cellConditionCheck(string $condition): string
    protected function adjustConditionsForCellReferences(array $conditions): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/Wizard/WizardInterface.php
    public function getCellRange(): string;
    public function setCellRange(string $cellRange): void;
    public function getStyle(): Style;
    public function setStyle(Style $style): void;
    public function getStopIfTrue(): bool;
    public function setStopIfTrue(bool $stopIfTrue): void;
    public function getConditional(): Conditional;
    public static function fromConditional(Conditional $conditional, string $cellRange = 'A1'): self;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/ConditionalFormatting/Wizard.php
    class Wizard
    public function __construct(string $cellRange)
    public function newRule(string $ruleType): WizardInterface
    public static function fromConditional(Conditional $conditional, string $cellRange = 'A1'): WizardInterface
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/Fill.php
    class Fill extends Supervisor
    public function __construct(bool $isSupervisor = false, bool $isConditional = false)
    public function getSharedComponent(): self
    public function getStyleArray(array $array): array
    public function applyFromArray(array $styleArray): static
    public function getFillType(): ?string
    public function setFillType(string $fillType): static
    public function getRotation(): float
    public function setRotation(float $angleInDegrees): static
    public function getStartColor(): Color
    public function setStartColor(Color $color): static
    public function getEndColor(): Color
    public function setEndColor(Color $color): static
    public function getColorsChanged(): bool
    public function getHashCode(): string
    protected function exportArray1(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/Font.php
    class Font extends Supervisor
    public function __construct(bool $isSupervisor = false, bool $isConditional = false)
    public function getSharedComponent(): self
    public function getStyleArray(array $array): array
    public function applyFromArray(array $styleArray): static
    public function getName(): ?string
    public function getLatin(): string
    public function getEastAsian(): string
    public function getComplexScript(): string
    public function setName(string $fontname): self
    public function setLatin(string $fontname): self
    public function setEastAsian(string $fontname): self
    public function setComplexScript(string $fontname): self
    public function getSize(): ?float
    public function setSize(mixed $sizeInPoints, bool $nullOk = false): static
    public function getBold(): ?bool
    public function setBold(bool $bold): static
    public function getItalic(): ?bool
    public function setItalic(bool $italic): static
    public function getSuperscript(): ?bool
    public function setSuperscript(bool $superscript): static
    public function getSubscript(): ?bool
    public function setSubscript(bool $subscript): static
    public function getBaseLine(): int
    public function setBaseLine(int $baseLine): self
    public function getStrikeType(): string
    public function setStrikeType(string $strikeType): self
    public function getUnderlineColor(): ?ChartColor
    public function setUnderlineColor(array $colorArray): self
    public function getChartColor(): ?ChartColor
    public function setChartColor(array $colorArray): self
    public function setChartColorFromObject(?ChartColor $chartColor): self
    public function getUnderline(): ?string
    public function setUnderline($underlineStyle): static
    public function getStrikethrough(): ?bool
    public function setStrikethrough(bool $strikethru): static
    public function getColor(): Color
    public function setColor(Color $color): static
    private function hashChartColor(?ChartColor $underlineColor): string
    public function getHashCode(): string
    protected function exportArray1(): array
    public function getScheme(): string
    public function setScheme(string $scheme): self
    public function setCap(string $cap): self
    public function getCap(): ?string
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/BaseFormatter.php
    abstract class BaseFormatter
    protected static function stripQuotes(string $format): string
    protected static function adjustSeparators(string $value): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/DateFormatter.php
    class DateFormatter
    private static function tryInterval(bool &$seekingBracket, string &$block, mixed $value, string $format): void
    public static function format(mixed $value, string $format): string
    private static function setLowercaseCallback(array $matches): string
    private static function escapeQuotesCallback(array $matches): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Formatter.php
    class Formatter extends BaseFormatter
    private static function splitFormatComparison(
    private static function splitFormatForSectionSelection(array $sections, mixed $value): array
    * @param null|array|callable $callBack Callback function for additional formatting of string
    public static function toFormattedString($value, string $format, null|array|callable $callBack = null): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/FractionFormatter.php
    class FractionFormatter extends BaseFormatter
    public static function format(mixed $value, string $format): string
    private static function getDecimal(string $value): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/NumberFormatter.php
    class NumberFormatter extends BaseFormatter
    private static function mergeComplexNumberFormatMasks(array $numbers, array $masks): array
    private static function processComplexNumberFormatMask(mixed $number, string $mask): string
    private static function complexNumberFormatMask(mixed $number, string $mask, bool $splitOnPoint = true): string
    public static function f2s(float $f): string
    public static function floatStringConvertScientific(string $s): string
    private static function formatStraightNumericValue(mixed $value, string $format, array $matches, bool $useThousands): string
    public static function format(mixed $value, string $format): string
    private static function makeString(array|string $value): string
    private static function pregReplace(string $pattern, string $replacement, string $subject): string
    public static function padValue(string $value, string $baseFormat): string
    public static function areThousandsRequired(string &$format): bool
    public static function scaleThousandsMillions(string &$format): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/PercentageFormatter.php
    class PercentageFormatter extends BaseFormatter
    public static function format($value, string $format): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/Accounting.php
    class Accounting extends CurrencyBase
    protected function getLocaleFormat(): string
    public static function icuVersion(): float
    private function formatCurrencyCode(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/Currency.php
    class Currency extends CurrencyBase
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/CurrencyBase.php
    class CurrencyBase extends Number
    public function __construct(
    public function setCurrencyCode(string $currencyCode): void
    public function setCurrencySymbolPosition(bool $currencySymbolPosition = self::LEADING_SYMBOL): void
    public function setCurrencySymbolSpacing(bool $currencySymbolSpacing = self::SYMBOL_WITHOUT_SPACING): void
    public function setStripLeadingRLM(bool $stripLeadingRLM): void
    public function setNegative(CurrencyNegative $negative): void
    protected function getLocaleFormat(): string
    private function formatCurrencyCode(): string
    public function format(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/CurrencyNegative.php
    public function start(): string
    public function end(): string
    public function color(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/Date.php
    class Date extends DateTimeWizard
    public function __construct($separators = self::SEPARATOR_DASH, string ...$formatBlocks)
    private function mapFormatBlocks(string $value): string
    public function format(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/DateTime.php
    class DateTime extends DateTimeWizard
    public function __construct($separators, ...$formatBlocks)
    private function mapFormatBlocks(DateTimeWizard|string $value): string
    public function format(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/DateTimeWizard.php
    abstract class DateTimeWizard implements Stringable, Wizard
    protected function padSeparatorArray(array $separators, int $count): array
    protected function escapeSingleCharacter(string $value): string
    protected function wrapLiteral(string $value): string
    protected function intersperse(string $formatBlock, ?string $separator): string
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/Duration.php
    class Duration extends DateTimeWizard
    public function __construct($separators = self::SEPARATOR_COLON, string ...$formatBlocks)
    private function mapFormatBlocks(string $value): string
    public function format(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/Locale.php
    final class Locale
    public function __construct(?string $locale, int $style)
    public function format(bool $stripRlm = true): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/Number.php
    class Number extends NumberBase implements Wizard
    public function __construct(
    public function setThousandsSeparator(bool $thousandsSeparator = self::WITH_THOUSANDS_SEPARATOR): void
    protected function getLocaleFormat(): string
    public function format(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/NumberBase.php
    abstract class NumberBase implements Stringable
    public function setDecimals(int $decimals = 2): void
    public function setLocale(?string $locale = null): void
    abstract protected function getLocaleFormat(): string;
    private function validateLocale(string $locale): string
    public function format(): string
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/Percentage.php
    class Percentage extends NumberBase implements Wizard
    public function __construct(int $decimals = 2, ?string $locale = null)
    protected function getLocaleFormat(): string
    public function format(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/Scientific.php
    class Scientific extends NumberBase implements Wizard
    public function __construct(int $decimals = 2, ?string $locale = null)
    protected function getLocaleFormat(): string
    public function format(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/Time.php
    class Time extends DateTimeWizard
    public function __construct($separators = self::SEPARATOR_COLON, string ...$formatBlocks)
    private function mapFormatBlocks(string $value): string
    public function format(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat/Wizard/Wizard.php
    public function format(): string;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/NumberFormat.php
    class NumberFormat extends Supervisor
    public function __construct(bool $isSupervisor = false, bool $isConditional = false)
    public function getSharedComponent(): self
    public function getStyleArray(array $array): array
    public function applyFromArray(array $styleArray): static
    public function getFormatCode(bool $extended = false): ?string
    public static function convertSystemFormats(?string $formatCode): ?string
    public function setFormatCode(string $formatCode): static
    public function getBuiltInFormatCode()
    public function setBuiltInFormatCode(int $formatCodeIndex): static
    private static function fillBuiltInFormatCodes(): void
    public static function builtInFormatCode(int $index): string
    public static function builtInFormatCodeIndex(string $formatCodeIndex)
    public function getHashCode(): string
    * @param ?array $callBack Callback function for additional formatting of string
    public static function toFormattedString(mixed $value, string $format, ?array $callBack = null): string
    protected function exportArray1(): array
    public static function getShortDateFormat(): string
    public static function setShortDateFormat(string $shortDateFormat): void
    public static function getLongDateFormat(): string
    public static function setLongDateFormat(string $longDateFormat): void
    public static function getDateTimeFormat(): string
    public static function setDateTimeFormat(string $dateTimeFormat): void
    public static function getTimeFormat(): string
    public static function setTimeFormat(string $timeFormat): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/Protection.php
    class Protection extends Supervisor
    public function __construct(bool $isSupervisor = false, bool $isConditional = false)
    public function getSharedComponent(): self
    public function getStyleArray(array $array): array
    public function applyFromArray(array $styleArray): static
    public function getLocked(): ?string
    public function setLocked(string $lockType): static
    public function getHidden(): ?string
    public function setHidden(string $hiddenType): static
    public function getHashCode(): string
    protected function exportArray1(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/RgbTint.php
    class RgbTint
    * MS excel's tint function expects that HLS is base 240.
    private static function rgbToHls(float $red, float $green, float $blue): array
    private static function hlsToRgb(float $hue, float $luminance, float $saturation): array
    private static function vFunction(float $m1, float $m2, float $hue): float
    private static function positiveDecimalPart(float $hue): float
    private static function rgbToMsHls(int $red, int $green, int $blue): array
    private static function msHlsToRgb(int $hue, int $lightness, int $saturation): array
    private static function tintLuminance(float $tint, float $luminance): int
    public static function rgbAndTintToRgb(int $red, int $green, int $blue, float $tint): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/Style.php
    class Style extends Supervisor
    public function __construct(bool $isSupervisor = false, bool $isConditional = false)
    public function getSharedComponent(): self
    public function getParent(): Spreadsheet
    public function getStyleArray(array $array): array
    public function applyFromArray(array $styleArray, bool $advancedBorders = true): static
    private function getOldXfIndexes(string $selectionType, array $rangeStart, array $rangeEnd, string $columnStart, string $columnEnd, array $styleArray): array
    public function getFill(): Fill
    public function getFont(): Font
    public function setFont(Font $font): static
    public function getBorders(): Borders
    public function getAlignment(): Alignment
    public function getNumberFormat(): NumberFormat
    public function getConditionalStyles(): array
    public function setConditionalStyles(array $conditionalStyleArray): static
    public function getProtection(): Protection
    public function getQuotePrefix(): bool
    public function setQuotePrefix(bool $quotePrefix): static
    public function getHashCode(): string
    public function getIndex(): int
    public function setIndex(int $index): void
    protected function exportArray1(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Style/Supervisor.php
    abstract class Supervisor implements IComparable
    public function __construct(bool $isSupervisor = false)
    public function bindParent(Spreadsheet|self $parent, ?string $parentPropertyName = null)
    public function getIsSupervisor(): bool
    public function getActiveSheet(): Worksheet
    public function getSelectedCells(): string
    public function getActiveCell(): string
    public function __clone()
    final public function exportArray(): array
    abstract protected function exportArray1(): array;
    final protected function exportArray2(array &$exportedArray, string $index, mixed $objOrValue): void
    abstract public function getSharedComponent(): mixed;
    abstract public function getStyleArray(array $array): array;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Theme.php
    class Theme
    public function getThemeColors(): array
    public function setThemeColor(string $key, string $value): self
    public function getThemeColorName(): string
    public function setThemeColorName(string $name, ?array $themeColors = null): self
    public function getMajorFontLatin(): string
    public function getMajorFontEastAsian(): string
    public function getMajorFontComplexScript(): string
    public function getMajorFontSubstitutions(): array
    public function setMajorFontValues(?string $latin, ?string $eastAsian, ?string $complexScript, ?array $substitutions): self
    public function getMinorFontLatin(): string
    public function getMinorFontEastAsian(): string
    public function getMinorFontComplexScript(): string
    public function getMinorFontSubstitutions(): array
    public function setMinorFontValues(?string $latin, ?string $eastAsian, ?string $complexScript, ?array $substitutions): self
    public function getThemeFontName(): string
    public function setThemeFontName(?string $name): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/AutoFilter/Column/Rule.php
    class Rule
    public function __construct(?Column $parent = null)
    private function setEvaluatedFalse(): void
    public function getRuleType(): string
    public function setRuleType(string $ruleType): static
    public function getValue()
    public function setValue($value): static
    public function getOperator(): string
    public function setOperator(string $operator): static
    public function getGrouping(): string
    public function setGrouping(string $grouping): static
    public function setRule(string $operator, $value, ?string $grouping = null): static
    public function getParent(): ?Column
    public function setParent(?Column $parent = null): static
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/AutoFilter/Column.php
    class Column
    public function __construct(string $column, ?AutoFilter $parent = null)
    public function setEvaluatedFalse(): void
    public function getColumnIndex(): string
    public function setColumnIndex(string $column): static
    public function getParent(): ?AutoFilter
    public function setParent(?AutoFilter $parent = null): static
    public function getFilterType(): string
    public function setFilterType(string $filterType): static
    public function getJoin(): string
    public function setJoin(string $join): static
    public function setAttributes(array $attributes): static
    public function setAttribute(string $name, $value): static
    public function getAttributes(): array
    public function getAttribute(string $name): null|float|int|string
    public function ruleCount(): int
    public function getRules(): array
    public function getRule(int $index): Column\Rule
    public function createRule(): Column\Rule
    public function addRule(Column\Rule $rule): static
    public function deleteRule(int $index): static
    public function clearRules(): static
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/AutoFilter.php
    class AutoFilter implements Stringable
    public function getEvaluated(): bool
    public function setEvaluated(bool $value): void
    public function __construct(AddressRange|string|array $range = '', ?Worksheet $worksheet = null)
    public function __destruct()
    public function getParent(): null|Worksheet
    public function setParent(?Worksheet $worksheet = null): static
    public function getRange(): string
    public function setRange(AddressRange|string|array $range = ''): self
    public function setRangeToMaxRow(): self
    public function getColumns(): array
    public function testColumnInRange(string $column): int
    public function getColumnOffset(string $column): int
    public function getColumn(string $column): AutoFilter\Column
    public function getColumnByOffset(int $columnOffset): AutoFilter\Column
    public function setColumn(AutoFilter\Column|string $columnObjectOrString): static
    public function clearColumn(string $column): static
    public function shiftColumn(string $fromColumn, string $toColumn): static
    protected static function filterTestInSimpleDataSet(mixed $cellValue, array $dataSet): bool
    protected static function filterTestInDateGroupSet(mixed $cellValue, array $dataSet): bool
    protected static function filterTestInCustomDataSet(mixed $cellValue, array $ruleSet): bool
    protected static function filterTestInPeriodDateSet(mixed $cellValue, array $monthSet): bool
    private static function makeDateObject(int $year, int $month, int $day, int $hour = 0, int $minute = 0, int $second = 0): DateTime
    private static function dynamicLastMonth(): array
    private static function firstDayOfQuarter(): DateTime
    private static function dynamicLastQuarter(): array
    private static function dynamicLastWeek(): array
    private static function dynamicLastYear(): array
    private static function dynamicNextMonth(): array
    private static function dynamicNextQuarter(): array
    private static function dynamicNextWeek(): array
    private static function dynamicNextYear(): array
    private static function dynamicThisMonth(): array
    private static function dynamicThisQuarter(): array
    private static function dynamicThisWeek(): array
    private static function dynamicThisYear(): array
    private static function dynamicToday(): array
    private static function dynamicTomorrow(): array
    private static function dynamicYearToDate(): array
    private static function dynamicYesterday(): array
    private function dynamicFilterDateRange(string $dynamicRuleType, AutoFilter\Column &$filterColumn): array
    private function calculateTopTenValue(string $columnID, int $startRow, int $endRow, ?string $ruleType, mixed $ruleValue): mixed
    public function showHideRows(): static
    public function autoExtendRange(int $startRow, int $endRow): int
    public function __clone()
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/AutoFit.php
    class AutoFit
    public function __construct(Worksheet $worksheet)
    public function getAutoFilterIndentRanges(): array
    private function getAutoFilterIndentRange(AutoFilter $autoFilter): ?string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/BaseDrawing.php
    class BaseDrawing implements IComparable
    public function __construct()
    public function __destruct()
    public function getImageIndex(): int
    public function getName(): string
    public function setName(string $name): self
    public function getDescription(): string
    public function setDescription(string $description): self
    public function getWorksheet(): ?Worksheet
    public function setWorksheet(?Worksheet $worksheet = null, bool $overrideOld = false): self
    public function getCoordinates(): string
    public function setCoordinates(string $coordinates): self
    public function getOffsetX(): int
    public function setOffsetX(int $offsetX): self
    public function getOffsetY(): int
    public function setOffsetY(int $offsetY): self
    public function getCoordinates2(): string
    public function setCoordinates2(string $coordinates2): self
    public function getOffsetX2(): int
    public function setOffsetX2(int $offsetX2): self
    public function getOffsetY2(): int
    public function setOffsetY2(int $offsetY2): self
    public function getWidth(): int
    public function setWidth(int $width): self
    public function getHeight(): int
    public function setHeight(int $height): self
    public function setWidthAndHeight(int $width, int $height): self
    public function getResizeProportional(): bool
    public function setResizeProportional(bool $resizeProportional): self
    public function getRotation(): int
    public function setRotation(int $rotation): self
    public function getShadow(): Shadow
    public function setShadow(?Shadow $shadow = null): self
    public function getHashCode(): string
    public function __clone()
    public function setHyperlink(?Hyperlink $hyperlink = null): void
    public function getHyperlink(): ?Hyperlink
    protected function setSizesAndType(string $path): void
    public function getType(): int
    public function getImageWidth(): int
    public function getImageHeight(): int
    public function getEditAs(): string
    public function setEditAs(string $editAs): self
    public function validEditAs(): bool
    public function getSrcRect()
    public function setSrcRect($srcRect): self
    public function setFlipHorizontal(bool $flipHorizontal): self
    public function getFlipHorizontal(): bool
    public function setFlipVertical(bool $flipVertical): self
    public function getFlipVertical(): bool
    public function setOpacity(?int $opacity): self
    public function getOpacity(): ?int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/CellIterator.php
    abstract class CellIterator implements NativeIterator
    public function __destruct()
    public function getIfNotExists(): bool
    public function setIfNotExists(bool $ifNotExists = self::IF_NOT_EXISTS_CREATE_NEW): void
    public function getIterateOnlyExistingCells(): bool
    abstract protected function adjustForExistingOnlyRange(): void;
    public function setIterateOnlyExistingCells(bool $value): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Column.php
    class Column
    public function __construct(Worksheet $worksheet, string $columnIndex = 'A')
    public function __destruct()
    public function getColumnIndex(): string
    public function getCellIterator(int $startRow = 1, ?int $endRow = null, bool $iterateOnlyExistingCells = false): ColumnCellIterator
    public function getRowIterator(int $startRow = 1, ?int $endRow = null, bool $iterateOnlyExistingCells = false): ColumnCellIterator
    public function isEmpty(int $definitionOfEmptyFlags = 0, int $startRow = 1, ?int $endRow = null): bool
    public function getWorksheet(): Worksheet
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/ColumnCellIterator.php
    class ColumnCellIterator extends CellIterator
    public function __construct(Worksheet $worksheet, string $columnIndex = 'A', int $startRow = 1, ?int $endRow = null, bool $iterateOnlyExistingCells = false)
    public function resetStart(int $startRow = 1): static
    public function resetEnd(?int $endRow = null): static
    public function seek(int $row = 1): static
    public function rewind(): void
    public function current(): ?Cell
    public function key(): int
    public function next(): void
    public function prev(): void
    public function valid(): bool
    protected function adjustForExistingOnlyRange(): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/ColumnDimension.php
    class ColumnDimension extends Dimension
    public function __construct(?string $index = 'A')
    public function getColumnIndex(): ?string
    public function setColumnIndex(string $index): self
    public function getColumnNumeric(): int
    public function setColumnNumeric(int $index): self
    public function getWidth(?string $unitOfMeasure = null): float
    public function setWidth(float $width, ?string $unitOfMeasure = null): static
    public function getAutoSize(): bool
    public function setAutoSize(bool $autosizeEnabled): static
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/ColumnIterator.php
    class ColumnIterator implements NativeIterator
    public function __construct(Worksheet $worksheet, string $startColumn = 'A', ?string $endColumn = null)
    public function __destruct()
    public function resetStart(string $startColumn = 'A'): static
    public function resetEnd(?string $endColumn = null): static
    public function seek(string $column = 'A'): static
    public function rewind(): void
    public function current(): Column
    public function key(): string
    public function next(): void
    public function prev(): void
    public function valid(): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Dimension.php
    abstract class Dimension
    public function __construct(?int $initialValue = null)
    public function getVisible(): bool
    public function setVisible(bool $visible)
    public function getOutlineLevel(): int
    public function setOutlineLevel(int $level)
    public function getCollapsed(): bool
    public function setCollapsed(bool $collapsed)
    public function getXfIndex(): ?int
    public function setXfIndex(int $XfIndex)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Drawing/Shadow.php
    class Shadow implements IComparable
    public function __construct()
    public function getVisible(): bool
    public function setVisible(bool $visible): static
    public function getBlurRadius(): int
    public function setBlurRadius(int $blurRadius): static
    public function getDistance(): int
    public function setDistance(int $distance): static
    public function getDirection(): int
    public function setDirection(int $direction): static
    public function getAlignment(): string
    public function setAlignment(string $alignment): static
    public function getColor(): Color
    public function setColor(Color $color): static
    public function getAlpha(): int
    public function setAlpha(int $alpha): static
    public function getHashCode(): string
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Drawing.php
    class Drawing extends BaseDrawing
    public function __construct()
    public function getFilename(): string
    public function getIndexedFilename(): string
    public function getExtension(): string
    public function getMediaFilename(): string
    public function getPath(): string
    public function setPath(string $path, bool $verifyFile = true, ?ZipArchive $zip = null): static
    private function isImage(string $path): bool
    public function getIsURL(): bool
    public function setIsURL(bool $isUrl): self
    public function getHashCode(): string
    public function getImageTypeForSave(): int
    public function getImageFileExtensionForSave(bool $includeDot = true): string
    public function getImageMimeType(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/HeaderFooter.php
    class HeaderFooter
    public function __construct()
    public function getOddHeader(): string
    public function setOddHeader(string $oddHeader): static
    public function getOddFooter(): string
    public function setOddFooter(string $oddFooter): static
    public function getEvenHeader(): string
    public function setEvenHeader(string $eventHeader): static
    public function getEvenFooter(): string
    public function setEvenFooter(string $evenFooter): static
    public function getFirstHeader(): string
    public function setFirstHeader(string $firstHeader): static
    public function getFirstFooter(): string
    public function setFirstFooter(string $firstFooter): static
    public function getDifferentOddEven(): bool
    public function setDifferentOddEven(bool $differentOddEvent): static
    public function getDifferentFirst(): bool
    public function setDifferentFirst(bool $differentFirst): static
    public function getScaleWithDocument(): bool
    public function setScaleWithDocument(bool $scaleWithDocument): static
    public function getAlignWithMargins(): bool
    public function setAlignWithMargins(bool $alignWithMargins): static
    public function addImage(HeaderFooterDrawing $image, string $location = self::IMAGE_HEADER_LEFT): static
    public function removeImage(string $location = self::IMAGE_HEADER_LEFT): static
    public function setImages(array $images): static
    public function getImages(): array
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/HeaderFooterDrawing.php
    class HeaderFooterDrawing extends Drawing
    public function getHashCode(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Iterator.php
    class Iterator implements \Iterator
    public function __construct(Spreadsheet $subject)
    public function rewind(): void
    public function current(): Worksheet
    public function key(): int
    public function next(): void
    public function valid(): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/MemoryDrawing.php
    class MemoryDrawing extends BaseDrawing
    public function __construct()
    public function __destruct()
    public function __clone()
    private function cloneResource(): void
    // Starting with Php8.0, next function throws rather than return false
    public static function fromStream($imageStream): self
    public static function fromString(string $imageString): self
    private static function identifyRenderingFunction(string $mimeType): string
    private static function identifyMimeType(string $imageString): string
    private static function identifyMimeTypeUsingExif(string $temporaryFileName): ?string
    private static function identifyMimeTypeUsingGd(string $temporaryFileName): ?string
    private static function supportedMimeTypes(?string $mimeType = null): ?string
    public function getImageResource(): ?GdImage
    public function setImageResource(?GdImage $value): static
    public function getRenderingFunction(): string
    public function setRenderingFunction(string $value): static
    public function getMimeType(): string
    public function setMimeType(string $value): static
    public function getIndexedFilename(): string
    public function getHashCode(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/PageBreak.php
    class PageBreak
    public function __construct(int $breakType, CellAddress|string|array $coordinate, int $maxColOrRow = -1)
    public function getBreakType(): int
    public function getCoordinate(): string
    public function getMaxColOrRow(): int
    public function getColumnInt(): int
    public function getRow(): int
    public function getColumnString(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/PageMargins.php
    class PageMargins
    public function __construct()
    public function getLeft(): float
    public function setLeft(float $left): static
    public function getRight(): float
    public function setRight(float $right): static
    public function getTop(): float
    public function setTop(float $top): static
    public function getBottom(): float
    public function setBottom(float $bottom): static
    public function getHeader(): float
    public function setHeader(float $header): static
    public function getFooter(): float
    public function setFooter(float $footer): static
    public static function fromCentimeters(float $value): float
    public static function toCentimeters(float $value): float
    public static function fromMillimeters(float $value): float
    public static function toMillimeters(float $value): float
    public static function fromPoints(float $value): float
    public static function toPoints(float $value): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/PageSetup.php
    class PageSetup
    public function __construct()
    public function getPaperSize(): int
    public function setPaperSize(int $paperSize): static
    public static function getPaperSizeDefault(): int
    public static function setPaperSizeDefault(int $paperSize): void
    public function getOrientation(): string
    public function setOrientation(string $orientation): static
    public static function getOrientationDefault(): string
    public static function setOrientationDefault(string $orientation): void
    public function getScale(): ?int
    public function setScale(?int $scale, bool $update = true): static
    public function getFitToPage(): bool
    public function setFitToPage(bool $fitToPage): static
    public function getFitToHeight(): ?int
    public function setFitToHeight(?int $fitToHeight, bool $update = true): static
    public function getFitToWidth(): ?int
    public function setFitToWidth(?int $value, bool $update = true): static
    public function isColumnsToRepeatAtLeftSet(): bool
    public function getColumnsToRepeatAtLeft(): array
    public function setColumnsToRepeatAtLeft(array $columnsToRepeatAtLeft): static
    public function setColumnsToRepeatAtLeftByStartAndEnd(string $start, string $end): static
    public function isRowsToRepeatAtTopSet(): bool
    public function getRowsToRepeatAtTop(): array
    public function setRowsToRepeatAtTop(array $rowsToRepeatAtTop): static
    public function setRowsToRepeatAtTopByStartAndEnd(int $start, int $end): static
    public function getHorizontalCentered(): bool
    public function setHorizontalCentered(bool $value): static
    public function getVerticalCentered(): bool
    public function setVerticalCentered(bool $value): static
    public function getPrintArea(int $index = 0): string
    public function isPrintAreaSet(int $index = 0): bool
    public function clearPrintArea(int $index = 0): static
    public function setPrintArea(string $value, int $index = 0, string $method = self::SETPRINTRANGE_OVERWRITE): static
    public function addPrintArea(string $value, int $index = -1): static
    public function setPrintAreaByColumnAndRow(int $column1, int $row1, int $column2, int $row2, int $index = 0, string $method = self::SETPRINTRANGE_OVERWRITE): static
    public function addPrintAreaByColumnAndRow(int $column1, int $row1, int $column2, int $row2, int $index = -1): static
    public function getFirstPageNumber(): ?int
    public function setFirstPageNumber(?int $value): static
    public function resetFirstPageNumber(): static
    public function getPageOrder(): string
    public function setPageOrder(?string $pageOrder): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Pane.php
    class Pane
    public function __construct(string $position, string $sqref = '', string $activeCell = '')
    public function getPosition(): string
    public function getSqref(): string
    public function setSqref(string $sqref): self
    public function getActiveCell(): string
    public function setActiveCell(string $activeCell): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/ProtectedRange.php
    class ProtectedRange
    public function __construct(string $sqref, string $password = '', string $name = '', string $securityDescriptor = '')
    public function getSqref(): string
    public function getName(): string
    public function getPassword(): string
    public function getSecurityDescriptor(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Protection.php
    class Protection
    public function __construct()
    public function isProtectionEnabled(): bool
    public function getSheet(): ?bool
    public function setSheet(?bool $sheet): self
    public function getObjects(): ?bool
    public function setObjects(?bool $objects): self
    public function getScenarios(): ?bool
    public function setScenarios(?bool $scenarios): self
    public function getFormatCells(): ?bool
    public function setFormatCells(?bool $formatCells): self
    public function getFormatColumns(): ?bool
    public function setFormatColumns(?bool $formatColumns): self
    public function getFormatRows(): ?bool
    public function setFormatRows(?bool $formatRows): self
    public function getInsertColumns(): ?bool
    public function setInsertColumns(?bool $insertColumns): self
    public function getInsertRows(): ?bool
    public function setInsertRows(?bool $insertRows): self
    public function getInsertHyperlinks(): ?bool
    public function setInsertHyperlinks(?bool $insertHyperLinks): self
    public function getDeleteColumns(): ?bool
    public function setDeleteColumns(?bool $deleteColumns): self
    public function getDeleteRows(): ?bool
    public function setDeleteRows(?bool $deleteRows): self
    public function getSelectLockedCells(): ?bool
    public function setSelectLockedCells(?bool $selectLockedCells): self
    public function getSort(): ?bool
    public function setSort(?bool $sort): self
    public function getAutoFilter(): ?bool
    public function setAutoFilter(?bool $autoFilter): self
    public function getPivotTables(): ?bool
    public function setPivotTables(?bool $pivotTables): self
    public function getSelectUnlockedCells(): ?bool
    public function setSelectUnlockedCells(?bool $selectUnlockedCells): self
    public function getPassword(): string
    public function setPassword(string $password, bool $alreadyHashed = false): static
    public function setHashValue(string $password): self
    private function generateSalt(): string
    public function getAlgorithm(): string
    public function setAlgorithm(string $algorithm): self
    public function setAlgorithmName(string $algorithm): self
    public function getSalt(): string
    public function setSalt(string $salt): self
    public function setSaltValue(string $salt): self
    public function getSpinCount(): int
    public function setSpinCount(int $spinCount): self
    public function verify(string $password): bool
    public function __clone()
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Row.php
    class Row
    public function __construct(Worksheet $worksheet, int $rowIndex = 1)
    public function __destruct()
    public function getRowIndex(): int
    public function getCellIterator(string $startColumn = 'A', ?string $endColumn = null, bool $iterateOnlyExistingCells = false): RowCellIterator
    public function getColumnIterator(string $startColumn = 'A', ?string $endColumn = null, bool $iterateOnlyExistingCells = false): RowCellIterator
    public function isEmpty(int $definitionOfEmptyFlags = 0, string $startColumn = 'A', ?string $endColumn = null): bool
    public function getWorksheet(): Worksheet
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/RowCellIterator.php
    class RowCellIterator extends CellIterator
    public function __construct(Worksheet $worksheet, int $rowIndex = 1, string $startColumn = 'A', ?string $endColumn = null, bool $iterateOnlyExistingCells = false)
    public function resetStart(string $startColumn = 'A'): static
    public function resetEnd(?string $endColumn = null): static
    public function seek(string $column = 'A'): static
    public function rewind(): void
    public function current(): ?Cell
    public function key(): string
    public function next(): void
    public function prev(): void
    public function valid(): bool
    public function getCurrentColumnIndex(): int
    protected function adjustForExistingOnlyRange(): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/RowDimension.php
    class RowDimension extends Dimension
    public function __construct(?int $index = 0)
    public function getRowIndex(): ?int
    public function setRowIndex(int $index): static
    public function getRowHeight(?string $unitOfMeasure = null): float
    public function setRowHeight(float $height, ?string $unitOfMeasure = null): static
    public function getZeroHeight(): bool
    public function setZeroHeight(bool $zeroHeight): static
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/RowIterator.php
    class RowIterator implements NativeIterator
    public function __construct(Worksheet $subject, int $startRow = 1, ?int $endRow = null)
    public function __destruct()
    public function resetStart(int $startRow = 1): static
    public function resetEnd(?int $endRow = null): static
    public function seek(int $row = 1): static
    public function rewind(): void
    public function current(): Row
    public function key(): int
    public function next(): void
    public function prev(): void
    public function valid(): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/SheetView.php
    class SheetView
    public function __construct()
    public function getZoomScale(): ?int
    public function setZoomScale(?int $zoomScale): static
    public function getZoomScaleNormal(): ?int
    public function setZoomScaleNormal(?int $zoomScaleNormal): static
    public function getZoomScalePageLayoutView(): int
    public function setZoomScalePageLayoutView(int $zoomScalePageLayoutView): static
    public function getZoomScaleSheetLayoutView(): int
    public function setZoomScaleSheetLayoutView(int $zoomScaleSheetLayoutView): static
    public function setShowZeros(bool $showZeros): void
    public function getShowZeros(): bool
    public function getView(): string
    public function setView(?string $sheetViewType): static
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Table/Column.php
    class Column
    public function __construct(string $column, ?Table $table = null)
    public function getColumnIndex(): string
    public function setColumnIndex(string $column): self
    public function getShowFilterButton(): bool
    public function setShowFilterButton(bool $showFilterButton): self
    public function getTotalsRowLabel(): ?string
    public function setTotalsRowLabel(string $totalsRowLabel): self
    public function getTotalsRowFunction(): ?string
    public function setTotalsRowFunction(string $totalsRowFunction): self
    public function getTotalsRowFormula(): ?string
    public function setTotalsRowFormula(string $totalsRowFormula): self
    public function getColumnFormula(): ?string
    public function setColumnFormula(string $columnFormula): self
    public function getTable(): ?Table
    public function setTable(?Table $table = null): self
    public static function updateStructuredReferences(?Worksheet $workSheet, ?string $oldTitle, ?string $newTitle): void
    private static function updateStructuredReferencesInCells(Worksheet $worksheet, string $oldTitle, string $newTitle): void
    private static function updateStructuredReferencesInNamedFormulae(Spreadsheet $spreadsheet, string $oldTitle, string $newTitle): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Table/TableStyle.php
    class TableStyle
    public function __construct(string $theme = self::TABLE_STYLE_MEDIUM2)
    public function getTheme(): string
    public function setTheme(string $theme): self
    public function getShowFirstColumn(): bool
    public function setShowFirstColumn(bool $showFirstColumn): self
    public function getShowLastColumn(): bool
    public function setShowLastColumn(bool $showLastColumn): self
    public function getShowRowStripes(): bool
    public function setShowRowStripes(bool $showRowStripes): self
    public function getShowColumnStripes(): bool
    public function setShowColumnStripes(bool $showColumnStripes): self
    public function getTable(): ?Table
    public function setTable(?Table $table = null): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Table.php
    class Table implements Stringable
    public function __construct(AddressRange|string|array $range = '', string $name = '')
    public function __destruct()
    public function getName(): string
    public function setName(string $name): self
    private function checkForDuplicateTableNames(string $name, ?Worksheet $worksheet): void
    private function updateStructuredReferences(string $name): void
    private function updateStructuredReferencesInCells(Worksheet $worksheet, string $newName): void
    private function updateStructuredReferencesInNamedFormulae(Spreadsheet $spreadsheet, string $newName): void
    public function getShowHeaderRow(): bool
    public function setShowHeaderRow(bool $showHeaderRow): self
    public function getShowTotalsRow(): bool
    public function setShowTotalsRow(bool $showTotalsRow): self
    public function getAllowFilter(): bool
    public function setAllowFilter(bool $allowFilter): self
    public function getRange(): string
    public function setRange(AddressRange|string|array $range = ''): self
    public function setRangeToMaxRow(): self
    public function getWorksheet(): ?Worksheet
    public function setWorksheet(?Worksheet $worksheet = null): self
    public function getColumns(): array
    public function isColumnInRange(string $column): int
    public function getColumnOffset(string $column): int
    public function getColumn(string $column): Table\Column
    public function getColumnByOffset(int $columnOffset): Table\Column
    public function setColumn(string|Table\Column $columnObjectOrString): self
    public function clearColumn(string $column): self
    public function shiftColumn(string $fromColumn, string $toColumn): self
    public function getStyle(): TableStyle
    public function setStyle(TableStyle $style): self
    public function getAutoFilter(): AutoFilter
    public function setAutoFilter(AutoFilter $autoFilter): self
    public function __clone()
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Validations.php
    class Validations
    public static function validateCellAddress(null|CellAddress|string|array $cellAddress): string
    public static function validateCellOrCellRange(AddressRange|CellAddress|int|string|array $cellRange): string
    public static function validateCellRange(AddressRange|string|array $cellRange): string
    public static function definedNameToCoordinate(string $coordinate, Worksheet $worksheet): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Worksheet/Worksheet.php
    class Worksheet
    public function __construct(?Spreadsheet $parent = null, string $title = 'Worksheet')
    public function disconnectCells(): void
    public function __destruct()
    public function __wakeup(): void
    public function getCellCollection(): Cells
    public static function getInvalidCharacters(): array
    private static function checkSheetCodeName(string $sheetCodeName): string
    private static function checkSheetTitle(string $sheetTitle): string
    public function getCoordinates(bool $sorted = true): array
    public function getRowDimensions(): array
    public function getDefaultRowDimension(): RowDimension
    public function getColumnDimensions(): array
    private static function columnDimensionCompare(ColumnDimension $a, ColumnDimension $b): int
    public function getDefaultColumnDimension(): ColumnDimension
    public function getDrawingCollection(): ArrayObject
    public function getChartCollection(): ArrayObject
    public function addChart(Chart $chart): Chart
    public function getChartCount(): int
    public function getChartByIndex(?string $index)
    public function getChartNames(): array
    public function getChartByName(string $chartName)
    public function getChartByNameOrThrow(string $chartName): Chart
    public function refreshColumnDimensions(): static
    public function refreshRowDimensions(): static
    public function calculateWorksheetDimension(): string
    public function calculateWorksheetDataDimension(): string
    public function calculateColumnWidths(): static
    public function getParent(): ?Spreadsheet
    public function getParentOrThrow(): Spreadsheet
    public function rebindParent(Spreadsheet $parent): static
    public function getTitle(): string
    public function setTitle(string $title, bool $updateFormulaCellReferences = true, bool $validate = true): static
    public function getSheetState(): string
    public function setSheetState(string $value): static
    public function getPageSetup(): PageSetup
    public function setPageSetup(PageSetup $pageSetup): static
    public function getPageMargins(): PageMargins
    public function setPageMargins(PageMargins $pageMargins): static
    public function getHeaderFooter(): HeaderFooter
    public function setHeaderFooter(HeaderFooter $headerFooter): static
    public function getSheetView(): SheetView
    public function setSheetView(SheetView $sheetView): static
    public function getProtection(): Protection
    public function setProtection(Protection $protection): static
    public function getHighestColumn($row = null): string
    public function getHighestDataColumn($row = null): string
    public function getHighestRow(?string $column = null): int
    public function getHighestDataRow(?string $column = null): int
    public function getHighestRowAndColumn(): array
    public function setCellValue(CellAddress|string|array $coordinate, mixed $value, ?IValueBinder $binder = null): static
    public function setCellValueExplicit(CellAddress|string|array $coordinate, mixed $value, string $dataType): static
    public function getCell(CellAddress|string|array $coordinate): Cell
    private function getWorksheetAndCoordinate(string $coordinate): array
    private function getCellOrNull(string $coordinate): ?Cell
    public function createNewCell(string $coordinate): Cell
    public function cellExists(CellAddress|string|array $coordinate): bool
    public function getRowDimension(int $row): RowDimension
    public function getRowStyle(int $row): ?Style
    public function rowDimensionExists(int $row): bool
    public function columnDimensionExists(string $column): bool
    public function getColumnDimension(string $column): ColumnDimension
    public function getColumnDimensionByColumn(int $columnIndex): ColumnDimension
    public function getColumnStyle(string $column): ?Style
    public function getStyles(): array
    public function getStyle(AddressRange|CellAddress|int|string|array $cellCoordinate): Style
    public function getConditionalStyles(string $coordinate): array
    public function getConditionalRange(string $coordinate): ?string
    public function conditionalStylesExists(string $coordinate): bool
    public function removeConditionalStyles(string $coordinate): static
    public function getConditionalStylesCollection(): array
    public function setConditionalStyles(string $coordinate, array $styles): static
    public function duplicateStyle(Style $style, string $range): static
    public function duplicateConditionalStyle(array $styles, string $range = ''): static
    public function setBreak(CellAddress|string|array $coordinate, int $break, int $max = -1): static
    public function getBreaks(): array
    public function getRowBreaks(): array
    protected static function compareRowBreaks(string $coordinate1, string $coordinate2): int
    protected static function compareColumnBreaks(string $coordinate1, string $coordinate2): int
    public function getColumnBreaks(): array
    public function mergeCells(AddressRange|string|array $range, string $behaviour = self::MERGE_CELL_CONTENT_EMPTY): static
    private function clearMergeCellsByColumn(string $firstColumn, string $lastColumn, int $firstRow, int $lastRow, string $upperLeft, string $behaviour): void
    private function clearMergeCellsByRow(string $firstColumn, int $lastColumnIndex, int $firstRow, int $lastRow, string $upperLeft, string $behaviour): void
    public function mergeCellBehaviour(Cell $cell, string $upperLeft, string $behaviour, array $leftCellValue): array
    public function unmergeCells(AddressRange|string|array $range): static
    public function getMergeCells(): array
    public function setMergeCells(array $mergeCells): static
    public function protectCells(AddressRange|CellAddress|int|string|array $range, string $password = '', bool $alreadyHashed = false, string $name = '', string $securityDescriptor = ''): static
    public function unprotectCells(AddressRange|CellAddress|int|string|array $range): static
    public function getProtectedCells(): array
    public function getProtectedCellRanges(): array
    public function getAutoFilter(): AutoFilter
    public function setAutoFilter(AddressRange|string|array|AutoFilter $autoFilterOrRange): static
    public function removeAutoFilter(): self
    public function getTableCollection(): ArrayObject
    public function addTable(Table $table): self
    public function getTableNames(): array
    public function getTableByName(string $name): ?Table
    protected function getTableIndexByName(string $name): ?int
    public function removeTableByName(string $name): self
    public function removeTableCollection(): self
    public function getFreezePane(): ?string
    public function freezePane(null|CellAddress|string|array $coordinate, null|CellAddress|string|array $topLeftCell = null, bool $frozenSplit = false): static
    public function setTopLeftCell(string $topLeftCell): self
    public function unfreezePane(): static
    public function getTopLeftCell(): ?string
    public function getPaneTopLeftCell(): string
    public function setPaneTopLeftCell(string $paneTopLeftCell): self
    public function usesPanes(): bool
    public function getPane(string $position): ?Pane
    public function setPane(string $position, ?Pane $pane): self
    public function getPanes(): array
    public function getActivePane(): string
    public function setActivePane(string $activePane): self
    public function getXSplit(): int
    public function setXSplit(int $xSplit): self
    public function getYSplit(): int
    public function setYSplit(int $ySplit): self
    public function getPaneState(): string
    public function setPaneState(string $paneState): self
    public function insertNewRowBefore(int $before, int $numberOfRows = 1): static
    public function insertNewColumnBefore(string $before, int $numberOfColumns = 1): static
    public function insertNewColumnBeforeByIndex(int $beforeColumnIndex, int $numberOfColumns = 1): static
    public function removeRow(int $row, int $numberOfRows = 1): static
    private function removeRowDimensions(int $row, int $numberOfRows): array
    public function removeColumn(string $column, int $numberOfColumns = 1): static
    private function removeColumnDimensions(int $pColumnIndex, int $numberOfColumns): array
    public function removeColumnByIndex(int $columnIndex, int $numColumns = 1): static
    public function getShowGridlines(): bool
    public function setShowGridlines(bool $showGridLines): self
    public function getPrintGridlines(): bool
    public function setPrintGridlines(bool $printGridLines): self
    public function getShowRowColHeaders(): bool
    public function setShowRowColHeaders(bool $showRowColHeaders): self
    public function getShowSummaryBelow(): bool
    public function setShowSummaryBelow(bool $showSummaryBelow): self
    public function getShowSummaryRight(): bool
    public function setShowSummaryRight(bool $showSummaryRight): self
    public function getComments(): array
    public function setComments(array $comments): self
    public function removeComment(CellAddress|string|array $cellCoordinate): self
    public function getComment(CellAddress|string|array $cellCoordinate, bool $attachNew = true): Comment
    public function getActiveCell(): string
    public function getSelectedCells(): string
    public function setSelectedCell(string $coordinate): static
    public function setSelectedCells(AddressRange|CellAddress|int|string|array $coordinate): static
    private function setSelectedCellsActivePane(): void
    public function getRightToLeft(): bool
    public function setRightToLeft(bool $value): static
    public function fromArray(array $source, mixed $nullValue = null, string $startCell = 'A1', bool $strictNullComparison = false): static
    protected function cellToArray(Cell $cell, bool $calculateFormulas, bool $formatData, mixed $nullValue): mixed
    public function rangeToArray(
    public function rangeToArrayYieldRows(
    private function buildNullRow(
    private function validateNamedRange(string $definedName, bool $returnNullIfInvalid = false): ?DefinedName
    public function namedRangeToArray(
    public function toArray(
    public function getRowIterator(int $startRow = 1, ?int $endRow = null): RowIterator
    public function getColumnIterator(string $startColumn = 'A', ?string $endColumn = null): ColumnIterator
    public function garbageCollect(): static
    public function getHashCode(): string
    public function getHashInt(): int
    public static function extractSheetTitle(?string $range, bool $returnRange = false): array|null|string
    public function getHyperlink(string $cellCoordinate): Hyperlink
    public function setHyperlink(string $cellCoordinate, ?Hyperlink $hyperlink = null): static
    public function hyperlinkExists(string $coordinate): bool
    public function getHyperlinkCollection(): array
    public function getDataValidation(string $cellCoordinate): DataValidation
    public function setDataValidation(string $cellCoordinate, ?DataValidation $dataValidation = null): static
    public function dataValidationExists(string $coordinate): bool
    public function getDataValidationCollection(): array
    public function shrinkRangeToFit(string $range): string
    public function getTabColor(): Color
    public function resetTabColor(): static
    public function isTabColorSet(): bool
    public function copy(): static
    public function isEmptyRow(int $rowId, int $definitionOfEmptyFlags = 0): bool
    public function isEmptyColumn(string $columnId, int $definitionOfEmptyFlags = 0): bool
    public function __clone()
    public function setCodeName(string $codeName, bool $validate = true): static
    public function getCodeName(): ?string
    public function hasCodeName(): bool
    public static function nameRequiresQuotes(string $sheetName): bool
    public function isRowVisible(int $row): bool
    public function isCellLocked(string $coordinate): bool
    public function isCellHiddenOnFormulaBar(string $coordinate): bool
    private function getXfIndex(string $coordinate): ?int
    public function getBackgroundImage(): string
    public function getBackgroundMime(): string
    public function getBackgroundExtension(): string
    public function setBackgroundImage(string $backgroundImage): self
    public function copyCells(string $fromCell, string $toCells, bool $copyStyle = true): void
    public function calculateArrays(bool $preCalculateFormulas = true): void
    public function isCellInSpillRange(string $coordinate): bool
    public function applyStylesFromArray(string $coordinate, array $styleArray): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/BaseWriter.php
    abstract class BaseWriter implements IWriter
    public function getIncludeCharts(): bool
    public function setIncludeCharts(bool $includeCharts): self
    public function getPreCalculateFormulas(): bool
    public function setPreCalculateFormulas(bool $precalculateFormulas): self
    public function getUseDiskCaching(): bool
    public function setUseDiskCaching(bool $useDiskCache, ?string $cacheDirectory = null): self
    public function getDiskCachingDirectory(): string
    protected function processFlags(int $flags): void
    public function openFileHandle($filename): void
    protected function maybeCloseFileHandle(): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Csv.php
    class Csv extends BaseWriter
    public function __construct(Spreadsheet $spreadsheet)
    public function save($filename, int $flags = 0): void
    public function getDelimiter(): string
    public function setDelimiter(string $delimiter): self
    public function getEnclosure(): string
    public function setEnclosure(string $enclosure = '"'): self
    public function getLineEnding(): string
    public function setLineEnding(string $lineEnding): self
    public function getUseBOM(): bool
    public function setUseBOM(bool $useBOM): self
    public function getIncludeSeparatorLine(): bool
    public function setIncludeSeparatorLine(bool $includeSeparatorLine): self
    public function getExcelCompatibility(): bool
    public function setExcelCompatibility(bool $excelCompatibility): self
    public function getSheetIndex(): int
    public function setSheetIndex(int $sheetIndex): self
    public function getOutputEncoding(): string
    public function setOutputEncoding(string $outputEnconding): self
    public function setEnclosureRequired(bool $value): self
    public function getEnclosureRequired(): bool
    private static function elementToString(mixed $element): string
    private function writeLine($fileHandle, array $values): void
    public function getVariableColumns(): bool
    public function setVariableColumns(bool $pValue): self
    public function getPreferHyperlinkToLabel(): bool
    public function setPreferHyperlinkToLabel(bool $preferHyperlinkToLabel): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Exception.php
    class Exception extends PhpSpreadsheetException
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Html.php
    class Html extends BaseWriter
    public function __construct(Spreadsheet $spreadsheet)
    public function save($filename, int $flags = 0): void
    public function generateHtmlAll(): string
    public function setEditHtmlCallback(?callable $callback): void
    private function mapVAlign(string $vAlign): string
    private function mapHAlign(string $hAlign): string
    private function mapBorderStyle($borderStyle): string
    public function getSheetIndex(): ?int
    public function setSheetIndex(int $sheetIndex): static
    public function getGenerateSheetNavigationBlock(): bool
    public function setGenerateSheetNavigationBlock(bool $generateSheetNavigationBlock): static
    public function writeAllSheets(): static
    private static function generateMeta(?string $val, string $desc): string
    public function generateHTMLHeader(bool $includeStyles = false): string
    private function generateSheetPrep(): array
    private function generateSheetStarts(Worksheet $sheet, int $rowMin): array
    private function generateSheetTags(int $row, int $theadStart, int $theadEnd, int $tbodyStart): array
    public function generateSheetData(): string
    public function generateNavigation(): string
    private function extendRowsAndColumns(Worksheet $worksheet, int &$colMax, int &$rowMax): void
    public static function winFileToUrl(string $filename, bool $mpdf = false): string
    private function writeImageInCell(string $coordinates): string
    private function writeChartInCell(Worksheet $worksheet, string $coordinates): string
    private function adjustRendererPositions(Chart $chart, Worksheet $sheet): void
    public function generateStyles(bool $generateSurroundingHTML = true): string
    private function buildCssRowHeights(Worksheet $sheet, array &$css, int $sheetIndex): void
    private function buildCssPerSheet(Worksheet $sheet, array &$css): void
    public function buildCSS(bool $generateSurroundingHTML = true): array
    private function createCSSStyle(Style $style): array
    private function createCSSStyleAlignment(Alignment $alignment): array
    private function createCSSStyleFont(Font $font): array
    private function createCSSStyleBorders(Borders $borders): array
    private function createCSSStyleBorder(Border $border): string
    private function createCSSStyleFill(Fill $fill): array
    public function generateHTMLFooter(): string
    private function generateTableTagInline(Worksheet $worksheet, string $id): string
    private function generateTableTag(Worksheet $worksheet, string $id, string &$html, int $sheetIndex): void
    private function generateTableHeader(Worksheet $worksheet, bool $showid = true): string
    private function generateTableFooter(): string
    private function generateRowStart(Worksheet $worksheet, int $sheetIndex, int $row): string
    private function generateRowCellCss(Worksheet $worksheet, string $cellAddress, int $row, int $columnNumber): array
    private function generateRowCellDataValueRich(RichText $richText): string
    private function generateRowCellDataValue(Worksheet $worksheet, Cell $cell, string &$cellData): void
    private function generateRowCellData(Worksheet $worksheet, null|Cell|string $cell, array|string &$cssClass): string
    private function generateRowIncludeCharts(Worksheet $worksheet, string $coordinate): string
    private function generateRowSpans(string $html, int $rowSpan, int $colSpan): string
    private function generateRowWriteCell(
    private function generateRow(Worksheet $worksheet, array $values, int $row, string $cellType): string
    private static function replaceNonAscii(array $matches): string
    private static function replaceControlChars(string $convert): string
    private function assembleCSS(array $values = []): string
    public function getImagesRoot(): string
    public function setImagesRoot(string $imagesRoot): static
    public function getEmbedImages(): bool
    public function setEmbedImages(bool $embedImages): static
    public function getUseInlineCss(): bool
    public function setUseInlineCss(bool $useInlineCss): static
    public function formatColor(string $value, string $format): string
    public static function formatColorStatic(string $value, string $format): string
    private function calculateSpans(): void
    private function calculateSpansOmitRows(Worksheet $sheet, int $sheetIndex, array $candidateSpannedRow): void
    private function writeComment(Worksheet $worksheet, string $coordinate): string
    public function getOrientation(): ?string
    private function generatePageDeclarations(bool $generateSurroundingHTML): string
    private function shouldGenerateRow(Worksheet $sheet, int $row): bool
    private function shouldGenerateColumn(Worksheet $sheet, string $colStr): bool
    public function getBetterBoolean(): bool
    public function setBetterBoolean(bool $betterBoolean): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/IWriter.php
    public function __construct(Spreadsheet $spreadsheet);
    public function getIncludeCharts(): bool;
    public function setIncludeCharts(bool $includeCharts): self;
    public function getPreCalculateFormulas(): bool;
    public function setPreCalculateFormulas(bool $precalculateFormulas): self;
    public function save($filename, int $flags = 0): void;
    public function getUseDiskCaching(): bool;
    public function setUseDiskCaching(bool $useDiskCache, ?string $cacheDirectory = null): self;
    public function getDiskCachingDirectory(): string;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/AutoFilters.php
    class AutoFilters
    public function __construct(XMLWriter $objWriter, Spreadsheet $spreadsheet)
    public function write(): void
    protected function formatRange(Worksheet $worksheet, AutoFilter $autofilter): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/Cell/Comment.php
    class Comment
    public static function write(XMLWriter $objWriter, Cell $cell): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/Cell/Style.php
    class Style
    public function __construct(XMLWriter $writer)
    private function mapHorizontalAlignment(?string $horizontalAlignment): string
    private function mapVerticalAlignment(string $verticalAlignment): string
    private function writeFillStyle(Fill $fill): void
    private function writeBordersStyle(Borders $borders): void
    private function writeBorderStyle(string $direction, Border $border): void
    private function mapBorderWidth(Border $border): string
    private function mapBorderStyle(Border $border): string
    private function writeCellProperties(CellStyle $style): void
    protected function mapUnderlineStyle(Font $font): string
    protected function writeTextProperties(CellStyle $style): void
    protected function writeColumnProperties(ColumnDimension $columnDimension): void
    public function writeColumnStyles(ColumnDimension $columnDimension, int $sheetId): void
    protected function writeRowProperties(RowDimension $rowDimension): void
    public function writeRowStyles(RowDimension $rowDimension, int $sheetId): void
    public function writeTableStyle(Worksheet $worksheet, int $sheetId): void
    public function write(CellStyle $style): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/Content.php
    class Content extends WriterPart
    public function __construct(Ods $writer)
    public function write(): string
    private function writeSheets(XMLWriter $objWriter): void
    private function writeRows(XMLWriter $objWriter, Worksheet $sheet, int $sheetIndex): void
    private function writeCells(XMLWriter $objWriter, RowCellIterator $cells): void
    private function writeCellSpan(XMLWriter $objWriter, int $curColumn, int $prevColumn): void
    private function writeXfStyles(XMLWriter $writer, Spreadsheet $spreadsheet): void
    private function writeCellMerge(XMLWriter $objWriter, Cell $cell): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/Formula.php
    class Formula
    public function __construct(array $definedNames)
    public function convertFormula(string $formula, string $worksheetName = ''): string
    private function convertDefinedNames(string $formula): string
    private function convertCellReferences(string $formula, string $worksheetName): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/Meta.php
    class Meta extends WriterPart
    public function write(): string
    private static function writeDocPropsCustom(XMLWriter $objWriter, Spreadsheet $spreadsheet): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/MetaInf.php
    class MetaInf extends WriterPart
    public function write(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/Mimetype.php
    class Mimetype extends WriterPart
    public function write(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/NamedExpressions.php
    class NamedExpressions
    public function __construct(XMLWriter $objWriter, Spreadsheet $spreadsheet, Formula $formulaConvertor)
    public function write(): string
    private function writeExpressions(): void
    private function writeNamedFormula(DefinedName $definedName, Worksheet $defaultWorksheet): void
    private function writeNamedRange(DefinedName $definedName): void
    private function convertAddress(DefinedName $definedName, string $address): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/Settings.php
    class Settings extends WriterPart
    public function write(): string
    private function writeAllWorksheetSettings(XMLWriter $objWriter, Spreadsheet $spreadsheet): void
    private function writeWorksheetSettings(XMLWriter $objWriter, Worksheet $worksheet): void
    private function writeSelectedCells(XMLWriter $objWriter, Worksheet $worksheet): void
    private function writeSplitValue(XMLWriter $objWriter, string $splitMode, string $type, string $value): void
    private function writeFreezePane(XMLWriter $objWriter, Worksheet $worksheet): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/Styles.php
    class Styles extends WriterPart
    public function write(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/Thumbnails.php
    class Thumbnails extends WriterPart
    public function write(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods/WriterPart.php
    abstract class WriterPart
    public function getParentWriter(): Ods
    public function __construct(Ods $writer)
    abstract public function write(): string;
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Ods.php
    class Ods extends BaseWriter
    public function __construct(Spreadsheet $spreadsheet)
    public function getWriterPartContent(): Content
    public function getWriterPartMeta(): Meta
    public function getWriterPartMetaInf(): MetaInf
    public function getWriterPartMimetype(): Mimetype
    public function getWriterPartSettings(): Settings
    public function getWriterPartStyles(): Styles
    public function getWriterPartThumbnails(): Thumbnails
    public function save($filename, int $flags = 0): void
    private function createZip(): ZipStream
    public function getSpreadsheet(): Spreadsheet
    public function setSpreadsheet(Spreadsheet $spreadsheet): static
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Pdf/Dompdf.php
    class Dompdf extends Pdf
    protected function createExternalWriterInstance(): \Dompdf\Dompdf
    public function save($filename, int $flags = 0): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Pdf/Mpdf.php
    class Mpdf extends Pdf
    protected function createExternalWriterInstance(array $config): \Mpdf\Mpdf
    public function save($filename, int $flags = 0): void
    private function inchesToMm(float $inches): float
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Pdf/Tcpdf.php
    class Tcpdf extends Pdf
    public function __construct(Spreadsheet $spreadsheet)
    protected function createExternalWriterInstance(string $orientation, string $unit, $paperSize): \TCPDF
    public function save($filename, int $flags = 0): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Pdf.php
    abstract class Pdf extends Html
    public function __construct(Spreadsheet $spreadsheet)
    public function getFont(): string
    public function setFont(string $fontName)
    public function getPaperSize(): ?int
    public function setPaperSize(int $paperSize): self
    public function getOrientation(): ?string
    public function setOrientation(string $orientation): self
    public function getTempDir(): string
    public function setTempDir(string $temporaryDirectory): self
    protected function prepareForSave($filename)
    protected function restoreStateAfterSave(): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/BIFFwriter.php
    // *  class library should be directed to me.
    class BIFFwriter
    public function __construct()
    * Determine the byte order and store it as class data to avoid
    public static function getByteOrder(): int
    protected function append(string $data): void
    * General storage function like append, but returns string instead of modifying $this->_data.
    public function writeData(string $data): string
    protected function storeBof(int $type): void
    protected function storeEof(): void
    public function writeEof(): string
    * This function takes a long BIFF record and inserts CONTINUE records as
    private function addContinue(string $data): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/CellDataValidation.php
    class CellDataValidation
    public static function type(DataValidation $dataValidation): int
    public static function errorStyle(DataValidation $dataValidation): int
    public static function operator(DataValidation $dataValidation): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/ConditionalHelper.php
    class ConditionalHelper
    public function __construct(Parser $parser)
    public function processCondition(mixed $condition, string $cellRange): void
    public function tokens(): ?string
    public function size(): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/ErrorCode.php
    class ErrorCode
    public static function error(string $errorCode): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/Escher.php
    class Escher
    public function __construct(Blip|BSE|BstoreContainer|DgContainer|DggContainer|self|SpContainer|SpgrContainer|SharedEscher $object)
    public function close(): string
    public function getSpOffsets(): array
    public function getSpTypes(): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/Font.php
    class Font
    public function __construct(\PhpOffice\PhpSpreadsheet\Style\Font $font)
    public function setColorIndex(int $colorIndex): void
    public function writeFont(): string
    private static function mapBold(?bool $bold): int
    private static function mapUnderline(string $underline): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/Parser.php
    class Parser
    * Refer to function_locale.pl for non-English function names.
    * ptg:   The Excel function ptg code.
    * args:  The number of arguments that the function takes:
    * class: The reference, value or array class of the function args.
    * vol:   The function is volatile.
    // function                  ptg  args  class  vol
    * The class constructor.
    public function __construct(Spreadsheet $spreadsheet)
    private function convert(string $token): string
    private function convertNumber(mixed $num): string
    private function convertBool(int $num): string
    private function convertString(string $string): string
    * Convert a function to a ptgFunc or ptgFuncVarV depending on the number of
    * @param string $token the name of the function for convertion to ptg value
    * @param int $num_args the number of arguments the function receives
    private function convertFunction(string $token, int $num_args): string
    private function convertRange2d(string $range, int $class = 0): string
    // TODO: possible class value 0,1,2 check Formula.pm
    // The ptg value depends on the class of the ptg.
    if ($class == 0) {
    } elseif ($class == 1) {
    } elseif ($class == 2) {
    throw new WriterException("Unknown class $class");
    private function convertRange3d(string $token): string
    // The ptg value depends on the class of the ptg.
    private function convertRef2d(string $cell): string
    // The ptg value depends on the class of the ptg.
    private function convertRef3d(string $cell): string
    // The ptg value depends on the class of the ptg.
    private function convertError(string $errorCode): string
    private function convertDefinedName(string $name): string
    private function getRefIndex(string $ext_ref): string
    private function getSheetIndex(string $sheet_name): int
    public function setExtSheet(string $name, int $index): void
    private function cellToPackedRowcol(string $cell): array
    private function rangeToPackedRange(string $range): array
    private function cellToRowcol(string $cell): array
    private function advance(): void
    private function match(string $token): string
    // if it's a function call
    public function parse(string $formula): bool
    private function condition(): array
    private function expression(): array
    * This function just introduces a ptgParen element in the tree, so that Excel
    private function parenthesizedExpression(): array
    private function term(): array
    private function fact(): array
    // if it's a function call
    * It parses a function call. It assumes the following rule:
    private function func(): array
    $function = strtoupper($this->currentToken);
    throw new WriterException("Syntax error: comma expected in function $function, arg #{$num_args}");
    throw new WriterException("Incorrect number of arguments in function $function() ");
    private function createTree(mixed $value, mixed $left, mixed $right): array
    public function toReversePolish(array $tree = []): string
    // if it's a function convert it here (so we can set it's arguments)
    // left subtree for a function is always an array.
    public static function matchCellSheetnameQuoted(string $token): bool
    public static function matchRangeSheetnameQuoted(string $token): bool
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/Style/CellAlignment.php
    class CellAlignment
    public static function horizontal(Alignment $alignment): int
    public static function wrap(Alignment $alignment): int
    public static function vertical(Alignment $alignment): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/Style/CellBorder.php
    class CellBorder
    public static function style(Border $border): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/Style/CellFill.php
    class CellFill
    public static function style(Fill $fill): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/Workbook.php
    // *  class library should be directed to me.
    class Workbook extends BIFFwriter
    public function __construct(Spreadsheet $spreadsheet, int &$str_total, int &$str_unique, array &$str_table, array &$colors, Parser $parser)
    public function addXfWriter(Style $style, bool $isStyleXf = false): int
    public function addFont(\PhpOffice\PhpSpreadsheet\Style\Font $font): int
    public function addColor(string $rgb, int $default = 0): int
    private function setPaletteXl97(): void
    public function writeWorkbook(array $worksheetSizes): string
    private function calcSheetOffsets(): void
    private function writeAllFonts(): void
    private function writeAllNumberFormats(): void
    private function writeAllXfs(): void
    private function writeAllStyles(): void
    private function parseDefinedNameValue(DefinedName $definedName): string
    private function writeAllDefinedNamesBiff8(): string
    private function writeDefinedNameBiff8(string $name, string $formulaData, int $sheetIndex = 0, bool $isBuiltIn = false): string
    private function writeShortNameBiff8(string $name, int $sheetIndex, array $rangeBounds, bool $isHidden = false): string
    private function writeCodepage(): void
    private function writeWindow1(): void
    private function writeBoundSheet(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet, int $offset): void
    private function writeSupbookInternal(): string
    private function writeExternalsheetBiff8(): string
    private function writeStyle(): void
    private function writeNumberFormat(string $format, int $ifmt): void
    private function writeDateMode(): void
    private function writeCountry(): string
    private function writeRecalcId(): string
    private function writePalette(): void
    private function writeSharedStringsTable(): string
    private function writeMsoDrawingGroup(): string
    public function getEscher(): ?\PhpOffice\PhpSpreadsheet\Shared\Escher
    public function setEscher(?\PhpOffice\PhpSpreadsheet\Shared\Escher $escher): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/Worksheet.php
    // *  class library should be directed to me.
    class Worksheet extends BIFFwriter
    public function __construct(int &$str_total, int &$str_unique, array &$str_table, array &$colors, Parser $parser, bool $preCalculateFormulas, \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $phpSheet, ?Workbook $writerWorkbook = null)
    public function close(): void
    private static function limitRange(string $exploded): string
    private function writeConditionalFormatting(): void
    private function writeBIFF8CellRangeAddressFixed(string $range): string
    public function getData(): string
    public function printRowColHeaders(int $print = 1): void
    public function setOutline(bool $visible = true, bool $symbols_below = true, bool $symbols_right = true, bool $auto_style = false): void
    private function writeNumber(int $row, int $col, float $num, int $xfIndex): int
    private function writeString(int $row, int $col, string $str, int $xfIndex): void
    private function writeRichTextString(int $row, int $col, string $str, int $xfIndex, array $arrcRun): void
    private function writeLabelSst(int $row, int $col, string $str, int $xfIndex): void
    public function writeBlank(int $row, int $col, int $xfIndex): int
    private function writeBoolErr(int $row, int $col, int $value, int $isError, int $xfIndex): int
    public static function setAllowThrow(bool $allowThrow): void
    public static function getAllowThrow(): bool
    private function writeFormula(int $row, int $col, string $formula, int $xfIndex, mixed $calculatedValue): int
    private function writeStringRecord(string $stringValue): void
    private function writeUrl(int $row, int $col, string $url): void
    * written to a range of cells. This function also decides the type of hyperlink
    private function writeUrlRange(int $row1, int $col1, int $row2, int $col2, string $url): void
    public function writeUrlWeb(int $row1, int $col1, int $row2, int $col2, string $url): void
    private function writeUrlInternal(int $row1, int $col1, int $row2, int $col2, string $url): void
    private function writeUrlExternal(int $row1, int $col1, int $row2, int $col2, string $url): void
    private function writeRow(int $row, int $height, int $xfIndex, bool $hidden = false, int $level = 0): void
    private function writeDimensions(): void
    private function writeWindow2(): void
    private function writeDefaultRowHeight(): void
    private function writeDefcol(): void
    private function writeColinfo(array $col_array): void
    private function writeSelection(): void
    private function writeMergedCells(): void
    private function writeSheetLayout(): void
    private static function protectionBitsDefaultFalse(?bool $value, int $shift): int
    private static function protectionBitsDefaultTrue(?bool $value, int $shift): int
    private function writeSheetProtection(): void
    private function writeRangeProtection(): void
    private function writePanes(): void
    private function writeSetup(): void
    private function writeHeader(): void
    private function writeFooter(): void
    private function writeHcenter(): void
    private function writeVcenter(): void
    private function writeMarginLeft(): void
    private function writeMarginRight(): void
    private function writeMarginTop(): void
    private function writeMarginBottom(): void
    private function writePrintHeaders(): void
    private function writePrintGridlines(): void
    private function writeGridset(): void
    private function writeAutoFilterInfo(): void
    private function writeGuts(): void
    private function writeWsbool(): void
    private function writeBreaks(): void
    private function writeProtect(): void
    private function writeScenProtect(): void
    private function writeObjectProtect(): void
    private function writePassword(): void
    public function insertBitmap(int $row, int $col, GdImage|string $bitmap, int $x = 0, int $y = 0, float $scale_x = 1, float $scale_y = 1): void
    public function positionImage(int $col_start, int $row_start, int $x1, int $y1, int $width, int $height): void
    private function writeObjPicture(int $colL, int $dxL, int $rwT, int|float $dyT, int $colR, int $dxR, int $rwB, int $dyB): void
    public function processBitmapGd(GdImage $image): array
    public function processBitmap(string $bitmap): array
    private function writeZoom(): void
    public function getEscher(): ?\PhpOffice\PhpSpreadsheet\Shared\Escher
    public function setEscher(?\PhpOffice\PhpSpreadsheet\Shared\Escher $escher): void
    private function writeMsoDrawing(): void
    private function writeDataValidity(): void
    private function writePageLayoutView(): void
    private function writeCFRule(
    private function writeCFHeader(string $cellCoordinate, array $conditionalStyles): bool
    /*private function getDataBlockProtection(Conditional $conditional): int
    private function workbookColorIndex(?string $rgb, int $default): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls/Xf.php
    // *  class library should be directed to me.
    class Xf
    public function __construct(Style $style)
    public function writeXf(): string
    public function setIsStyleXf(bool $value): void
    public function setBottomColor(int $colorIndex): void
    public function setTopColor(int $colorIndex): void
    public function setLeftColor(int $colorIndex): void
    public function setRightColor(int $colorIndex): void
    public function setDiagColor(int $colorIndex): void
    public function setFgColor(int $colorIndex): void
    public function setBgColor(int $colorIndex): void
    public function setNumberFormatIndex(int $numberFormatIndex): void
    public function setFontIndex(int $value): void
    private static function mapTextRotation(int $textRotation): int
    private static function mapLocked(?string $locked): int
    private static function mapHidden(?string $hidden): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xls.php
    class Xls extends BaseWriter
    public function __construct(Spreadsheet $spreadsheet)
    public function save($filename, int $flags = 0): void
    private function buildWorksheetEschers(): void
    private function processMemoryDrawing(BstoreContainer &$bstoreContainer, MemoryDrawing $drawing, string $renderingFunctionx): void
    private function processDrawing(BstoreContainer &$bstoreContainer, Drawing $drawing): void
    private function processBaseDrawing(BstoreContainer &$bstoreContainer, BaseDrawing $drawing): void
    private function checkForDrawings(): bool
    private function buildWorkbookEscher(): void
    private function writeDocumentSummaryInformation(): string
    // offset: 28; size: 16; first section's class id: 02 d5 cd d5 9c 2e 1b 10 93 97 08 00 2b 2c f9 ae
    private function writeSummaryPropOle(float|int $dataProp, int &$dataSection_NumProps, array &$dataSection, int $sumdata, int $typdata): void
    private function writeSummaryProp(string $dataProp, int &$dataSection_NumProps, array &$dataSection, int $sumdata, int $typdata): void
    private function writeSummaryInformation(): string
    // offset: 28; size: 16; first section's class id: e0 85 9f f2 f9 4f 68 10 ab 91 08 00 2b 27 b3 d9
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/AutoFilter.php
    class AutoFilter extends WriterPart
    public static function writeAutoFilter(XMLWriter $objWriter, ActualWorksheet $worksheet): void
    public static function writeAutoFilterColumn(XMLWriter $objWriter, Column $column, int $colId): void
    private static function writeAutoFilterColumnRule(Column $column, Rule $rule, XMLWriter $objWriter): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/Chart.php
    class Chart extends WriterPart
    public function writeChart(\PhpOffice\PhpSpreadsheet\Chart\Chart $chart, bool $calculateCellValues = true): string
    private function writeView3D(XMLWriter $objWriter, ?int $value, string $tag, bool $surface2D, int $default = 0): void
    private function writeTitle(XMLWriter $objWriter, ?Title $title = null): void
    private function writeCalculatedTitle(XMLWriter $objWriter, Title $title): bool
    private function writeLegend(XMLWriter $objWriter, ?Legend $legend = null): void
    private function writePlotArea(XMLWriter $objWriter, ?PlotArea $plotArea, ?Title $xAxisLabel = null, ?Title $yAxisLabel = null, ?Axis $xAxis = null, ?Axis $yAxis = null): void
    private function writeDataLabelsBool(XMLWriter $objWriter, string $name, ?bool $value): void
    private function writeDataLabels(XMLWriter $objWriter, ?Layout $chartLayout = null): void
    private function writeCategoryAxis(XMLWriter $objWriter, ?Title $xAxisLabel, string $id1, string $id2, bool $isMultiLevelSeries, Axis $yAxis): void
    private function writeValueAxis(XMLWriter $objWriter, ?Title $yAxisLabel, ?string $groupType, string $id1, string $id2, bool $isMultiLevelSeries, Axis $xAxis): void
    private function writeSerAxis(XMLWriter $objWriter, string $id2, string $id3): void
    private static function getChartType(PlotArea $plotArea): array
    private function writePlotSeriesValuesElement(XMLWriter $objWriter, int $val, ?ChartColor $fillColor): void
    private function writePlotGroup(?DataSeries $plotGroup, string $groupType, XMLWriter $objWriter, bool &$catIsMultiLevelSeries, bool &$valIsMultiLevelSeries, string &$plotGroupingType): void
    private function writePlotSeriesLabel(?DataSeriesValues $plotSeriesLabel, XMLWriter $objWriter): void
    private function writePlotSeriesValues(?DataSeriesValues $plotSeriesValues, XMLWriter $objWriter, string $groupType, string $dataType = 'str'): void
    private function writeBubbles(?DataSeriesValues $plotSeriesValues, XMLWriter $objWriter): void
    private function writeLayout(XMLWriter $objWriter, ?Layout $layout = null): void
    private function writeAlternateContent(XMLWriter $objWriter): void
    private function writePrintSettings(XMLWriter $objWriter): void
    private function writeEffects(XMLWriter $objWriter, Properties $yAxis): void
    private function writeShadow(XMLWriter $objWriter, Properties $xAxis): void
    private function writeGlow(XMLWriter $objWriter, Properties $yAxis): void
    private function writeSoftEdge(XMLWriter $objWriter, Properties $yAxis): void
    private function writeLineStyles(XMLWriter $objWriter, Properties $gridlines, bool $noFill = false): void
    private function writeNotEmpty(XMLWriter $objWriter, string $name, ?string $value): void
    private function writeColor(XMLWriter $objWriter, ChartColor $chartColor, bool $solidFill = true): void
    private function writeLabelFont(XMLWriter $objWriter, ?Font $labelFont, ?Properties $axisText): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/Comments.php
    class Comments extends WriterPart
    public function writeComments(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $worksheet): string
    private function writeComment(XMLWriter $objWriter, string $cellReference, Comment $comment, array $authors): void
    public function writeVMLComments(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $worksheet): string
    private function writeVMLComment(XMLWriter $objWriter, string $cellReference, Comment $comment): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/ContentTypes.php
    class ContentTypes extends WriterPart
    public function writeContentTypes(Spreadsheet $spreadsheet, bool $includeCharts = false): string
    private function getImageMimeType(string $filename): string
    private function writeDefaultContentType(XMLWriter $objWriter, string $partName, string $contentType): void
    private function writeOverrideContentType(XMLWriter $objWriter, string $partName, string $contentType): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/DefinedNames.php
    class DefinedNames
    public function __construct(XMLWriter $objWriter, Spreadsheet $spreadsheet)
    public function write(): void
    private function writeNamedRangesAndFormulae(): void
    private function writeDefinedName(DefinedName $definedName): void
    private function writeNamedRangeForAutofilter(ActualWorksheet $worksheet, int $worksheetId = 0): void
    private function writeNamedRangeForPrintTitles(ActualWorksheet $worksheet, int $worksheetId = 0): void
    private function writeNamedRangeForPrintArea(ActualWorksheet $worksheet, int $worksheetId = 0): void
    private function getDefinedRange(DefinedName $definedName): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/DocProps.php
    class DocProps extends WriterPart
    public function writeDocPropsApp(Spreadsheet $spreadsheet): string
    public function writeDocPropsCore(Spreadsheet $spreadsheet): string
    public function writeDocPropsCustom(Spreadsheet $spreadsheet): ?string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/Drawing.php
    class Drawing extends WriterPart
    public function writeDrawings(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $worksheet, bool $includeCharts = false): string
    public function writeChart(XMLWriter $objWriter, \PhpOffice\PhpSpreadsheet\Chart\Chart $chart, int $relationId = -1): void
    public function writeDrawing(XMLWriter $objWriter, BaseDrawing $drawing, int $relationId = -1, ?int $hlinkClickId = null): void
    public function writeVMLHeaderFooterImages(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $worksheet): string
    private function writeVMLHeaderFooterImage(XMLWriter $objWriter, string $reference, HeaderFooterDrawing $image): void
    public function allDrawings(Spreadsheet $spreadsheet): array
    private function writeHyperLinkDrawing(XMLWriter $objWriter, ?int $hlinkClickId): void
    private static function stringEmu(int $pixelValue): string
    private static function writeAttributeIf(XMLWriter $objWriter, ?bool $condition, string $attr, string $val): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/FunctionPrefix.php
    class FunctionPrefix
    * Prefix function name in string with _xlfn. where required.
    protected static function addXlfnPrefix(string $functionString): string
    * Prefix function name in string with _xlws. where required.
    protected static function addXlwsPrefix(string $functionString): string
    * Prefix function name in string with _xlfn. where required.
    public static function addFunctionPrefix(string $functionString): string
    * Prefix function name in string with _xlfn. where required.
    public static function addFunctionPrefixStripEquals(string $functionString): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/Metadata.php
    class Metadata extends WriterPart
    public function writeMetadata(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/Rels.php
    class Rels extends WriterPart
    public function writeRelationships(Spreadsheet $spreadsheet): string
    public function writeWorkbookRelationships(Spreadsheet $spreadsheet): string
    public function writeWorksheetRelationships(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $worksheet, int $worksheetId = 1, bool $includeCharts = false, int $tableRef = 1, array &$zipContent = []): string
    private function writeUnparsedRelationship(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $worksheet, XMLWriter $objWriter, string $relationship, string $type): void
    public function writeDrawingRelationships(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $worksheet, int &$chartRef, bool $includeCharts = false): string
    public function writeHeaderFooterDrawingRelationships(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $worksheet): string
    public function writeVMLDrawingRelationships(\PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $worksheet): string
    private function writeRelationship(XMLWriter $objWriter, $id, string $type, string $target, string $targetMode = ''): void
    private function writeDrawingHyperLink(XMLWriter $objWriter, BaseDrawing $drawing, int $i): int
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/RelsRibbon.php
    class RelsRibbon extends WriterPart
    public function writeRibbonRelationships(Spreadsheet $spreadsheet): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/RelsVBA.php
    class RelsVBA extends WriterPart
    public function writeVBARelationships(): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/StringTable.php
    class StringTable extends WriterPart
    public function createStringTable(ActualWorksheet $worksheet, ?array $existingTable = null): array
    public function writeStringTable(array $stringTable): string
    public function writeRichText(XMLWriter $objWriter, RichText $richText, ?string $prefix = null): void
    public function writeRichTextForCharts(XMLWriter $objWriter, $richText = null, string $prefix = ''): void
    private function writeChartTextColor(XMLWriter $objWriter, ?ChartColor $underlineColor, string $prefix, ?string $openTag = ''): void
    public function flipStringTable(array $stringTable): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/Style.php
    class Style extends WriterPart
    public function writeStyles(Spreadsheet $spreadsheet): string
    private function writeFill(XMLWriter $objWriter, Fill $fill): void
    private function writeGradientFill(XMLWriter $objWriter, Fill $fill): void
    private static function writePatternColors(Fill $fill): bool
    private function writePatternFill(XMLWriter $objWriter, Fill $fill): void
    private function startFont(XMLWriter $objWriter, bool &$fontStarted): void
    private function writeFont(XMLWriter $objWriter, Font $font): void
    private function writeBorder(XMLWriter $objWriter, Borders $borders): void
    private function writeCellStyleXf(XMLWriter $objWriter, \PhpOffice\PhpSpreadsheet\Style\Style $style, Spreadsheet $spreadsheet, string $defaultAlignHash): void
    private function writeCellStyleDxf(XMLWriter $objWriter, \PhpOffice\PhpSpreadsheet\Style\Style $style): void
    private function writeBorderPr(XMLWriter $objWriter, string $name, Border $border): void
    private function writeNumFmt(XMLWriter $objWriter, ?NumberFormat $numberFormat, int $id = 0): void
    public function allStyles(Spreadsheet $spreadsheet): array
    public function allConditionalStyles(Spreadsheet $spreadsheet): array
    public function allFills(Spreadsheet $spreadsheet): array
    public function allFonts(Spreadsheet $spreadsheet): array
    public function allBorders(Spreadsheet $spreadsheet): array
    public function allNumberFormats(Spreadsheet $spreadsheet): array
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/Table.php
    class Table extends WriterPart
    public function writeTable(WorksheetTable $table, int $tableRef): string
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/Theme.php
    class Theme extends WriterPart
    public function writeTheme(Spreadsheet $spreadsheet): string
    private function writeFonts(XMLWriter $objWriter, string $latinFont, string $eastAsianFont, string $complexScriptFont, array $fontSet): void
    private function writeColourScheme(XMLWriter $objWriter, SpreadsheetTheme $theme): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/Workbook.php
    class Workbook extends WriterPart
    public function writeWorkbook(Spreadsheet $spreadsheet, bool $preCalculateFormulas = false, ?bool $forceFullCalc = null): string
    private function writeFileVersion(XMLWriter $objWriter): void
    private function writeWorkbookPr(XMLWriter $objWriter, Spreadsheet $spreadsheet): void
    private function writeBookViews(XMLWriter $objWriter, Spreadsheet $spreadsheet): void
    private function writeWorkbookProtection(XMLWriter $objWriter, Spreadsheet $spreadsheet): void
    private function writeCalcPr(XMLWriter $objWriter, bool $preCalculateFormulas, ?bool $forceFullCalc): void
    private function writeSheets(XMLWriter $objWriter, Spreadsheet $spreadsheet): void
    private function writeSheet(XMLWriter $objWriter, string $worksheetName, int $worksheetId = 1, int $relId = 1, string $sheetState = 'visible'): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/Worksheet.php
    class Worksheet extends WriterPart
    public function writeWorksheet(PhpspreadsheetWorksheet $worksheet, array $stringTable = [], bool $includeCharts = false): string
    private function writeIgnoredError(XMLWriter $objWriter, bool &$started, string $attr, string $cells): void
    private function writeIgnoredErrors(XMLWriter $objWriter): void
    private function writeSheetPr(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeDimension(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeSheetViews(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeSheetFormatPr(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeCols(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeSheetProtection(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private static function writeProtectionAttribute(XMLWriter $objWriter, string $name, ?bool $value): void
    private static function writeAttributeIf(XMLWriter $objWriter, ?bool $condition, string $attr, string $val): void
    private static function writeAttributeNotNull(XMLWriter $objWriter, string $attr, ?string $val): void
    private static function writeElementIf(XMLWriter $objWriter, bool $condition, string $attr, string $val): void
    private static function writeOtherCondElements(XMLWriter $objWriter, Conditional $conditional, string $cellCoordinate): void
    private static function writeTimePeriodCondElements(XMLWriter $objWriter, Conditional $conditional, string $cellCoordinate): void
    private static function writeTextCondElements(XMLWriter $objWriter, Conditional $conditional, string $cellCoordinate): void
    private static function writeExtConditionalFormattingElements(XMLWriter $objWriter, ConditionalFormattingRuleExtension $ruleExtension): void
    private static function writeDataBarElements(XMLWriter $objWriter, ?ConditionalDataBar $dataBar): void
    private static function writeColorScaleElements(XMLWriter $objWriter, ?ConditionalColorScale $colorScale): void
    private function writeConditionalFormatting(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeDataValidations(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeHyperlinks(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeProtectedRanges(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeMergeCells(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writePrintOptions(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writePageMargins(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeAutoFilter(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeTable(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeBackgroundImage(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writePageSetup(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeHeaderFooter(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeBreaks(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeSheetData(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet, array $stringTable): void
    private function writeCellInlineStr(XMLWriter $objWriter, string $mappedType, RichText|string $cellValue): void
    private function writeCellString(XMLWriter $objWriter, string $mappedType, RichText|string $cellValue, array $flippedStringTable): void
    private function writeCellNumeric(XMLWriter $objWriter, float|int $cellValue): void
    private function writeCellBoolean(XMLWriter $objWriter, string $mappedType, bool $cellValue): void
    private function writeCellError(XMLWriter $objWriter, string $mappedType, string $cellValue, string $formulaerr = '#NULL!'): void
    private function writeCellFormula(XMLWriter $objWriter, string $cellValue, Cell $cell): void
    private function parseRef(string $coordinate, string $ref): string
    private function writeCell(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet, string $cellAddress, array $flippedStringTable): void
    private function writeDrawings(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet, bool $includeCharts = false): void
    private function writeLegacyDrawing(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeLegacyDrawingHF(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeAlternateContent(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
    private function writeExtLst(XMLWriter $objWriter, PhpspreadsheetWorksheet $worksheet): void
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx/WriterPart.php
    abstract class WriterPart
    public function getParentWriter(): Xlsx
    public function __construct(Xlsx $writer)
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/Xlsx.php
    class Xlsx extends BaseWriter
    public function __construct(Spreadsheet $spreadsheet)
    public function getWriterPartChart(): Chart
    public function getWriterPartComments(): Comments
    public function getWriterPartContentTypes(): ContentTypes
    public function getWriterPartDocProps(): DocProps
    public function getWriterPartDrawing(): Drawing
    public function getWriterPartRels(): Rels
    public function getWriterPartRelsRibbon(): RelsRibbon
    public function getWriterPartRelsVBA(): RelsVBA
    public function getWriterPartStringTable(): StringTable
    public function getWriterPartStyle(): Style
    public function getWriterPartTheme(): Theme
    public function getWriterPartTable(): Table
    public function getWriterPartWorkbook(): Workbook
    public function getWriterPartWorksheet(): Worksheet
    public function save($filename, int $flags = 0): void
    public function getSpreadsheet(): Spreadsheet
    public function setSpreadsheet(Spreadsheet $spreadsheet): static
    public function getStringTable(): array
    public function getStyleHashTable(): HashTable
    public function getStylesConditionalHashTable(): HashTable
    public function getFillHashTable(): HashTable
    public function getFontHashTable(): HashTable
    public function getBordersHashTable(): HashTable
    public function getNumFmtHashTable(): HashTable
    public function getDrawingHashTable(): HashTable
    public function getOffice2003Compatibility(): bool
    public function setOffice2003Compatibility(bool $office2003compatibility): static
    private function addZipFile(string $path, string $content): void
    private function addZipFiles(array $zipContent): void
    private function processDrawing(WorksheetDrawing $drawing): string|null|false
    public function getExplicitStyle0(): bool
    public function setExplicitStyle0(bool $explicitStyle0): self
    public function setUseCSEArrays(?bool $useCSEArrays): void
    public function useDynamicArrays(): bool
    private function determineUseDynamicArrays(): void
    public function setForceFullCalc(?bool $forceFullCalc): self
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/ZipStream0.php
    class ZipStream0
    public static function newZipStream($fileHandle): ZipStream
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/ZipStream2.php
    class ZipStream2
    public static function newZipStream($fileHandle): ZipStream
--------------------------------------------
Fichier : ./vendor/phpoffice/phpspreadsheet/src/PhpSpreadsheet/Writer/ZipStream3.php
    class ZipStream3
    public static function newZipStream($fileHandle): ZipStream
--------------------------------------------
Fichier : ./vendor/phpoption/phpoption/src/PhpOption/LazyOption.php
    final class LazyOption extends Option
    public static function create($callback, array $arguments = []): self
    public function __construct($callback, array $arguments = [])
    public function isDefined(): bool
    public function isEmpty(): bool
    public function get()
    public function getOrElse($default)
    public function getOrCall($callable)
    public function getOrThrow(\Exception $ex)
    public function orElse(Option $else)
    public function ifDefined($callable)
    public function forAll($callable)
    public function map($callable)
    public function flatMap($callable)
    public function filter($callable)
    public function filterNot($callable)
    public function select($value)
    public function reject($value)
    public function getIterator(): Traversable
    public function foldLeft($initialValue, $callable)
    public function foldRight($initialValue, $callable)
    private function option(): Option
--------------------------------------------
Fichier : ./vendor/phpoption/phpoption/src/PhpOption/None.php
    final class None extends Option
    public static function create(): self
    public function get()
    public function getOrCall($callable)
    public function getOrElse($default)
    public function getOrThrow(\Exception $ex)
    public function isEmpty(): bool
    public function isDefined(): bool
    public function orElse(Option $else)
    public function ifDefined($callable)
    public function forAll($callable)
    public function map($callable)
    public function flatMap($callable)
    public function filter($callable)
    public function filterNot($callable)
    public function select($value)
    public function reject($value)
    public function getIterator(): EmptyIterator
    public function foldLeft($initialValue, $callable)
    public function foldRight($initialValue, $callable)
    private function __construct()
--------------------------------------------
Fichier : ./vendor/phpoption/phpoption/src/PhpOption/Option.php
    abstract class Option implements IteratorAggregate
    public static function fromValue($value, $noneValue = null)
    public static function fromArraysValue($array, $key)
    public static function fromReturn($callback, array $arguments = [], $noneValue = null)
    return new LazyOption(static function () use ($callback, $arguments, $noneValue) {
    public static function ensure($value, $noneValue = null)
    return new LazyOption(static function () use ($value, $noneValue) {
    * Lift a function so that it accepts Option as parameters.
    * parameters passed to the lifted function is empty, the function will
    public static function lift($callback, $noneValue = null)
    return static function () use ($callback, $noneValue) {
    static function ($status, self $o) {
    static function (self $o) {
    abstract public function get();
    abstract public function getOrElse($default);
    abstract public function getOrCall($callable);
    abstract public function getOrThrow(\Exception $ex);
    abstract public function isEmpty();
    abstract public function isDefined();
    abstract public function orElse(self $else);
    abstract public function ifDefined($callable);
    abstract public function forAll($callable);
    abstract public function map($callable);
    abstract public function flatMap($callable);
    abstract public function filter($callable);
    abstract public function filterNot($callable);
    abstract public function select($value);
    abstract public function reject($value);
    abstract public function foldLeft($initialValue, $callable);
    abstract public function foldRight($initialValue, $callable);
--------------------------------------------
Fichier : ./vendor/phpoption/phpoption/src/PhpOption/Some.php
    final class Some extends Option
    public function __construct($value)
    public static function create($value): self
    public function isDefined(): bool
    public function isEmpty(): bool
    public function get()
    public function getOrElse($default)
    public function getOrCall($callable)
    public function getOrThrow(\Exception $ex)
    public function orElse(Option $else)
    public function ifDefined($callable)
    public function forAll($callable)
    public function map($callable)
    public function flatMap($callable)
    public function filter($callable)
    public function filterNot($callable)
    public function select($value)
    public function reject($value)
    public function getIterator(): ArrayIterator
    public function foldLeft($initialValue, $callable)
    public function foldRight($initialValue, $callable)
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/build/scripts/extract-release-notes.php
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/CodeCoverage.php
    use function array_diff;
    use function array_diff_key;
    use function array_flip;
    use function array_keys;
    use function array_merge;
    use function array_unique;
    use function array_values;
    use function count;
    use function explode;
    use function get_class;
    use function is_array;
    use function sort;
    final class CodeCoverage
    public function __construct(Driver $driver, Filter $filter)
    public function getReport(): Directory
    public function clear(): void
    public function clearCache(): void
    public function filter(): Filter
    public function getData(bool $raw = false): ProcessedCodeCoverageData
    public function setData(ProcessedCodeCoverageData $data): void
    public function getTests(): array
    public function setTests(array $tests): void
    public function start($id, bool $clear = false): void
    public function stop(bool $append = true, $linesToBeCovered = [], array $linesToBeUsed = []): RawCodeCoverageData
    public function append(RawCodeCoverageData $rawData, $id = null, bool $append = true, $linesToBeCovered = [], array $linesToBeUsed = []): void
    public function merge(self $that): void
    public function enableCheckForUnintentionallyCoveredCode(): void
    public function disableCheckForUnintentionallyCoveredCode(): void
    public function includeUncoveredFiles(): void
    public function excludeUncoveredFiles(): void
    public function processUncoveredFiles(): void
    public function doNotProcessUncoveredFiles(): void
    public function enableAnnotationsForIgnoringCode(): void
    public function disableAnnotationsForIgnoringCode(): void
    public function ignoreDeprecatedCode(): void
    public function doNotIgnoreDeprecatedCode(): void
    public function cachesStaticAnalysis(): bool
    public function cacheStaticAnalysis(string $directory): void
    public function doNotCacheStaticAnalysis(): void
    public function cacheDirectory(): string
    public function excludeSubclassesOfThisClassFromUnintentionallyCoveredCodeCheck(string $className): void
    public function enableBranchAndPathCoverage(): void
    public function disableBranchAndPathCoverage(): void
    public function collectsBranchAndPathCoverage(): bool
    public function detectsDeadCode(): bool
    private function applyCoversAnnotationFilter(RawCodeCoverageData $rawData, $linesToBeCovered, array $linesToBeUsed): void
    private function applyFilter(RawCodeCoverageData $data): void
    private function applyExecutableLinesFilter(RawCodeCoverageData $data): void
    private function applyIgnoredLinesFilter(RawCodeCoverageData $data): void
    private function addUncoveredFilesFromFilter(): void
    private function processUncoveredFilesFromFilter(): void
    private function performUnintentionallyCoveredCodeCheck(RawCodeCoverageData $data, array $linesToBeCovered, array $linesToBeUsed): void
    private function getAllowedLines(array $linesToBeCovered, array $linesToBeUsed): array
    private function processUnintentionallyCoveredUnits(array $unintentionallyCoveredUnits): array
    $class = new ReflectionClass($unit[0]);
    private function analyser(): FileAnalyser
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Driver/Driver.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    abstract class Driver
    public static function forLineCoverage(Filter $filter): self
    public static function forLineAndPathCoverage(Filter $filter): self
    public function canCollectBranchAndPathCoverage(): bool
    public function collectsBranchAndPathCoverage(): bool
    public function enableBranchAndPathCoverage(): void
    public function disableBranchAndPathCoverage(): void
    public function canDetectDeadCode(): bool
    public function detectsDeadCode(): bool
    public function enableDeadCodeDetection(): void
    public function disableDeadCodeDetection(): void
    abstract public function nameAndVersion(): string;
    abstract public function start(): void;
    abstract public function stop(): RawCodeCoverageData;
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Driver/PcovDriver.php
    use function array_intersect;
    use function extension_loaded;
    use function pcov\clear;
    use function pcov\collect;
    use function pcov\start;
    use function pcov\stop;
    use function pcov\waiting;
    use function phpversion;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class PcovDriver extends Driver
    public function __construct(Filter $filter)
    public function start(): void
    public function stop(): RawCodeCoverageData
    public function nameAndVersion(): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Driver/PhpdbgDriver.php
    use function array_diff;
    use function array_keys;
    use function array_merge;
    use function get_included_files;
    use function phpdbg_end_oplog;
    use function phpdbg_get_executable;
    use function phpdbg_start_oplog;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class PhpdbgDriver extends Driver
    public function __construct()
    public function start(): void
    public function stop(): RawCodeCoverageData
    public function nameAndVersion(): string
    private function detectExecutedLines(array $sourceLines, array $dbgData): array
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Driver/Selector.php
    use function phpversion;
    use function version_compare;
    final class Selector
    public function forLineCoverage(Filter $filter): Driver
    public function forLineAndPathCoverage(Filter $filter): Driver
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Driver/Xdebug2Driver.php
    use function defined;
    use function extension_loaded;
    use function ini_get;
    use function phpversion;
    use function sprintf;
    use function version_compare;
    use function xdebug_get_code_coverage;
    use function xdebug_set_filter;
    use function xdebug_start_code_coverage;
    use function xdebug_stop_code_coverage;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Xdebug2Driver extends Driver
    public function __construct(Filter $filter)
    public function canCollectBranchAndPathCoverage(): bool
    public function canDetectDeadCode(): bool
    public function start(): void
    public function stop(): RawCodeCoverageData
    public function nameAndVersion(): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Driver/Xdebug3Driver.php
    use function explode;
    use function extension_loaded;
    use function getenv;
    use function in_array;
    use function ini_get;
    use function phpversion;
    use function sprintf;
    use function version_compare;
    use function xdebug_get_code_coverage;
    use function xdebug_set_filter;
    use function xdebug_start_code_coverage;
    use function xdebug_stop_code_coverage;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Xdebug3Driver extends Driver
    public function __construct(Filter $filter)
    public function canCollectBranchAndPathCoverage(): bool
    public function canDetectDeadCode(): bool
    public function start(): void
    public function stop(): RawCodeCoverageData
    public function nameAndVersion(): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/BranchAndPathCoverageNotSupportedException.php
    final class BranchAndPathCoverageNotSupportedException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/DeadCodeDetectionNotSupportedException.php
    final class DeadCodeDetectionNotSupportedException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/DirectoryCouldNotBeCreatedException.php
    final class DirectoryCouldNotBeCreatedException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/Exception.php
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/InvalidArgumentException.php
    final class InvalidArgumentException extends \InvalidArgumentException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/NoCodeCoverageDriverAvailableException.php
    final class NoCodeCoverageDriverAvailableException extends RuntimeException implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/NoCodeCoverageDriverWithPathCoverageSupportAvailableException.php
    final class NoCodeCoverageDriverWithPathCoverageSupportAvailableException extends RuntimeException implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/ParserException.php
    final class ParserException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/PathExistsButIsNotDirectoryException.php
    use function sprintf;
    final class PathExistsButIsNotDirectoryException extends RuntimeException implements Exception
    public function __construct(string $path)
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/PcovNotAvailableException.php
    final class PcovNotAvailableException extends RuntimeException implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/PhpdbgNotAvailableException.php
    final class PhpdbgNotAvailableException extends RuntimeException implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/ReflectionException.php
    final class ReflectionException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/ReportAlreadyFinalizedException.php
    final class ReportAlreadyFinalizedException extends RuntimeException implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/StaticAnalysisCacheNotConfiguredException.php
    final class StaticAnalysisCacheNotConfiguredException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/TestIdMissingException.php
    final class TestIdMissingException extends RuntimeException implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/UnintentionallyCoveredCodeException.php
    final class UnintentionallyCoveredCodeException extends RuntimeException implements Exception
    public function __construct(array $unintentionallyCoveredUnits)
    public function getUnintentionallyCoveredUnits(): array
    private function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/WriteOperationFailedException.php
    use function sprintf;
    final class WriteOperationFailedException extends RuntimeException implements Exception
    public function __construct(string $path)
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/WrongXdebugVersionException.php
    final class WrongXdebugVersionException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/Xdebug2NotEnabledException.php
    final class Xdebug2NotEnabledException extends RuntimeException implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/Xdebug3NotEnabledException.php
    final class Xdebug3NotEnabledException extends RuntimeException implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/XdebugNotAvailableException.php
    final class XdebugNotAvailableException extends RuntimeException implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Exception/XmlException.php
    final class XmlException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Filter.php
    use function array_keys;
    use function is_file;
    use function realpath;
    use function strpos;
    final class Filter
    public function includeDirectory(string $directory, string $suffix = '.php', string $prefix = ''): void
    public function includeFiles(array $filenames): void
    public function includeFile(string $filename): void
    public function excludeDirectory(string $directory, string $suffix = '.php', string $prefix = ''): void
    public function excludeFile(string $filename): void
    public function isFile(string $filename): bool
    public function isExcluded(string $filename): bool
    public function files(): array
    public function isEmpty(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Node/AbstractNode.php
    use function array_merge;
    use function str_replace;
    use function substr;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    abstract class AbstractNode implements Countable
    public function __construct(string $name, ?self $parent = null)
    public function name(): string
    public function id(): string
    public function pathAsString(): string
    public function pathAsArray(): array
    public function parent(): ?self
    public function percentageOfTestedClasses(): Percentage
    public function percentageOfTestedTraits(): Percentage
    public function percentageOfTestedClassesAndTraits(): Percentage
    public function percentageOfTestedFunctions(): Percentage
    public function percentageOfTestedMethods(): Percentage
    public function percentageOfTestedFunctionsAndMethods(): Percentage
    public function percentageOfExecutedLines(): Percentage
    public function percentageOfExecutedBranches(): Percentage
    public function percentageOfExecutedPaths(): Percentage
    public function numberOfClassesAndTraits(): int
    public function numberOfTestedClassesAndTraits(): int
    public function classesAndTraits(): array
    public function numberOfFunctionsAndMethods(): int
    public function numberOfTestedFunctionsAndMethods(): int
    abstract public function classes(): array;
    abstract public function traits(): array;
    abstract public function functions(): array;
    abstract public function linesOfCode(): array;
    abstract public function numberOfExecutableLines(): int;
    abstract public function numberOfExecutedLines(): int;
    abstract public function numberOfExecutableBranches(): int;
    abstract public function numberOfExecutedBranches(): int;
    abstract public function numberOfExecutablePaths(): int;
    abstract public function numberOfExecutedPaths(): int;
    abstract public function numberOfClasses(): int;
    abstract public function numberOfTestedClasses(): int;
    abstract public function numberOfTraits(): int;
    abstract public function numberOfTestedTraits(): int;
    abstract public function numberOfMethods(): int;
    abstract public function numberOfTestedMethods(): int;
    abstract public function numberOfFunctions(): int;
    abstract public function numberOfTestedFunctions(): int;
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Node/Builder.php
    use function array_shift;
    use function basename;
    use function count;
    use function dirname;
    use function explode;
    use function implode;
    use function is_file;
    use function str_replace;
    use function strpos;
    use function substr;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Builder
    public function __construct(FileAnalyser $analyser)
    public function build(CodeCoverage $coverage): Directory
    private function addItems(Directory $root, array $items, array $tests): void
    private function buildDirectoryStructure(ProcessedCodeCoverageData $data): array
    private function reducePaths(ProcessedCodeCoverageData $coverage): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Node/CrapIndex.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class CrapIndex
    public function __construct(int $cyclomaticComplexity, float $codeCoverage)
    public function asString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Node/Directory.php
    use function array_merge;
    use function count;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Directory extends AbstractNode implements IteratorAggregate
    public function count(): int
    public function getIterator(): RecursiveIteratorIterator
    public function addDirectory(string $name): self
    public function addFile(File $file): void
    public function directories(): array
    public function files(): array
    public function children(): array
    public function classes(): array
    public function traits(): array
    public function functions(): array
    public function linesOfCode(): array
    public function numberOfExecutableLines(): int
    public function numberOfExecutedLines(): int
    public function numberOfExecutableBranches(): int
    public function numberOfExecutedBranches(): int
    public function numberOfExecutablePaths(): int
    public function numberOfExecutedPaths(): int
    public function numberOfClasses(): int
    public function numberOfTestedClasses(): int
    public function numberOfTraits(): int
    public function numberOfTestedTraits(): int
    public function numberOfMethods(): int
    public function numberOfTestedMethods(): int
    public function numberOfFunctions(): int
    public function numberOfTestedFunctions(): int
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Node/File.php
    use function array_filter;
    use function count;
    use function range;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class File extends AbstractNode
    public function __construct(string $name, AbstractNode $parent, array $lineCoverageData, array $functionCoverageData, array $testData, array $classes, array $traits, array $functions, array $linesOfCode)
    public function count(): int
    public function lineCoverageData(): array
    public function functionCoverageData(): array
    public function testData(): array
    public function classes(): array
    public function traits(): array
    public function functions(): array
    public function linesOfCode(): array
    public function numberOfExecutableLines(): int
    public function numberOfExecutedLines(): int
    public function numberOfExecutableBranches(): int
    public function numberOfExecutedBranches(): int
    public function numberOfExecutablePaths(): int
    public function numberOfExecutedPaths(): int
    public function numberOfClasses(): int
    public function numberOfTestedClasses(): int
    public function numberOfTraits(): int
    public function numberOfTestedTraits(): int
    public function numberOfMethods(): int
    public function numberOfTestedMethods(): int
    public function numberOfFunctions(): int
    public function numberOfTestedFunctions(): int
    private function calculateStatistics(array $classes, array $traits, array $functions): void
    private function processClasses(array $classes): void
    private function processTraits(array $traits): void
    private function processFunctions(array $functions): void
    static function (array $branch)
    static function (array $path)
    private function newMethod(string $className, string $methodName, array $method, string $link): array
    static function (array $branch)
    static function (array $path)
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Node/Iterator.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Iterator implements RecursiveIterator
    public function __construct(Directory $node)
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): ?AbstractNode
    public function next(): void
    public function getChildren(): self
    public function hasChildren(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/ProcessedCodeCoverageData.php
    use function array_key_exists;
    use function array_keys;
    use function array_merge;
    use function array_unique;
    use function count;
    use function is_array;
    use function ksort;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class ProcessedCodeCoverageData
    public function initializeUnseenData(RawCodeCoverageData $rawData): void
    public function markCodeAsExecutedByTestCase(string $testCaseId, RawCodeCoverageData $executedCode): void
    public function setLineCoverage(array $lineCoverage): void
    public function lineCoverage(): array
    public function setFunctionCoverage(array $functionCoverage): void
    public function functionCoverage(): array
    public function coveredFiles(): array
    public function renameFile(string $oldFile, string $newFile): void
    public function merge(self $newData): void
    private function priorityForLine(array $data, int $line): int
    * For a function we have never seen before, copy all data over and simply init the 'hit' array.
    private function initPreviouslyUnseenFunction(string $file, string $functionName, array $functionData): void
    * For a function we have seen before, only copy over and init the 'hit' array for any unseen branches and paths.
    private function initPreviouslySeenFunction(string $file, string $functionName, array $functionData): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/RawCodeCoverageData.php
    use function array_diff;
    use function array_diff_key;
    use function array_flip;
    use function array_intersect;
    use function array_intersect_key;
    use function count;
    use function explode;
    use function file_get_contents;
    use function in_array;
    use function is_file;
    use function range;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class RawCodeCoverageData
    public static function fromXdebugWithoutPathCoverage(array $rawCoverage): self
    public static function fromXdebugWithPathCoverage(array $rawCoverage): self
    public static function fromXdebugWithMixedCoverage(array $rawCoverage): self
    public static function fromUncoveredFile(string $filename, FileAnalyser $analyser): self
    private function __construct(array $lineCoverage, array $functionCoverage)
    public function clear(): void
    public function lineCoverage(): array
    public function functionCoverage(): array
    public function removeCoverageDataForFile(string $filename): void
    public function keepLineCoverageDataOnlyForLines(string $filename, array $lines): void
    public function markExecutableLineByBranch(string $filename, array $linesToBranchMap): void
    public function keepFunctionCoverageDataOnlyForLines(string $filename, array $lines): void
    public function removeCoverageDataForLines(string $filename, array $lines): void
    * e.g. a class definition, that line cannot be invoked from a test and results in confusing coverage. This engine
    private function skipEmptyLines(): void
    private function getEmptyLinesForFile(string $filename): array
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Clover.php
    use function count;
    use function dirname;
    use function file_put_contents;
    use function is_string;
    use function ksort;
    use function max;
    use function range;
    use function strpos;
    use function time;
    final class Clover
    public function process(CodeCoverage $coverage, ?string $target = null, ?string $name = null): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Cobertura.php
    use function basename;
    use function count;
    use function dirname;
    use function file_put_contents;
    use function preg_match;
    use function range;
    use function str_replace;
    use function strpos;
    use function time;
    final class Cobertura
    public function process(CodeCoverage $coverage, ?string $target = null): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Crap4j.php
    use function date;
    use function dirname;
    use function file_put_contents;
    use function htmlspecialchars;
    use function is_string;
    use function round;
    use function strpos;
    final class Crap4j
    public function __construct(int $threshold = 30)
    public function process(CodeCoverage $coverage, ?string $target = null, ?string $name = null): string
    private function crapLoad(float $crapValue, int $cyclomaticComplexity, float $coveragePercent): float
    private function roundValue(float $value): float
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Html/Facade.php
    use function copy;
    use function date;
    use function dirname;
    use function substr;
    final class Facade
    public function __construct(int $lowUpperBound = 50, int $highLowerBound = 90, string $generator = '')
    public function process(CodeCoverage $coverage, string $target): void
    private function copyFiles(string $target): void
    private function directory(string $directory): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Dashboard.php
    use function array_values;
    use function arsort;
    use function asort;
    use function count;
    use function explode;
    use function floor;
    use function json_encode;
    use function sprintf;
    use function str_replace;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Dashboard extends Renderer
    public function render(DirectoryNode $node, string $file): void
    protected function activeBreadcrumb(AbstractNode $node): string
    private function complexity(array $classes, string $baseLink): array
    private function coverageDistribution(array $classes): array
    private function insufficientCoverage(array $classes, string $baseLink): array
    private function projectRisks(array $classes, string $baseLink): array
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/Directory.php
    use function count;
    use function sprintf;
    use function str_repeat;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Directory extends Renderer
    public function render(DirectoryNode $node, string $file): void
    private function renderItem(Node $node, bool $total = false): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Html/Renderer/File.php
    use function array_key_exists;
    use function array_keys;
    use function array_merge;
    use function array_pop;
    use function array_unique;
    use function constant;
    use function count;
    use function defined;
    use function explode;
    use function file_get_contents;
    use function htmlspecialchars;
    use function is_string;
    use function ksort;
    use function range;
    use function sort;
    use function sprintf;
    use function str_replace;
    use function substr;
    use function token_get_all;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class File extends Renderer
    public function render(FileNode $node, string $file): void
    private function renderItems(FileNode $node): string
    private function renderTraitOrClassItems(array $items, Template $template, Template $methodItemTemplate): string
    private function renderFunctionItems(array $functions, Template $template): string
    private function renderFunctionOrMethodItem(Template $template, array $item, string $indent = ''): string
    private function renderSourceWithLineCoverage(FileNode $node): string
    private function renderSourceWithBranchCoverage(FileNode $node): string
    private function renderSourceWithPathCoverage(FileNode $node): string
    private function renderBranchStructure(FileNode $node): string
    private function renderBranchLines(array $branch, array $codeLines, array $testData): string
    private function renderPathStructure(FileNode $node): string
    private function renderPathLines(array $path, array $branches, array $codeLines, array $testData): string
    private function renderLine(Template $template, int $lineNumber, string $lineContent, string $class, string $popover): string
    private function loadFile(string $file): array
    private function abbreviateClassName(string $className): string
    private function abbreviateMethodName(string $methodName): string
    private function createPopoverContentForTest(string $test, array $testData): string
    private function isComment(int $token): bool
    private function isInlineHtml(int $token): bool
    private function isKeyword(int $token): bool
    private static function keywordTokens(): array
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Html/Renderer.php
    use function array_pop;
    use function count;
    use function sprintf;
    use function str_repeat;
    use function substr_count;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    abstract class Renderer
    public function __construct(string $templatePath, string $generator, string $date, int $lowUpperBound, int $highLowerBound, bool $hasBranchCoverage)
    protected function renderItemTemplate(Template $template, array $data): string
    protected function setCommonTemplateVariables(Template $template, AbstractNode $node): void
    protected function breadcrumbs(AbstractNode $node): string
    protected function activeBreadcrumb(AbstractNode $node): string
    protected function inactiveBreadcrumb(AbstractNode $node, string $pathToRoot): string
    protected function pathToRoot(AbstractNode $node): string
    protected function coverageBar(float $percent): string
    protected function colorLevel(float $percent): string
    private function runtimeString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/PHP.php
    use function dirname;
    use function file_put_contents;
    use function serialize;
    use function strpos;
    final class PHP
    public function process(CodeCoverage $coverage, ?string $target = null): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Text.php
    use function array_map;
    use function date;
    use function ksort;
    use function max;
    use function sprintf;
    use function str_pad;
    use function strlen;
    final class Text
    public function __construct(int $lowUpperBound = 50, int $highLowerBound = 90, bool $showUncoveredFiles = false, bool $showOnlySummary = false)
    public function process(CodeCoverage $coverage, bool $showColors = false): string
    private function coverageColor(int $numberOfCoveredElements, int $totalNumberOfElements): string
    private function printCoverageCounts(int $numberOfCoveredElements, int $totalNumberOfElements, int $precision): string
    private function format(string $color, int $padding, $string): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/BuildInformation.php
    use function constant;
    use function phpversion;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class BuildInformation
    public function __construct(DOMElement $contextNode)
    public function setRuntimeInformation(Runtime $runtime): void
    public function setBuildTime(DateTimeImmutable $date): void
    public function setGeneratorVersions(string $phpUnitVersion, string $coverageVersion): void
    private function nodeByName(string $name): DOMElement
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/Coverage.php
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Coverage
    public function __construct(DOMElement $context, string $line)
    public function addTest(string $test): void
    public function finalize(): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/Directory.php
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Directory extends Node
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/Facade.php
    use function count;
    use function dirname;
    use function file_get_contents;
    use function file_put_contents;
    use function is_array;
    use function is_dir;
    use function is_file;
    use function is_writable;
    use function libxml_clear_errors;
    use function libxml_get_errors;
    use function libxml_use_internal_errors;
    use function sprintf;
    use function strlen;
    use function substr;
    final class Facade
    public function __construct(string $version)
    public function process(CodeCoverage $coverage, string $target): void
    private function setBuildInformation(): void
    private function initTargetDirectory(string $directory): void
    private function processDirectory(DirectoryNode $directory, Node $context): void
    private function processFile(FileNode $file, Directory $context): void
    private function processUnit(array $unit, Report $report): void
    private function processFunction(array $function, Report $report): void
    private function processTests(array $tests): void
    private function setTotals(AbstractNode $node, Totals $totals): void
    private function targetDirectory(): string
    private function saveDocument(DOMDocument $document, string $name): void
    private function documentAsString(DOMDocument $document): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/File.php
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    class File
    public function __construct(DOMElement $context)
    public function totals(): Totals
    public function lineCoverage(string $line): Coverage
    protected function contextNode(): DOMElement
    protected function dom(): DOMDocument
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/Method.php
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Method
    public function __construct(DOMElement $context, string $name)
    public function setSignature(string $signature): void
    public function setLines(string $start, ?string $end = null): void
    public function setTotals(string $executable, string $executed, string $coverage): void
    public function setCrap(string $crap): void
    private function setName(string $name): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/Node.php
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    abstract class Node
    public function __construct(DOMElement $context)
    public function dom(): DOMDocument
    public function totals(): Totals
    public function addDirectory(string $name): Directory
    public function addFile(string $name, string $href): File
    protected function setContextNode(DOMElement $context): void
    protected function contextNode(): DOMElement
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/Project.php
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Project extends Node
    public function __construct(string $directory)
    public function projectSourceDirectory(): string
    public function buildInformation(): BuildInformation
    public function tests(): Tests
    public function asDom(): DOMDocument
    private function init(): void
    private function setProjectSourceDirectory(string $name): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/Report.php
    use function basename;
    use function dirname;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Report extends File
    public function __construct(string $name)
    public function asDom(): DOMDocument
    public function functionObject($name): Method
    public function classObject($name): Unit
    public function traitObject($name): Unit
    public function source(): Source
    private function setName(string $name): void
    private function unitObject(string $tagName, $name): Unit
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/Source.php
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Source
    public function __construct(DOMElement $context)
    public function setSourceCode(string $source): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/Tests.php
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Tests
    public function __construct(DOMElement $context)
    public function addTest(string $test, array $result): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/Totals.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Totals
    public function __construct(DOMElement $container)
    public function container(): DOMNode
    public function setNumLines(int $loc, int $cloc, int $ncloc, int $executable, int $executed): void
    public function setNumClasses(int $count, int $tested): void
    public function setNumTraits(int $count, int $tested): void
    public function setNumMethods(int $count, int $tested): void
    public function setNumFunctions(int $count, int $tested): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Report/Xml/Unit.php
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Unit
    public function __construct(DOMElement $context, string $name)
    public function setLines(int $start, int $executable, int $executed): void
    public function setCrap(float $crap): void
    public function setNamespace(string $namespace): void
    public function addMethod(string $name): Method
    private function setName(string $name): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/StaticAnalysis/CacheWarmer.php
    final class CacheWarmer
    public function warmCache(string $cacheDirectory, bool $useAnnotationsForIgnoringCode, bool $ignoreDeprecatedCode, Filter $filter): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/StaticAnalysis/CachingFileAnalyser.php
    use function file_get_contents;
    use function file_put_contents;
    use function implode;
    use function is_file;
    use function md5;
    use function serialize;
    use function unserialize;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class CachingFileAnalyser implements FileAnalyser
    public function __construct(string $directory, FileAnalyser $analyser, bool $useAnnotationsForIgnoringCode, bool $ignoreDeprecatedCode)
    public function classesIn(string $filename): array
    public function traitsIn(string $filename): array
    public function functionsIn(string $filename): array
    public function linesOfCodeFor(string $filename): array
    public function executableLinesIn(string $filename): array
    public function ignoredLinesFor(string $filename): array
    public function process(string $filename): void
    private function read(string $filename)
    private function write(string $filename, $data): void
    private function cacheFile(string $filename): string
    private static function cacheVersion(): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/StaticAnalysis/CodeUnitFindingVisitor.php
    use function assert;
    use function implode;
    use function rtrim;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class CodeUnitFindingVisitor extends NodeVisitorAbstract
    public function enterNode(Node $node): void
    public function classes(): array
    public function traits(): array
    public function functions(): array
    private function cyclomaticComplexity(Node $node): int
    private function signature(Node $node): string
    private function type(Node $type): string
    private function visibility(ClassMethod $node): string
    private function processClass(Class_ $node): void
    private function processTrait(Trait_ $node): void
    private function processMethod(ClassMethod $node): void
    private function processFunction(Function_ $node): void
    private function namespace(string $namespacedName, string $name): string
    private function unionTypeAsString(UnionType $node): string
    private function intersectionTypeAsString(IntersectionType $node): string
    private function typeAsString(NodeAbstract $node): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/StaticAnalysis/ExecutableLinesFindingVisitor.php
    use function array_diff_key;
    use function assert;
    use function count;
    use function current;
    use function end;
    use function explode;
    use function max;
    use function preg_match;
    use function preg_quote;
    use function range;
    use function reset;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class ExecutableLinesFindingVisitor extends NodeVisitorAbstract
    public function __construct(string $source)
    public function enterNode(Node $node): void
    public function afterTraverse(array $nodes): void
    public function executableLinesGroupedByBranch(): array
    private function setLineBranch(int $start, int $end, int $branch): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/StaticAnalysis/FileAnalyser.php
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    public function classesIn(string $filename): array;
    public function traitsIn(string $filename): array;
    public function functionsIn(string $filename): array;
    public function linesOfCodeFor(string $filename): array;
    public function executableLinesIn(string $filename): array;
    public function ignoredLinesFor(string $filename): array;
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/StaticAnalysis/IgnoredLinesFindingVisitor.php
    use function array_merge;
    use function assert;
    use function range;
    use function strpos;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class IgnoredLinesFindingVisitor extends NodeVisitorAbstract
    public function __construct(bool $useAnnotationsForIgnoringCode, bool $ignoreDeprecated)
    public function enterNode(Node $node): void
    public function ignoredLines(): array
    private function processDocComment(Node $node): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/StaticAnalysis/ParsingFileAnalyser.php
    use function array_merge;
    use function array_unique;
    use function assert;
    use function file_get_contents;
    use function is_array;
    use function max;
    use function range;
    use function sort;
    use function sprintf;
    use function substr_count;
    use function token_get_all;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class ParsingFileAnalyser implements FileAnalyser
    public function __construct(bool $useAnnotationsForIgnoringCode, bool $ignoreDeprecatedCode)
    public function classesIn(string $filename): array
    public function traitsIn(string $filename): array
    public function functionsIn(string $filename): array
    public function linesOfCodeFor(string $filename): array
    public function executableLinesIn(string $filename): array
    public function ignoredLinesFor(string $filename): array
    private function analyse(string $filename): void
    private function findLinesIgnoredByLineBasedAnnotations(string $filename, string $source, bool $useAnnotationsForIgnoringCode): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Util/Filesystem.php
    use function is_dir;
    use function mkdir;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Filesystem
    public static function createDirectory(string $directory): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Util/Percentage.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for phpunit/php-code-coverage
    final class Percentage
    public static function fromFractionAndTotal(float $fraction, float $total): self
    private function __construct(float $fraction, float $total)
    public function asFloat(): float
    public function asString(): string
    public function asFixedWidthString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-code-coverage/src/Version.php
    use function dirname;
    final class Version
    public static function id(): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-file-iterator/src/Facade.php
    use function array_unique;
    use function count;
    use function dirname;
    use function explode;
    use function is_file;
    use function is_string;
    use function realpath;
    use function sort;
    class Facade
    public function getFilesAsArray($paths, $suffixes = '', $prefixes = '', array $exclude = [], bool $commonPath = false): array
    protected function getCommonPath(array $files): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-file-iterator/src/Factory.php
    use function array_filter;
    use function array_map;
    use function array_merge;
    use function glob;
    use function is_dir;
    use function is_string;
    use function realpath;
    class Factory
    public function getFileIterator($paths, $suffixes = '', $prefixes = '', array $exclude = []): AppendIterator
    protected function getPathsAfterResolvingWildcards(array $paths): array
--------------------------------------------
Fichier : ./vendor/phpunit/php-file-iterator/src/Iterator.php
    use function array_filter;
    use function array_map;
    use function preg_match;
    use function realpath;
    use function str_replace;
    use function strlen;
    use function strpos;
    use function substr;
    class Iterator extends FilterIterator
    public function __construct(string $basePath, \Iterator $iterator, array $suffixes = [], array $prefixes = [], array $exclude = [])
    public function accept(): bool
    private function acceptPath(string $path): bool
    private function acceptPrefix(string $filename): bool
    private function acceptSuffix(string $filename): bool
    private function acceptSubString(string $filename, array $subStrings, int $type): bool
--------------------------------------------
Fichier : ./vendor/phpunit/php-invoker/src/exceptions/Exception.php
--------------------------------------------
Fichier : ./vendor/phpunit/php-invoker/src/exceptions/ProcessControlExtensionNotLoadedException.php
    final class ProcessControlExtensionNotLoadedException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-invoker/src/exceptions/TimeoutException.php
    final class TimeoutException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-invoker/src/Invoker.php
    use function call_user_func_array;
    use function function_exists;
    use function pcntl_alarm;
    use function pcntl_async_signals;
    use function pcntl_signal;
    use function sprintf;
    final class Invoker
    public function invoke(callable $callable, array $arguments, int $timeout)
    function (): void {
    public function canInvokeWithTimeout(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/php-text-template/src/exceptions/Exception.php
--------------------------------------------
Fichier : ./vendor/phpunit/php-text-template/src/exceptions/InvalidArgumentException.php
    final class InvalidArgumentException extends \InvalidArgumentException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-text-template/src/exceptions/RuntimeException.php
    final class RuntimeException extends InvalidArgumentException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-text-template/src/Template.php
    use function array_merge;
    use function file_exists;
    use function file_get_contents;
    use function file_put_contents;
    use function sprintf;
    use function str_replace;
    final class Template
    public function __construct(string $file = '', string $openDelimiter = '{', string $closeDelimiter = '}')
    public function setFile(string $file): void
    public function setVar(array $values, bool $merge = true): void
    public function render(): string
    public function renderTo(string $target): void
--------------------------------------------
Fichier : ./vendor/phpunit/php-timer/src/Duration.php
    use function floor;
    use function sprintf;
    final class Duration
    public static function fromMicroseconds(float $microseconds): self
    public static function fromNanoseconds(float $nanoseconds): self
    private function __construct(float $nanoseconds)
    public function asNanoseconds(): float
    public function asMicroseconds(): float
    public function asMilliseconds(): float
    public function asSeconds(): float
    public function asString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-timer/src/exceptions/Exception.php
--------------------------------------------
Fichier : ./vendor/phpunit/php-timer/src/exceptions/NoActiveTimerException.php
    final class NoActiveTimerException extends LogicException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-timer/src/exceptions/TimeSinceStartOfRequestNotAvailableException.php
    final class TimeSinceStartOfRequestNotAvailableException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/php-timer/src/ResourceUsageFormatter.php
    use function is_float;
    use function memory_get_peak_usage;
    use function microtime;
    use function sprintf;
    final class ResourceUsageFormatter
    public function resourceUsage(Duration $duration): string
    public function resourceUsageSinceStartOfRequest(): string
    private function bytesToString(int $bytes): string
--------------------------------------------
Fichier : ./vendor/phpunit/php-timer/src/Timer.php
    use function array_pop;
    use function hrtime;
    final class Timer
    public function start(): void
    public function stop(): Duration
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Exception.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Assert/Functions.php
    use function func_get_args;
    use function function_exists;
    function assertArrayHasKey($key, $array, string $message = ''): void
    function assertArrayNotHasKey($key, $array, string $message = ''): void
    function assertContains($needle, iterable $haystack, string $message = ''): void
    function assertContainsEquals($needle, iterable $haystack, string $message = ''): void
    function assertNotContains($needle, iterable $haystack, string $message = ''): void
    function assertNotContainsEquals($needle, iterable $haystack, string $message = ''): void
    function assertContainsOnly(string $type, iterable $haystack, ?bool $isNativeType = null, string $message = ''): void
    * Asserts that a haystack contains only instances of a given class name.
    function assertContainsOnlyInstancesOf(string $className, iterable $haystack, string $message = ''): void
    function assertNotContainsOnly(string $type, iterable $haystack, ?bool $isNativeType = null, string $message = ''): void
    function assertCount(int $expectedCount, $haystack, string $message = ''): void
    function assertNotCount(int $expectedCount, $haystack, string $message = ''): void
    function assertEquals($expected, $actual, string $message = ''): void
    function assertEqualsCanonicalizing($expected, $actual, string $message = ''): void
    function assertEqualsIgnoringCase($expected, $actual, string $message = ''): void
    function assertEqualsWithDelta($expected, $actual, float $delta, string $message = ''): void
    function assertNotEquals($expected, $actual, string $message = ''): void
    function assertNotEqualsCanonicalizing($expected, $actual, string $message = ''): void
    function assertNotEqualsIgnoringCase($expected, $actual, string $message = ''): void
    function assertNotEqualsWithDelta($expected, $actual, float $delta, string $message = ''): void
    function assertObjectEquals(object $expected, object $actual, string $method = 'equals', string $message = ''): void
    function assertEmpty($actual, string $message = ''): void
    function assertNotEmpty($actual, string $message = ''): void
    function assertGreaterThan($expected, $actual, string $message = ''): void
    function assertGreaterThanOrEqual($expected, $actual, string $message = ''): void
    function assertLessThan($expected, $actual, string $message = ''): void
    function assertLessThanOrEqual($expected, $actual, string $message = ''): void
    function assertFileEquals(string $expected, string $actual, string $message = ''): void
    function assertFileEqualsCanonicalizing(string $expected, string $actual, string $message = ''): void
    function assertFileEqualsIgnoringCase(string $expected, string $actual, string $message = ''): void
    function assertFileNotEquals(string $expected, string $actual, string $message = ''): void
    function assertFileNotEqualsCanonicalizing(string $expected, string $actual, string $message = ''): void
    function assertFileNotEqualsIgnoringCase(string $expected, string $actual, string $message = ''): void
    function assertStringEqualsFile(string $expectedFile, string $actualString, string $message = ''): void
    function assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString, string $message = ''): void
    function assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString, string $message = ''): void
    function assertStringNotEqualsFile(string $expectedFile, string $actualString, string $message = ''): void
    function assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString, string $message = ''): void
    function assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString, string $message = ''): void
    function assertIsReadable(string $filename, string $message = ''): void
    function assertIsNotReadable(string $filename, string $message = ''): void
    function assertNotIsReadable(string $filename, string $message = ''): void
    function assertIsWritable(string $filename, string $message = ''): void
    function assertIsNotWritable(string $filename, string $message = ''): void
    function assertNotIsWritable(string $filename, string $message = ''): void
    function assertDirectoryExists(string $directory, string $message = ''): void
    function assertDirectoryDoesNotExist(string $directory, string $message = ''): void
    function assertDirectoryNotExists(string $directory, string $message = ''): void
    function assertDirectoryIsReadable(string $directory, string $message = ''): void
    function assertDirectoryIsNotReadable(string $directory, string $message = ''): void
    function assertDirectoryNotIsReadable(string $directory, string $message = ''): void
    function assertDirectoryIsWritable(string $directory, string $message = ''): void
    function assertDirectoryIsNotWritable(string $directory, string $message = ''): void
    function assertDirectoryNotIsWritable(string $directory, string $message = ''): void
    function assertFileExists(string $filename, string $message = ''): void
    function assertFileDoesNotExist(string $filename, string $message = ''): void
    function assertFileNotExists(string $filename, string $message = ''): void
    function assertFileIsReadable(string $file, string $message = ''): void
    function assertFileIsNotReadable(string $file, string $message = ''): void
    function assertFileNotIsReadable(string $file, string $message = ''): void
    function assertFileIsWritable(string $file, string $message = ''): void
    function assertFileIsNotWritable(string $file, string $message = ''): void
    function assertFileNotIsWritable(string $file, string $message = ''): void
    function assertTrue($condition, string $message = ''): void
    function assertNotTrue($condition, string $message = ''): void
    function assertFalse($condition, string $message = ''): void
    function assertNotFalse($condition, string $message = ''): void
    function assertNull($actual, string $message = ''): void
    function assertNotNull($actual, string $message = ''): void
    function assertFinite($actual, string $message = ''): void
    function assertInfinite($actual, string $message = ''): void
    function assertNan($actual, string $message = ''): void
    * Asserts that a class has a specified attribute.
    function assertClassHasAttribute(string $attributeName, string $className, string $message = ''): void
    * Asserts that a class does not have a specified attribute.
    function assertClassNotHasAttribute(string $attributeName, string $className, string $message = ''): void
    * Asserts that a class has a specified static attribute.
    function assertClassHasStaticAttribute(string $attributeName, string $className, string $message = ''): void
    * Asserts that a class does not have a specified static attribute.
    function assertClassNotHasStaticAttribute(string $attributeName, string $className, string $message = ''): void
    function assertObjectHasAttribute(string $attributeName, $object, string $message = ''): void
    function assertObjectNotHasAttribute(string $attributeName, $object, string $message = ''): void
    function assertObjectHasProperty(string $attributeName, object $object, string $message = ''): void
    function assertObjectNotHasProperty(string $attributeName, object $object, string $message = ''): void
    function assertSame($expected, $actual, string $message = ''): void
    function assertNotSame($expected, $actual, string $message = ''): void
    function assertInstanceOf(string $expected, $actual, string $message = ''): void
    function assertNotInstanceOf(string $expected, $actual, string $message = ''): void
    function assertIsArray($actual, string $message = ''): void
    function assertIsBool($actual, string $message = ''): void
    function assertIsFloat($actual, string $message = ''): void
    function assertIsInt($actual, string $message = ''): void
    function assertIsNumeric($actual, string $message = ''): void
    function assertIsObject($actual, string $message = ''): void
    function assertIsResource($actual, string $message = ''): void
    function assertIsClosedResource($actual, string $message = ''): void
    function assertIsString($actual, string $message = ''): void
    function assertIsScalar($actual, string $message = ''): void
    function assertIsCallable($actual, string $message = ''): void
    function assertIsIterable($actual, string $message = ''): void
    function assertIsNotArray($actual, string $message = ''): void
    function assertIsNotBool($actual, string $message = ''): void
    function assertIsNotFloat($actual, string $message = ''): void
    function assertIsNotInt($actual, string $message = ''): void
    function assertIsNotNumeric($actual, string $message = ''): void
    function assertIsNotObject($actual, string $message = ''): void
    function assertIsNotResource($actual, string $message = ''): void
    function assertIsNotClosedResource($actual, string $message = ''): void
    function assertIsNotString($actual, string $message = ''): void
    function assertIsNotScalar($actual, string $message = ''): void
    function assertIsNotCallable($actual, string $message = ''): void
    function assertIsNotIterable($actual, string $message = ''): void
    function assertMatchesRegularExpression(string $pattern, string $string, string $message = ''): void
    function assertRegExp(string $pattern, string $string, string $message = ''): void
    function assertDoesNotMatchRegularExpression(string $pattern, string $string, string $message = ''): void
    function assertNotRegExp(string $pattern, string $string, string $message = ''): void
    function assertSameSize($expected, $actual, string $message = ''): void
    function assertNotSameSize($expected, $actual, string $message = ''): void
    function assertStringMatchesFormat(string $format, string $string, string $message = ''): void
    function assertStringNotMatchesFormat(string $format, string $string, string $message = ''): void
    function assertStringMatchesFormatFile(string $formatFile, string $string, string $message = ''): void
    function assertStringNotMatchesFormatFile(string $formatFile, string $string, string $message = ''): void
    function assertStringStartsWith(string $prefix, string $string, string $message = ''): void
    function assertStringStartsNotWith($prefix, $string, string $message = ''): void
    function assertStringContainsString(string $needle, string $haystack, string $message = ''): void
    function assertStringContainsStringIgnoringCase(string $needle, string $haystack, string $message = ''): void
    function assertStringNotContainsString(string $needle, string $haystack, string $message = ''): void
    function assertStringNotContainsStringIgnoringCase(string $needle, string $haystack, string $message = ''): void
    function assertStringEndsWith(string $suffix, string $string, string $message = ''): void
    function assertStringEndsNotWith(string $suffix, string $string, string $message = ''): void
    function assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile, string $message = ''): void
    function assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile, string $message = ''): void
    function assertXmlStringEqualsXmlFile(string $expectedFile, $actualXml, string $message = ''): void
    function assertXmlStringNotEqualsXmlFile(string $expectedFile, $actualXml, string $message = ''): void
    function assertXmlStringEqualsXmlString($expectedXml, $actualXml, string $message = ''): void
    function assertXmlStringNotEqualsXmlString($expectedXml, $actualXml, string $message = ''): void
    function assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement, bool $checkAttributes = false, string $message = ''): void
    function assertThat($value, Constraint $constraint, string $message = ''): void
    function assertJson(string $actualJson, string $message = ''): void
    function assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson, string $message = ''): void
    function assertJsonStringNotEqualsJsonString($expectedJson, $actualJson, string $message = ''): void
    function assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson, string $message = ''): void
    function assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson, string $message = ''): void
    function assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile, string $message = ''): void
    function assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile, string $message = ''): void
    function logicalAnd(): LogicalAnd
    function logicalOr(): LogicalOr
    function logicalNot(Constraint $constraint): LogicalNot
    function logicalXor(): LogicalXor
    function anything(): IsAnything
    function isTrue(): IsTrue
    function callback(callable $callback): Callback
    function isFalse(): IsFalse
    function isJson(): IsJson
    function isNull(): IsNull
    function isFinite(): IsFinite
    function isInfinite(): IsInfinite
    function isNan(): IsNan
    function containsEqual($value): TraversableContainsEqual
    function containsIdentical($value): TraversableContainsIdentical
    function containsOnly(string $type): TraversableContainsOnly
    function containsOnlyInstancesOf(string $className): TraversableContainsOnly
    function arrayHasKey($key): ArrayHasKey
    function equalTo($value): IsEqual
    function equalToCanonicalizing($value): IsEqualCanonicalizing
    function equalToIgnoringCase($value): IsEqualIgnoringCase
    function equalToWithDelta($value, float $delta): IsEqualWithDelta
    function isEmpty(): IsEmpty
    function isWritable(): IsWritable
    function isReadable(): IsReadable
    function directoryExists(): DirectoryExists
    function fileExists(): FileExists
    function greaterThan($value): GreaterThan
    function greaterThanOrEqual($value): LogicalOr
    function classHasAttribute(string $attributeName): ClassHasAttribute
    function classHasStaticAttribute(string $attributeName): ClassHasStaticAttribute
    function objectHasAttribute($attributeName): ObjectHasAttribute
    function identicalTo($value): IsIdentical
    function isInstanceOf(string $className): IsInstanceOf
    function isType(string $type): IsType
    function lessThan($value): LessThan
    function lessThanOrEqual($value): LogicalOr
    function matchesRegularExpression(string $pattern): RegularExpression
    function matches(string $string): StringMatchesFormatDescription
    function stringStartsWith($prefix): StringStartsWith
    function stringContains(string $string, bool $case = true): StringContains
    function stringEndsWith(string $suffix): StringEndsWith
    function countOf(int $count): Count
    function objectEquals(object $object, string $method = 'equals'): ObjectEquals
    function any(): AnyInvokedCountMatcher
    function never(): InvokedCountMatcher
    function atLeast(int $requiredInvocations): InvokedAtLeastCountMatcher
    function atLeastOnce(): InvokedAtLeastOnceMatcher
    function once(): InvokedCountMatcher
    function exactly(int $count): InvokedCountMatcher
    function atMost(int $allowedInvocations): InvokedAtMostCountMatcher
    function at(int $index): InvokedAtIndexMatcher
    function returnValue($value): ReturnStub
    function returnValueMap(array $valueMap): ReturnValueMapStub
    function returnArgument(int $argumentIndex): ReturnArgumentStub
    function returnCallback($callback): ReturnCallbackStub
    function returnSelf(): ReturnSelfStub
    function throwException(Throwable $exception): ExceptionStub
    function onConsecutiveCalls(): ConsecutiveCallsStub
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Assert.php
    use function array_shift;
    use function array_unshift;
    use function assert;
    use function class_exists;
    use function count;
    use function debug_backtrace;
    use function explode;
    use function file_get_contents;
    use function func_get_args;
    use function implode;
    use function interface_exists;
    use function is_array;
    use function is_bool;
    use function is_int;
    use function is_iterable;
    use function is_object;
    use function is_string;
    use function preg_match;
    use function preg_split;
    use function sprintf;
    use function strpos;
    abstract class Assert
    public static function assertArrayHasKey($key, $array, string $message = ''): void
    public static function assertArrayNotHasKey($key, $array, string $message = ''): void
    public static function assertContains($needle, iterable $haystack, string $message = ''): void
    public static function assertContainsEquals($needle, iterable $haystack, string $message = ''): void
    public static function assertNotContains($needle, iterable $haystack, string $message = ''): void
    public static function assertNotContainsEquals($needle, iterable $haystack, string $message = ''): void
    public static function assertContainsOnly(string $type, iterable $haystack, ?bool $isNativeType = null, string $message = ''): void
    * Asserts that a haystack contains only instances of a given class name.
    public static function assertContainsOnlyInstancesOf(string $className, iterable $haystack, string $message = ''): void
    public static function assertNotContainsOnly(string $type, iterable $haystack, ?bool $isNativeType = null, string $message = ''): void
    public static function assertCount(int $expectedCount, $haystack, string $message = ''): void
    public static function assertNotCount(int $expectedCount, $haystack, string $message = ''): void
    public static function assertEquals($expected, $actual, string $message = ''): void
    public static function assertEqualsCanonicalizing($expected, $actual, string $message = ''): void
    public static function assertEqualsIgnoringCase($expected, $actual, string $message = ''): void
    public static function assertEqualsWithDelta($expected, $actual, float $delta, string $message = ''): void
    public static function assertNotEquals($expected, $actual, string $message = ''): void
    public static function assertNotEqualsCanonicalizing($expected, $actual, string $message = ''): void
    public static function assertNotEqualsIgnoringCase($expected, $actual, string $message = ''): void
    public static function assertNotEqualsWithDelta($expected, $actual, float $delta, string $message = ''): void
    public static function assertObjectEquals(object $expected, object $actual, string $method = 'equals', string $message = ''): void
    public static function assertEmpty($actual, string $message = ''): void
    public static function assertNotEmpty($actual, string $message = ''): void
    public static function assertGreaterThan($expected, $actual, string $message = ''): void
    public static function assertGreaterThanOrEqual($expected, $actual, string $message = ''): void
    public static function assertLessThan($expected, $actual, string $message = ''): void
    public static function assertLessThanOrEqual($expected, $actual, string $message = ''): void
    public static function assertFileEquals(string $expected, string $actual, string $message = ''): void
    public static function assertFileEqualsCanonicalizing(string $expected, string $actual, string $message = ''): void
    public static function assertFileEqualsIgnoringCase(string $expected, string $actual, string $message = ''): void
    public static function assertFileNotEquals(string $expected, string $actual, string $message = ''): void
    public static function assertFileNotEqualsCanonicalizing(string $expected, string $actual, string $message = ''): void
    public static function assertFileNotEqualsIgnoringCase(string $expected, string $actual, string $message = ''): void
    public static function assertStringEqualsFile(string $expectedFile, string $actualString, string $message = ''): void
    public static function assertStringEqualsFileCanonicalizing(string $expectedFile, string $actualString, string $message = ''): void
    public static function assertStringEqualsFileIgnoringCase(string $expectedFile, string $actualString, string $message = ''): void
    public static function assertStringNotEqualsFile(string $expectedFile, string $actualString, string $message = ''): void
    public static function assertStringNotEqualsFileCanonicalizing(string $expectedFile, string $actualString, string $message = ''): void
    public static function assertStringNotEqualsFileIgnoringCase(string $expectedFile, string $actualString, string $message = ''): void
    public static function assertIsReadable(string $filename, string $message = ''): void
    public static function assertIsNotReadable(string $filename, string $message = ''): void
    public static function assertNotIsReadable(string $filename, string $message = ''): void
    public static function assertIsWritable(string $filename, string $message = ''): void
    public static function assertIsNotWritable(string $filename, string $message = ''): void
    public static function assertNotIsWritable(string $filename, string $message = ''): void
    public static function assertDirectoryExists(string $directory, string $message = ''): void
    public static function assertDirectoryDoesNotExist(string $directory, string $message = ''): void
    public static function assertDirectoryNotExists(string $directory, string $message = ''): void
    public static function assertDirectoryIsReadable(string $directory, string $message = ''): void
    public static function assertDirectoryIsNotReadable(string $directory, string $message = ''): void
    public static function assertDirectoryNotIsReadable(string $directory, string $message = ''): void
    public static function assertDirectoryIsWritable(string $directory, string $message = ''): void
    public static function assertDirectoryIsNotWritable(string $directory, string $message = ''): void
    public static function assertDirectoryNotIsWritable(string $directory, string $message = ''): void
    public static function assertFileExists(string $filename, string $message = ''): void
    public static function assertFileDoesNotExist(string $filename, string $message = ''): void
    public static function assertFileNotExists(string $filename, string $message = ''): void
    public static function assertFileIsReadable(string $file, string $message = ''): void
    public static function assertFileIsNotReadable(string $file, string $message = ''): void
    public static function assertFileNotIsReadable(string $file, string $message = ''): void
    public static function assertFileIsWritable(string $file, string $message = ''): void
    public static function assertFileIsNotWritable(string $file, string $message = ''): void
    public static function assertFileNotIsWritable(string $file, string $message = ''): void
    public static function assertTrue($condition, string $message = ''): void
    public static function assertNotTrue($condition, string $message = ''): void
    public static function assertFalse($condition, string $message = ''): void
    public static function assertNotFalse($condition, string $message = ''): void
    public static function assertNull($actual, string $message = ''): void
    public static function assertNotNull($actual, string $message = ''): void
    public static function assertFinite($actual, string $message = ''): void
    public static function assertInfinite($actual, string $message = ''): void
    public static function assertNan($actual, string $message = ''): void
    * Asserts that a class has a specified attribute.
    public static function assertClassHasAttribute(string $attributeName, string $className, string $message = ''): void
    throw InvalidArgumentException::create(2, 'class name');
    * Asserts that a class does not have a specified attribute.
    public static function assertClassNotHasAttribute(string $attributeName, string $className, string $message = ''): void
    throw InvalidArgumentException::create(2, 'class name');
    * Asserts that a class has a specified static attribute.
    public static function assertClassHasStaticAttribute(string $attributeName, string $className, string $message = ''): void
    throw InvalidArgumentException::create(2, 'class name');
    * Asserts that a class does not have a specified static attribute.
    public static function assertClassNotHasStaticAttribute(string $attributeName, string $className, string $message = ''): void
    throw InvalidArgumentException::create(2, 'class name');
    public static function assertObjectHasAttribute(string $attributeName, $object, string $message = ''): void
    public static function assertObjectNotHasAttribute(string $attributeName, $object, string $message = ''): void
    final public static function assertObjectHasProperty(string $propertyName, object $object, string $message = ''): void
    final public static function assertObjectNotHasProperty(string $propertyName, object $object, string $message = ''): void
    public static function assertSame($expected, $actual, string $message = ''): void
    public static function assertNotSame($expected, $actual, string $message = ''): void
    public static function assertInstanceOf(string $expected, $actual, string $message = ''): void
    throw InvalidArgumentException::create(1, 'class or interface name');
    public static function assertNotInstanceOf(string $expected, $actual, string $message = ''): void
    throw InvalidArgumentException::create(1, 'class or interface name');
    public static function assertIsArray($actual, string $message = ''): void
    public static function assertIsBool($actual, string $message = ''): void
    public static function assertIsFloat($actual, string $message = ''): void
    public static function assertIsInt($actual, string $message = ''): void
    public static function assertIsNumeric($actual, string $message = ''): void
    public static function assertIsObject($actual, string $message = ''): void
    public static function assertIsResource($actual, string $message = ''): void
    public static function assertIsClosedResource($actual, string $message = ''): void
    public static function assertIsString($actual, string $message = ''): void
    public static function assertIsScalar($actual, string $message = ''): void
    public static function assertIsCallable($actual, string $message = ''): void
    public static function assertIsIterable($actual, string $message = ''): void
    public static function assertIsNotArray($actual, string $message = ''): void
    public static function assertIsNotBool($actual, string $message = ''): void
    public static function assertIsNotFloat($actual, string $message = ''): void
    public static function assertIsNotInt($actual, string $message = ''): void
    public static function assertIsNotNumeric($actual, string $message = ''): void
    public static function assertIsNotObject($actual, string $message = ''): void
    public static function assertIsNotResource($actual, string $message = ''): void
    public static function assertIsNotClosedResource($actual, string $message = ''): void
    public static function assertIsNotString($actual, string $message = ''): void
    public static function assertIsNotScalar($actual, string $message = ''): void
    public static function assertIsNotCallable($actual, string $message = ''): void
    public static function assertIsNotIterable($actual, string $message = ''): void
    public static function assertMatchesRegularExpression(string $pattern, string $string, string $message = ''): void
    public static function assertRegExp(string $pattern, string $string, string $message = ''): void
    public static function assertDoesNotMatchRegularExpression(string $pattern, string $string, string $message = ''): void
    public static function assertNotRegExp(string $pattern, string $string, string $message = ''): void
    public static function assertSameSize($expected, $actual, string $message = ''): void
    public static function assertNotSameSize($expected, $actual, string $message = ''): void
    public static function assertStringMatchesFormat(string $format, string $string, string $message = ''): void
    public static function assertStringNotMatchesFormat(string $format, string $string, string $message = ''): void
    public static function assertStringMatchesFormatFile(string $formatFile, string $string, string $message = ''): void
    public static function assertStringNotMatchesFormatFile(string $formatFile, string $string, string $message = ''): void
    public static function assertStringStartsWith(string $prefix, string $string, string $message = ''): void
    public static function assertStringStartsNotWith($prefix, $string, string $message = ''): void
    public static function assertStringContainsString(string $needle, string $haystack, string $message = ''): void
    public static function assertStringContainsStringIgnoringCase(string $needle, string $haystack, string $message = ''): void
    public static function assertStringNotContainsString(string $needle, string $haystack, string $message = ''): void
    public static function assertStringNotContainsStringIgnoringCase(string $needle, string $haystack, string $message = ''): void
    public static function assertStringEndsWith(string $suffix, string $string, string $message = ''): void
    public static function assertStringEndsNotWith(string $suffix, string $string, string $message = ''): void
    public static function assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile, string $message = ''): void
    public static function assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile, string $message = ''): void
    public static function assertXmlStringEqualsXmlFile(string $expectedFile, $actualXml, string $message = ''): void
    public static function assertXmlStringNotEqualsXmlFile(string $expectedFile, $actualXml, string $message = ''): void
    public static function assertXmlStringEqualsXmlString($expectedXml, $actualXml, string $message = ''): void
    public static function assertXmlStringNotEqualsXmlString($expectedXml, $actualXml, string $message = ''): void
    public static function assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement, bool $checkAttributes = false, string $message = ''): void
    public static function assertThat($value, Constraint $constraint, string $message = ''): void
    public static function assertJson(string $actualJson, string $message = ''): void
    public static function assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson, string $message = ''): void
    public static function assertJsonStringNotEqualsJsonString($expectedJson, $actualJson, string $message = ''): void
    public static function assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson, string $message = ''): void
    public static function assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson, string $message = ''): void
    public static function assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile, string $message = ''): void
    public static function assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile, string $message = ''): void
    public static function logicalAnd(): LogicalAnd
    public static function logicalOr(): LogicalOr
    public static function logicalNot(Constraint $constraint): LogicalNot
    public static function logicalXor(): LogicalXor
    public static function anything(): IsAnything
    public static function isTrue(): IsTrue
    public static function callback(callable $callback): Callback
    public static function isFalse(): IsFalse
    public static function isJson(): IsJson
    public static function isNull(): IsNull
    public static function isFinite(): IsFinite
    public static function isInfinite(): IsInfinite
    public static function isNan(): IsNan
    public static function containsEqual($value): TraversableContainsEqual
    public static function containsIdentical($value): TraversableContainsIdentical
    public static function containsOnly(string $type): TraversableContainsOnly
    public static function containsOnlyInstancesOf(string $className): TraversableContainsOnly
    public static function arrayHasKey($key): ArrayHasKey
    public static function equalTo($value): IsEqual
    public static function equalToCanonicalizing($value): IsEqualCanonicalizing
    public static function equalToIgnoringCase($value): IsEqualIgnoringCase
    public static function equalToWithDelta($value, float $delta): IsEqualWithDelta
    public static function isEmpty(): IsEmpty
    public static function isWritable(): IsWritable
    public static function isReadable(): IsReadable
    public static function directoryExists(): DirectoryExists
    public static function fileExists(): FileExists
    public static function greaterThan($value): GreaterThan
    public static function greaterThanOrEqual($value): LogicalOr
    public static function classHasAttribute(string $attributeName): ClassHasAttribute
    public static function classHasStaticAttribute(string $attributeName): ClassHasStaticAttribute
    public static function objectHasAttribute($attributeName): ObjectHasAttribute
    public static function identicalTo($value): IsIdentical
    public static function isInstanceOf(string $className): IsInstanceOf
    public static function isType(string $type): IsType
    public static function lessThan($value): LessThan
    public static function lessThanOrEqual($value): LogicalOr
    public static function matchesRegularExpression(string $pattern): RegularExpression
    public static function matches(string $string): StringMatchesFormatDescription
    public static function stringStartsWith($prefix): StringStartsWith
    public static function stringContains(string $string, bool $case = true): StringContains
    public static function stringEndsWith(string $suffix): StringEndsWith
    public static function countOf(int $count): Count
    public static function objectEquals(object $object, string $method = 'equals'): ObjectEquals
    public static function fail(string $message = ''): void
    public static function markTestIncomplete(string $message = ''): void
    public static function markTestSkipped(string $message = ''): void
    public static function getCount(): int
    public static function resetCount(): void
    private static function detectLocationHint(string $message): ?array
    private static function isValidObjectAttributeName(string $attributeName): bool
    private static function isValidClassAttributeName(string $attributeName): bool
    private static function createWarning(string $warning): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Boolean/IsFalse.php
    final class IsFalse extends Constraint
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Boolean/IsTrue.php
    final class IsTrue extends Constraint
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Callback.php
    final class Callback extends Constraint
    public function __construct(callable $callback)
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Cardinality/Count.php
    use function count;
    use function is_array;
    use function iterator_count;
    use function sprintf;
    class Count extends Constraint
    public function __construct(int $expected)
    public function toString(): string
    protected function matches($other): bool
    protected function getCountOf($other): ?int
    protected function getCountOfGenerator(Generator $generator): int
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Cardinality/GreaterThan.php
    final class GreaterThan extends Constraint
    public function __construct($value)
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Cardinality/IsEmpty.php
    use function count;
    use function gettype;
    use function sprintf;
    use function strpos;
    final class IsEmpty extends Constraint
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Cardinality/LessThan.php
    final class LessThan extends Constraint
    public function __construct($value)
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Cardinality/SameSize.php
    final class SameSize extends Count
    public function __construct(iterable $expected)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Constraint.php
    use function sprintf;
    abstract class Constraint implements Countable, SelfDescribing
    public function evaluate($other, string $description = '', bool $returnResult = false): ?bool
    public function count(): int
    protected function exporter(): Exporter
    protected function matches($other): bool
    protected function fail($other, $description, ?ComparisonFailure $comparisonFailure = null): void
    * The function can be overridden to provide additional failure
    protected function additionalFailureDescription($other): string
    protected function failureDescription($other): string
    protected function toStringInContext(Operator $operator, $role): string
    protected function failureDescriptionInContext(Operator $operator, $role, $other): string
    protected function reduce(): self
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Equality/IsEqual.php
    use function is_string;
    use function sprintf;
    use function strpos;
    use function trim;
    final class IsEqual extends Constraint
    public function __construct($value, float $delta = 0.0, bool $canonicalize = false, bool $ignoreCase = false)
    public function evaluate($other, string $description = '', bool $returnResult = false): ?bool
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Equality/IsEqualCanonicalizing.php
    use function is_string;
    use function sprintf;
    use function strpos;
    use function trim;
    final class IsEqualCanonicalizing extends Constraint
    public function __construct($value)
    public function evaluate($other, string $description = '', bool $returnResult = false): ?bool
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Equality/IsEqualIgnoringCase.php
    use function is_string;
    use function sprintf;
    use function strpos;
    use function trim;
    final class IsEqualIgnoringCase extends Constraint
    public function __construct($value)
    public function evaluate($other, string $description = '', bool $returnResult = false): ?bool
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Equality/IsEqualWithDelta.php
    use function sprintf;
    use function trim;
    final class IsEqualWithDelta extends Constraint
    public function __construct($value, float $delta)
    public function evaluate($other, string $description = '', bool $returnResult = false): ?bool
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Exception/Exception.php
    use function get_class;
    use function sprintf;
    final class Exception extends Constraint
    public function __construct(string $className)
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Exception/ExceptionCode.php
    use function sprintf;
    final class ExceptionCode extends Constraint
    public function __construct($expected)
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Exception/ExceptionMessage.php
    use function sprintf;
    use function strpos;
    final class ExceptionMessage extends Constraint
    public function __construct(string $expected)
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Exception/ExceptionMessageRegularExpression.php
    use function sprintf;
    final class ExceptionMessageRegularExpression extends Constraint
    public function __construct(string $expected)
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Filesystem/DirectoryExists.php
    use function is_dir;
    use function sprintf;
    final class DirectoryExists extends Constraint
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Filesystem/FileExists.php
    use function file_exists;
    use function sprintf;
    final class FileExists extends Constraint
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Filesystem/IsReadable.php
    use function is_readable;
    use function sprintf;
    final class IsReadable extends Constraint
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Filesystem/IsWritable.php
    use function is_writable;
    use function sprintf;
    final class IsWritable extends Constraint
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/IsAnything.php
    final class IsAnything extends Constraint
    public function evaluate($other, string $description = '', bool $returnResult = false): ?bool
    public function toString(): string
    public function count(): int
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/IsIdentical.php
    use function get_class;
    use function is_array;
    use function is_object;
    use function is_string;
    use function sprintf;
    final class IsIdentical extends Constraint
    public function __construct($value)
    public function evaluate($other, string $description = '', bool $returnResult = false): ?bool
    public function toString(): string
    return 'is identical to an object of class "' .
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/JsonMatches.php
    use function json_decode;
    use function sprintf;
    final class JsonMatches extends Constraint
    public function __construct(string $value)
    public function toString(): string
    protected function matches($other): bool
    protected function fail($other, $description, ?ComparisonFailure $comparisonFailure = null): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/JsonMatchesErrorMessageProvider.php
    use function strtolower;
    final class JsonMatchesErrorMessageProvider
    public static function determineJsonError(string $error, string $prefix = ''): ?string
    public static function translateTypeToPrefix(string $type): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Math/IsFinite.php
    use function is_finite;
    final class IsFinite extends Constraint
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Math/IsInfinite.php
    use function is_infinite;
    final class IsInfinite extends Constraint
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Math/IsNan.php
    use function is_nan;
    final class IsNan extends Constraint
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Object/ClassHasAttribute.php
    use function get_class;
    use function is_object;
    use function sprintf;
    class ClassHasAttribute extends Constraint
    public function __construct(string $attributeName)
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
    '%sclass "%s" %s',
    protected function attributeName(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Object/ClassHasStaticAttribute.php
    use function sprintf;
    final class ClassHasStaticAttribute extends ClassHasAttribute
    public function toString(): string
    protected function matches($other): bool
    $class = new ReflectionClass($other);
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Object/ObjectEquals.php
    use function get_class;
    use function is_object;
    final class ObjectEquals extends Constraint
    public function __construct(object $object, string $method = 'equals')
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Object/ObjectHasAttribute.php
    final class ObjectHasAttribute extends ClassHasAttribute
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Object/ObjectHasProperty.php
    use function get_class;
    use function gettype;
    use function is_object;
    use function sprintf;
    final class ObjectHasProperty extends Constraint
    public function __construct(string $propertyName)
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
    'object of class "%s" %s',
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Operator/BinaryOperator.php
    use function array_map;
    use function array_values;
    use function count;
    abstract class BinaryOperator extends Operator
    public static function fromConstraints(Constraint ...$constraints): self
    public function setConstraints(array $constraints): void
    $this->constraints = array_map(function ($constraint): Constraint
    final public function arity(): int
    public function toString(): string
    public function count(): int
    final protected function constraints(): array
    final protected function constraintNeedsParentheses(Constraint $constraint): bool
    protected function reduce(): Constraint
    private function constraintToString(Constraint $constraint, int $position): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Operator/LogicalAnd.php
    final class LogicalAnd extends BinaryOperator
    public function operator(): string
    public function precedence(): int
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Operator/LogicalNot.php
    use function array_map;
    use function count;
    use function preg_match;
    use function preg_quote;
    use function preg_replace;
    final class LogicalNot extends UnaryOperator
    public static function negate(string $string): string
    static function (string $s)
    public function operator(): string
    public function precedence(): int
    protected function matches($other): bool
    protected function transformString(string $string): string
    protected function reduce(): Constraint
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Operator/LogicalOr.php
    final class LogicalOr extends BinaryOperator
    public function operator(): string
    public function precedence(): int
    public function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Operator/LogicalXor.php
    use function array_reduce;
    use function array_shift;
    final class LogicalXor extends BinaryOperator
    public function operator(): string
    public function precedence(): int
    public function matches($other): bool
    static function (bool $matches, Constraint $constraint) use ($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Operator/Operator.php
    abstract class Operator extends Constraint
    abstract public function operator(): string;
    abstract public function precedence(): int;
    abstract public function arity(): int;
    protected function checkConstraint($constraint): Constraint
    protected function constraintNeedsParentheses(Constraint $constraint): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Operator/UnaryOperator.php
    use function count;
    abstract class UnaryOperator extends Operator
    public function __construct($constraint)
    public function arity(): int
    public function toString(): string
    public function count(): int
    protected function failureDescription($other): string
    * The method may be overwritten in a subclass to apply default
    protected function transformString(string $string): string
    final protected function constraint(): Constraint
    protected function constraintNeedsParentheses(Constraint $constraint): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/String/IsJson.php
    use function json_decode;
    use function json_last_error;
    use function sprintf;
    final class IsJson extends Constraint
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/String/RegularExpression.php
    use function preg_match;
    use function sprintf;
    class RegularExpression extends Constraint
    public function __construct(string $pattern)
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/String/StringContains.php
    use function mb_stripos;
    use function mb_strtolower;
    use function sprintf;
    use function strpos;
    final class StringContains extends Constraint
    public function __construct(string $string, bool $ignoreCase = false)
    public function toString(): string
    protected function matches($other): bool
    * This function is very fast and we don't care about the character position in the string.
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/String/StringEndsWith.php
    use function strlen;
    use function substr;
    final class StringEndsWith extends Constraint
    public function __construct(string $suffix)
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/String/StringMatchesFormatDescription.php
    use function explode;
    use function implode;
    use function preg_match;
    use function preg_quote;
    use function preg_replace;
    use function strtr;
    final class StringMatchesFormatDescription extends RegularExpression
    public function __construct(string $string)
    protected function matches($other): bool
    protected function failureDescription($other): string
    protected function additionalFailureDescription($other): string
    private function createPatternFromFormat(string $string): string
    private function convertNewlines(string $text): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/String/StringStartsWith.php
    use function strpos;
    final class StringStartsWith extends Constraint
    public function __construct(string $prefix)
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Traversable/ArrayHasKey.php
    use function array_key_exists;
    use function is_array;
    final class ArrayHasKey extends Constraint
    public function __construct($key)
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Traversable/TraversableContains.php
    use function is_array;
    use function sprintf;
    abstract class TraversableContains extends Constraint
    public function __construct($value)
    public function toString(): string
    protected function failureDescription($other): string
    protected function value()
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Traversable/TraversableContainsEqual.php
    final class TraversableContainsEqual extends TraversableContains
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Traversable/TraversableContainsIdentical.php
    final class TraversableContainsIdentical extends TraversableContains
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Traversable/TraversableContainsOnly.php
    final class TraversableContainsOnly extends Constraint
    public function __construct(string $type, bool $isNativeType = true)
    public function evaluate($other, string $description = '', bool $returnResult = false): ?bool
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Type/IsInstanceOf.php
    use function sprintf;
    final class IsInstanceOf extends Constraint
    public function __construct(string $className)
    public function toString(): string
    protected function matches($other): bool
    protected function failureDescription($other): string
    private function getType(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Type/IsNull.php
    final class IsNull extends Constraint
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Constraint/Type/IsType.php
    use function gettype;
    use function is_array;
    use function is_bool;
    use function is_callable;
    use function is_float;
    use function is_int;
    use function is_iterable;
    use function is_numeric;
    use function is_object;
    use function is_scalar;
    use function is_string;
    use function sprintf;
    final class IsType extends Constraint
    public function __construct(string $type)
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/DataProviderTestSuite.php
    use function explode;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class DataProviderTestSuite extends TestSuite
    public function setDependencies(array $dependencies): void
    public function provides(): array
    public function requires(): array
    public function getSize(): int
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Error/Deprecated.php
    final class Deprecated extends Error
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Error/Error.php
    class Error extends Exception
    public function __construct(string $message, int $code, string $file, int $line, ?\Exception $previous = null)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Error/Notice.php
    final class Notice extends Error
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Error/Warning.php
    final class Warning extends Error
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/ErrorTestCase.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ErrorTestCase extends TestCase
    public function __construct(string $message = '')
    public function getMessage(): string
    public function toString(): string
    protected function runTest(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/ActualValueIsNotAnObjectException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ActualValueIsNotAnObjectException extends Exception
    public function __construct()
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/AssertionFailedError.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    class AssertionFailedError extends Exception implements SelfDescribing
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/CodeCoverageException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    class CodeCoverageException extends Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/ComparisonMethodDoesNotAcceptParameterTypeException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ComparisonMethodDoesNotAcceptParameterTypeException extends Exception
    public function __construct(string $className, string $methodName, string $type)
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/ComparisonMethodDoesNotDeclareBoolReturnTypeException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ComparisonMethodDoesNotDeclareBoolReturnTypeException extends Exception
    public function __construct(string $className, string $methodName)
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/ComparisonMethodDoesNotDeclareExactlyOneParameterException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ComparisonMethodDoesNotDeclareExactlyOneParameterException extends Exception
    public function __construct(string $className, string $methodName)
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/ComparisonMethodDoesNotDeclareParameterTypeException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ComparisonMethodDoesNotDeclareParameterTypeException extends Exception
    public function __construct(string $className, string $methodName)
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/ComparisonMethodDoesNotExistException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ComparisonMethodDoesNotExistException extends Exception
    public function __construct(string $className, string $methodName)
    public function __toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/CoveredCodeNotExecutedException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class CoveredCodeNotExecutedException extends RiskyTestError
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/Error.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Error extends Exception implements SelfDescribing
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/Exception.php
    use function array_keys;
    use function get_object_vars;
    * Base class for all PHPUnit Framework exceptions.
    * of the called function. The function arguments can contain references to
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    class Exception extends RuntimeException implements \PHPUnit\Exception
    public function __construct($message = '', $code = 0, ?Throwable $previous = null)
    public function __toString(): string
    public function __sleep(): array
    public function getSerializableTrace(): array
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/ExpectationFailedException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ExpectationFailedException extends AssertionFailedError
    public function __construct(string $message, ?ComparisonFailure $comparisonFailure = null, ?Exception $previous = null)
    public function getComparisonFailure(): ?ComparisonFailure
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/IncompleteTestError.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class IncompleteTestError extends AssertionFailedError implements IncompleteTest
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/InvalidArgumentException.php
    use function debug_backtrace;
    use function in_array;
    use function lcfirst;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class InvalidArgumentException extends Exception
    public static function create(int $argument, string $type): self
    $function = $stack[1]['function'];
    $function = sprintf('%s::%s', $stack[1]['class'], $stack[1]['function']);
    private function __construct(string $message = '', int $code = 0, ?\Exception $previous = null)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/InvalidCoversTargetException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class InvalidCoversTargetException extends CodeCoverageException
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/InvalidDataProviderException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class InvalidDataProviderException extends Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/MissingCoversAnnotationException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MissingCoversAnnotationException extends RiskyTestError
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/NoChildTestSuiteException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class NoChildTestSuiteException extends Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/OutputError.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class OutputError extends AssertionFailedError
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/PHPTAssertionFailedError.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class PHPTAssertionFailedError extends SyntheticError
    public function __construct(string $message, int $code, string $file, int $line, array $trace, string $diff)
    public function getDiff(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/RiskyTestError.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    class RiskyTestError extends AssertionFailedError
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/SkippedTestError.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class SkippedTestError extends AssertionFailedError implements SkippedTest
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/SkippedTestSuiteError.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class SkippedTestSuiteError extends AssertionFailedError implements SkippedTest
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/SyntheticError.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    class SyntheticError extends AssertionFailedError
    public function __construct(string $message, int $code, string $file, int $line, array $trace)
    public function getSyntheticFile(): string
    public function getSyntheticLine(): int
    public function getSyntheticTrace(): array
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/SyntheticSkippedError.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class SyntheticSkippedError extends SyntheticError implements SkippedTest
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/UnintentionallyCoveredCodeError.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class UnintentionallyCoveredCodeError extends RiskyTestError
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Exception/Warning.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Warning extends Exception implements SelfDescribing
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/ExceptionWrapper.php
    use function array_keys;
    use function get_class;
    use function spl_object_hash;
    * class names, properties, and stack traces (but without arguments).
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ExceptionWrapper extends Exception
    public function __construct(Throwable $t)
    public function __toString(): string
    public function getClassName(): string
    public function getPreviousWrapped(): ?self
    public function setClassName(string $className): void
    public function setOriginalException(Throwable $t): void
    public function getOriginalException(): ?Throwable
    private function originalException(?Throwable $exceptionToStore = null): ?Throwable
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/ExecutionOrderDependency.php
    use function array_filter;
    use function array_map;
    use function array_values;
    use function count;
    use function explode;
    use function in_array;
    use function strpos;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ExecutionOrderDependency
    public static function createFromDependsAnnotation(string $className, string $annotation): self
    // Prefix provided class for targets assumed to be in scope
    public static function filterInvalid(array $dependencies): array
    static function (self $d)
    public static function mergeUnique(array $existing, array $additional): array
    static function ($dependency)
    public static function diff(array $left, array $right): array
    static function ($dependency)
    public function __construct(string $classOrCallableName, ?string $methodName = null, ?string $option = null)
    public function __toString(): string
    public function isValid(): bool
    public function useShallowClone(): bool
    public function useDeepClone(): bool
    public function targetIsClass(): bool
    public function getTarget(): string
    public function getTargetClassName(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/IncompleteTest.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/IncompleteTestCase.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class IncompleteTestCase extends TestCase
    public function __construct(string $className, string $methodName, string $message = '')
    public function getMessage(): string
    public function toString(): string
    protected function runTest(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/InvalidParameterGroupException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class InvalidParameterGroupException extends Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Api/Api.php
    public static function __phpunit_initConfigurableMethods(ConfigurableMethod ...$configurableMethods): void
    public function __phpunit_setOriginalObject($originalObject): void
    public function __phpunit_setReturnValueGeneration(bool $returnValueGeneration): void
    public function __phpunit_getInvocationHandler(): InvocationHandler
    public function __phpunit_hasMatchers(): bool
    public function __phpunit_verify(bool $unsetInvocationMocker = true): void
    public function expects(InvocationOrder $matcher): InvocationMockerBuilder
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Api/Method.php
    use function call_user_func_array;
    use function func_get_args;
    public function method()
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Builder/Identity.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    public function id($id);
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Builder/InvocationMocker.php
    use function array_map;
    use function array_merge;
    use function count;
    use function in_array;
    use function is_string;
    use function strtolower;
    final class InvocationMocker implements InvocationStubber, MethodNameMatch
    public function __construct(InvocationHandler $handler, Matcher $matcher, ConfigurableMethod ...$configurableMethods)
    public function id($id): self
    public function will(Stub $stub): Identity
    public function willReturn($value, ...$nextValues): self
    public function willReturnReference(&$reference): self
    public function willReturnMap(array $valueMap): self
    public function willReturnArgument($argumentIndex): self
    public function willReturnCallback($callback): self
    public function willReturnSelf(): self
    public function willReturnOnConsecutiveCalls(...$values): self
    public function willThrowException(Throwable $exception): self
    public function after($id): self
    public function with(...$arguments): self
    public function withConsecutive(...$arguments): self
    public function withAnyParameters(): self
    public function method($constraint): self
    static function (ConfigurableMethod $configurable)
    private function ensureParametersCanBeConfigured(): void
    private function getConfiguredMethod(): ?ConfigurableMethod
    private function ensureTypeOfReturnValues(array $values): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Builder/InvocationStubber.php
    public function will(Stub $stub): Identity;
    public function willReturn($value, ...$nextValues)/* : self */;
    public function willReturnReference(&$reference)/* : self */;
    public function willReturnMap(array $valueMap)/* : self */;
    public function willReturnArgument($argumentIndex)/* : self */;
    public function willReturnCallback($callback)/* : self */;
    public function willReturnSelf()/* : self */;
    public function willReturnOnConsecutiveCalls(...$values)/* : self */;
    public function willThrowException(Throwable $exception)/* : self */;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Builder/MethodNameMatch.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    public function method($constraint);
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Builder/ParametersMatch.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    public function after($id);
    * Sets the parameters to match for, each parameter to this function will
    public function with(...$arguments);
    public function withAnyParameters();
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Builder/Stub.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    public function will(BaseStub $stub): Identity;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/ConfigurableMethod.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ConfigurableMethod
    public function __construct(string $name, Type $returnType)
    public function getName(): string
    public function mayReturn($value): bool
    public function getReturnTypeDeclaration(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/BadMethodCallException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class BadMethodCallException extends \BadMethodCallException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/CannotUseAddMethodsException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class CannotUseAddMethodsException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(string $type, string $methodName)
    'Trying to configure method "%s" with addMethods(), but it exists in class "%s". Use onlyMethods() for methods that exist in the class',
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/CannotUseOnlyMethodsException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class CannotUseOnlyMethodsException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(string $type, string $methodName)
    'Trying to configure method "%s" with onlyMethods(), but it does not exist in class "%s". Use addMethods() for methods that do not exist in the class',
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/ClassAlreadyExistsException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ClassAlreadyExistsException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(string $className)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/ClassIsFinalException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ClassIsFinalException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(string $className)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/ClassIsReadonlyException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ClassIsReadonlyException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(string $className)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/ConfigurableMethodsAlreadyInitializedException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ConfigurableMethodsAlreadyInitializedException extends \PHPUnit\Framework\Exception implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/DuplicateMethodException.php
    use function array_diff_assoc;
    use function array_unique;
    use function implode;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class DuplicateMethodException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(array $methods)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/Exception.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/IncompatibleReturnValueException.php
    use function get_class;
    use function gettype;
    use function is_object;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class IncompatibleReturnValueException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(ConfigurableMethod $method, $value)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/InvalidMethodNameException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class InvalidMethodNameException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(string $method)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/MatchBuilderNotFoundException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MatchBuilderNotFoundException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(string $id)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/MatcherAlreadyRegisteredException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MatcherAlreadyRegisteredException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(string $id)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/MethodCannotBeConfiguredException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MethodCannotBeConfiguredException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(string $method)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/MethodNameAlreadyConfiguredException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MethodNameAlreadyConfiguredException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/MethodNameNotConfiguredException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MethodNameNotConfiguredException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/MethodParametersAlreadyConfiguredException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MethodParametersAlreadyConfiguredException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/OriginalConstructorInvocationRequiredException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class OriginalConstructorInvocationRequiredException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/ReflectionException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ReflectionException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/ReturnValueNotConfiguredException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ReturnValueNotConfiguredException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(Invocation $invocation)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/RuntimeException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class RuntimeException extends \RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/SoapExtensionNotAvailableException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class SoapExtensionNotAvailableException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct()
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/UnknownClassException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class UnknownClassException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(string $className)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/UnknownTraitException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class UnknownTraitException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(string $traitName)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Exception/UnknownTypeException.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class UnknownTypeException extends \PHPUnit\Framework\Exception implements Exception
    public function __construct(string $type)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Generator.php
    use function array_merge;
    use function array_pop;
    use function array_unique;
    use function class_exists;
    use function count;
    use function explode;
    use function extension_loaded;
    use function implode;
    use function in_array;
    use function interface_exists;
    use function is_array;
    use function is_object;
    use function md5;
    use function method_exists;
    use function mt_rand;
    use function preg_match;
    use function preg_match_all;
    use function range;
    use function serialize;
    use function sort;
    use function sprintf;
    use function str_replace;
    use function strlen;
    use function strpos;
    use function strtolower;
    use function substr;
    use function trait_exists;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Generator
    public function __clone(): void
    public function __clone()
    public function __clone(): void
    public function __clone()
    public function getMock(string $type, $methods = [], array $arguments = [], string $mockClassName = '', bool $callOriginalConstructor = true, bool $callOriginalClone = true, bool $callAutoload = true, bool $cloneArguments = true, bool $callOriginalMethods = false, ?object $proxyTarget = null, bool $allowMockingUnknownTypes = true, bool $returnValueGeneration = true): MockObject
    public function getMockForInterfaces(array $interfaces, bool $callAutoload = true): MockObject
    * Returns a mock object for the specified abstract class with all abstract
    * methods of the class mocked.
    public function getMockForAbstractClass(string $originalClassName, array $arguments = [], string $mockClassName = '', bool $callOriginalConstructor = true, bool $callOriginalClone = true, bool $callAutoload = true, ?array $mockedMethods = null, bool $cloneArguments = true): MockObject
    public function getMockForTrait(string $traitName, array $arguments = [], string $mockClassName = '', bool $callOriginalConstructor = true, bool $callOriginalClone = true, bool $callAutoload = true, ?array $mockedMethods = null, bool $cloneArguments = true): MockObject
    public function getObjectForTrait(string $traitName, string $traitClassName = '', bool $callAutoload = true, bool $callOriginalConstructor = false, array $arguments = []): object
    public function generate(string $type, ?array $methods = null, string $mockClassName = '', bool $callOriginalClone = true, bool $callAutoload = true, bool $cloneArguments = true, bool $callOriginalMethods = false): MockClass
    public function generateClassFromWsdl(string $wsdlFile, string $className, array $methods = [], array $options = []): string
    public function getClassMethods(string $className): array
    $class = new ReflectionClass($className);
    public function mockClassMethods(string $className, bool $callOriginalMethods, bool $cloneArguments): array
    $class = new ReflectionClass($className);
    public function mockInterfaceMethods(string $interfaceName, bool $cloneArguments): array
    $class = new ReflectionClass($interfaceName);
    private function userDefinedInterfaceMethods(string $interfaceName): array
    private function getObject(MockType $mockClass, $type = '', bool $callOriginalConstructor = false, bool $callAutoload = false, array $arguments = [], bool $callOriginalMethods = false, ?object $proxyTarget = null, bool $returnValueGeneration = true)
    $class = new ReflectionClass($className);
    $class = new ReflectionClass($type);
    private function generateMock(string $type, ?array $explicitMethods, string $mockClassName, bool $callOriginalClone, bool $callAutoload, bool $cloneArguments, bool $callOriginalMethods): MockClass
    $class                = null;
    $prologue = 'class ' . $_mockClassName['originalClassName'] . "\n{\n}\n\n";
    $class = new ReflectionClass($_mockClassName['fullClassName']);
    $class = new ReflectionClass($actualClassName);
    if ($class !== null && $class->hasMethod($methodName)) {
    private function generateClassName(string $type, string $className, string $prefix): array
    private function generateMockClassDeclaration(array $mockClassName, bool $isInterface, array $additionalInterfaces = []): string
    $buffer = 'class ';
    private function canMockMethod(ReflectionMethod $method): bool
    private function isMethodNameExcluded(string $name): bool
    private function getTemplate(string $template): Template
    private function isConstructor(ReflectionMethod $method): bool
    private function mockedCloneMethod(): string
    private function unmockedCloneMethod(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Invocation.php
    use function array_map;
    use function explode;
    use function get_class;
    use function implode;
    use function in_array;
    use function interface_exists;
    use function is_object;
    use function sprintf;
    use function strpos;
    use function strtolower;
    use function substr;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Invocation implements SelfDescribing
    public function __construct(string $className, string $methodName, array $parameters, string $returnType, object $object, bool $cloneObjects = false, bool $proxiedCall = false)
    public function getClassName(): string
    public function getMethodName(): string
    public function getParameters(): array
    public function generateReturnValue()
    return static function (): void
    $generator = static function (): \Generator
    public function toString(): string
    public function getObject(): object
    private function onlyInterfaces(array $types): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/InvocationHandler.php
    use function strtolower;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class InvocationHandler
    public function __construct(array $configurableMethods, bool $returnValueGeneration)
    public function hasMatchers(): bool
    public function lookupMatcher(string $id): ?Matcher
    public function registerMatcher(string $id, Matcher $matcher): void
    public function expects(InvocationOrder $rule): InvocationMocker
    public function invoke(Invocation $invocation)
    public function matches(Invocation $invocation): bool
    public function verify(): void
    private function addMatcher(Matcher $matcher): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Matcher.php
    use function assert;
    use function implode;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Matcher
    public function __construct(InvocationOrder $rule)
    public function hasMatchers(): bool
    public function hasMethodNameRule(): bool
    public function getMethodNameRule(): MethodName
    public function setMethodNameRule(MethodName $rule): void
    public function hasParametersRule(): bool
    public function setParametersRule(ParametersRule $rule): void
    public function setStub(Stub $stub): void
    public function setAfterMatchBuilderId(string $id): void
    public function invoked(Invocation $invocation)
    public function matches(Invocation $invocation): bool
    public function verify(): void
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/MethodNameConstraint.php
    use function is_string;
    use function sprintf;
    use function strtolower;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MethodNameConstraint extends Constraint
    public function __construct(string $methodName)
    public function toString(): string
    protected function matches($other): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/MockBuilder.php
    use function array_diff;
    use function array_merge;
    final class MockBuilder
    public function __construct(TestCase $testCase, $type)
    public function getMock(): MockObject
    * Creates a mock object for an abstract class using a fluent interface.
    public function getMockForAbstractClass(): MockObject
    public function getMockForTrait(): MockObject
    public function setMethods(?array $methods = null): self
    public function onlyMethods(array $methods): self
    * Specifies methods that don't exist in the class which you want to mock.
    public function addMethods(array $methods): self
    public function setMethodsExcept(array $methods = []): self
    public function setConstructorArgs(array $args): self
    public function setMockClassName(string $name): self
    public function disableOriginalConstructor(): self
    public function enableOriginalConstructor(): self
    public function disableOriginalClone(): self
    public function enableOriginalClone(): self
    * Disables the use of class autoloading while creating the mock object.
    public function disableAutoload(): self
    * Enables the use of class autoloading while creating the mock object.
    public function enableAutoload(): self
    public function disableArgumentCloning(): self
    public function enableArgumentCloning(): self
    public function enableProxyingToOriginalMethods(): self
    public function disableProxyingToOriginalMethods(): self
    public function setProxyTarget(object $object): self
    public function allowMockingUnknownTypes(): self
    public function disallowMockingUnknownTypes(): self
    public function enableAutoReturnValueGeneration(): self
    public function disableAutoReturnValueGeneration(): self
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/MockClass.php
    use function call_user_func;
    use function class_exists;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MockClass implements MockType
    public function __construct(string $classCode, string $mockName, array $configurableMethods)
    public function generate(): string
    public function getClassCode(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/MockMethod.php
    use function explode;
    use function implode;
    use function is_object;
    use function is_string;
    use function preg_match;
    use function preg_replace;
    use function sprintf;
    use function strlen;
    use function strpos;
    use function substr;
    use function substr_count;
    use function trim;
    use function var_export;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MockMethod
    public static function fromReflection(ReflectionMethod $method, bool $callOriginalMethod, bool $cloneArguments): self
    public static function fromName(string $fullClassName, string $methodName, bool $cloneArguments): self
    public function __construct(string $className, string $methodName, bool $cloneArguments, string $modifier, string $argumentsForDeclaration, string $argumentsForCall, Type $returnType, string $reference, bool $callOriginalMethod, bool $static, ?string $deprecation)
    public function getName(): string
    public function generateCode(): string
    public function getReturnType(): Type
    private function getTemplate(string $template): Template
    * Returns the parameters of a function or method.
    private static function getMethodParametersForDeclaration(ReflectionMethod $method): string
    * Returns the parameters of a function or method.
    private static function getMethodParametersForCall(ReflectionMethod $method): string
    private static function exportDefaultValue(ReflectionParameter $parameter): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/MockMethodSet.php
    use function array_key_exists;
    use function array_values;
    use function strtolower;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MockMethodSet
    public function addMethods(MockMethod ...$methods): void
    public function asArray(): array
    public function hasMethod(string $methodName): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/MockObject.php
    public function __phpunit_setOriginalObject($originalObject): void;
    public function __phpunit_verify(bool $unsetInvocationMocker = true): void;
    public function expects(InvocationOrder $invocationRule): BuilderInvocationMocker;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/MockTrait.php
    use function class_exists;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MockTrait implements MockType
    public function __construct(string $classCode, string $mockName)
    public function generate(): string
    public function getClassCode(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/MockType.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    public function generate(): string;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Rule/AnyInvokedCount.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class AnyInvokedCount extends InvocationOrder
    public function toString(): string
    public function verify(): void
    public function matches(BaseInvocation $invocation): bool
    protected function invokedDo(BaseInvocation $invocation): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Rule/AnyParameters.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class AnyParameters implements ParametersRule
    public function toString(): string
    public function apply(BaseInvocation $invocation): void
    public function verify(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Rule/ConsecutiveParameters.php
    use function count;
    use function gettype;
    use function is_iterable;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ConsecutiveParameters implements ParametersRule
    public function __construct(array $parameterGroups)
    public function toString(): string
    public function apply(BaseInvocation $invocation): void
    public function verify(): void
    private function verifyInvocation(BaseInvocation $invocation, $callIndex): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Rule/InvocationOrder.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    abstract class InvocationOrder implements SelfDescribing, Verifiable
    public function getInvocationCount(): int
    public function hasBeenInvoked(): bool
    final public function invoked(BaseInvocation $invocation)
    abstract public function matches(BaseInvocation $invocation): bool;
    abstract protected function invokedDo(BaseInvocation $invocation);
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Rule/InvokedAtIndex.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class InvokedAtIndex extends InvocationOrder
    public function __construct($sequenceIndex)
    public function toString(): string
    public function matches(BaseInvocation $invocation): bool
    public function verify(): void
    protected function invokedDo(BaseInvocation $invocation): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Rule/InvokedAtLeastCount.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class InvokedAtLeastCount extends InvocationOrder
    public function __construct($requiredInvocations)
    public function toString(): string
    public function verify(): void
    public function matches(BaseInvocation $invocation): bool
    protected function invokedDo(BaseInvocation $invocation): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Rule/InvokedAtLeastOnce.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class InvokedAtLeastOnce extends InvocationOrder
    public function toString(): string
    public function verify(): void
    public function matches(BaseInvocation $invocation): bool
    protected function invokedDo(BaseInvocation $invocation): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Rule/InvokedAtMostCount.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class InvokedAtMostCount extends InvocationOrder
    public function __construct($allowedInvocations)
    public function toString(): string
    public function verify(): void
    public function matches(BaseInvocation $invocation): bool
    protected function invokedDo(BaseInvocation $invocation): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Rule/InvokedCount.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class InvokedCount extends InvocationOrder
    public function __construct($expectedCount)
    public function isNever(): bool
    public function toString(): string
    public function matches(BaseInvocation $invocation): bool
    public function verify(): void
    protected function invokedDo(BaseInvocation $invocation): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Rule/MethodName.php
    use function is_string;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MethodName
    public function __construct($constraint)
    public function toString(): string
    public function matches(BaseInvocation $invocation): bool
    public function matchesName(string $methodName): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Rule/Parameters.php
    use function count;
    use function get_class;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Parameters implements ParametersRule
    public function __construct(array $parameters)
    public function toString(): string
    public function apply(BaseInvocation $invocation): void
    public function verify(): void
    private function doVerify(): bool
    private function guardAgainstDuplicateEvaluationOfParameterConstraints(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Rule/ParametersRule.php
    public function apply(BaseInvocation $invocation): void;
    public function verify(): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Stub/ConsecutiveCalls.php
    use function array_shift;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ConsecutiveCalls implements Stub
    public function __construct(array $stack)
    public function invoke(Invocation $invocation)
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Stub/Exception.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Exception implements Stub
    public function __construct(Throwable $exception)
    public function invoke(Invocation $invocation): void
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Stub/ReturnArgument.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ReturnArgument implements Stub
    public function __construct($argumentIndex)
    public function invoke(Invocation $invocation)
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Stub/ReturnCallback.php
    use function call_user_func_array;
    use function get_class;
    use function is_array;
    use function is_object;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ReturnCallback implements Stub
    public function __construct($callback)
    public function invoke(Invocation $invocation)
    public function toString(): string
    $class = get_class($this->callback[0]);
    $class = $this->callback[0];
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Stub/ReturnReference.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ReturnReference implements Stub
    public function __construct(&$reference)
    public function invoke(Invocation $invocation)
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Stub/ReturnSelf.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ReturnSelf implements Stub
    public function invoke(Invocation $invocation)
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Stub/ReturnStub.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ReturnStub implements Stub
    public function __construct($value)
    public function invoke(Invocation $invocation)
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Stub/ReturnValueMap.php
    use function array_pop;
    use function count;
    use function is_array;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ReturnValueMap implements Stub
    public function __construct(array $valueMap)
    public function invoke(Invocation $invocation)
    public function toString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Stub/Stub.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    public function invoke(Invocation $invocation);
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Stub.php
    public function __phpunit_getInvocationHandler(): InvocationHandler;
    public function __phpunit_hasMatchers(): bool;
    public function __phpunit_setReturnValueGeneration(bool $returnValueGeneration): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/MockObject/Verifiable.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    public function verify(): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Reorderable.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    public function sortId(): string;
    public function provides(): array;
    public function requires(): array;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/SelfDescribing.php
    public function toString(): string;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/SkippedTest.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/SkippedTestCase.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class SkippedTestCase extends TestCase
    public function __construct(string $className, string $methodName, string $message = '')
    public function getMessage(): string
    public function toString(): string
    protected function runTest(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/Test.php
    public function run(?TestResult $result = null): TestResult;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/TestBuilder.php
    use function assert;
    use function count;
    use function get_class;
    use function sprintf;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestBuilder
    public function build(ReflectionClass $theClass, string $methodName): Test
    sprintf('Cannot instantiate class "%s".', $className),
    private function buildTestWithoutData(string $className)
    private function buildDataProviderTestSuite(
    private function configureTestCase(
    private function throwableToString(Throwable $t): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/TestCase.php
    use function array_filter;
    use function array_flip;
    use function array_keys;
    use function array_merge;
    use function array_pop;
    use function array_search;
    use function array_unique;
    use function array_values;
    use function basename;
    use function call_user_func;
    use function chdir;
    use function class_exists;
    use function clearstatcache;
    use function count;
    use function debug_backtrace;
    use function defined;
    use function explode;
    use function get_class;
    use function get_include_path;
    use function getcwd;
    use function implode;
    use function in_array;
    use function ini_set;
    use function is_array;
    use function is_callable;
    use function is_int;
    use function is_object;
    use function is_string;
    use function libxml_clear_errors;
    use function method_exists;
    use function ob_end_clean;
    use function ob_get_contents;
    use function ob_get_level;
    use function ob_start;
    use function parse_url;
    use function pathinfo;
    use function preg_replace;
    use function serialize;
    use function setlocale;
    use function sprintf;
    use function strpos;
    use function substr;
    use function sys_get_temp_dir;
    use function tempnam;
    use function trim;
    use function var_export;
    abstract class TestCase extends Assert implements Reorderable, SelfDescribing, Test
    public static function any(): AnyInvokedCountMatcher
    public static function never(): InvokedCountMatcher
    public static function atLeast(int $requiredInvocations): InvokedAtLeastCountMatcher
    public static function atLeastOnce(): InvokedAtLeastOnceMatcher
    public static function once(): InvokedCountMatcher
    public static function exactly(int $count): InvokedCountMatcher
    public static function atMost(int $allowedInvocations): InvokedAtMostCountMatcher
    public static function at(int $index): InvokedAtIndexMatcher
    public static function returnValue($value): ReturnStub
    public static function returnValueMap(array $valueMap): ReturnValueMapStub
    public static function returnArgument(int $argumentIndex): ReturnArgumentStub
    public static function returnCallback($callback): ReturnCallbackStub
    public static function returnSelf(): ReturnSelfStub
    public static function throwException(Throwable $exception): ExceptionStub
    public static function onConsecutiveCalls(...$args): ConsecutiveCallsStub
    public function __construct(?string $name = null, array $data = [], $dataName = '')
    * This method is called before the first test of this test class is run.
    public static function setUpBeforeClass(): void
    * This method is called after the last test of this test class is run.
    public static function tearDownAfterClass(): void
    protected function setUp(): void
    protected function assertPreConditions(): void
    protected function assertPostConditions(): void
    protected function tearDown(): void
    public function toString(): string
    $class = new ReflectionClass($this);
    public function count(): int
    public function getActualOutputForAssertion(): string
    public function expectOutputRegex(string $expectedRegex): void
    public function expectOutputString(string $expectedString): void
    public function expectException(string $exception): void
    public function expectExceptionCode($code): void
    public function expectExceptionMessage(string $message): void
    public function expectExceptionMessageMatches(string $regularExpression): void
    public function expectExceptionObject(\Exception $exception): void
    public function expectNotToPerformAssertions(): void
    public function expectDeprecation(): void
    public function expectDeprecationMessage(string $message): void
    public function expectDeprecationMessageMatches(string $regularExpression): void
    public function expectNotice(): void
    public function expectNoticeMessage(string $message): void
    public function expectNoticeMessageMatches(string $regularExpression): void
    public function expectWarning(): void
    public function expectWarningMessage(string $message): void
    public function expectWarningMessageMatches(string $regularExpression): void
    public function expectError(): void
    public function expectErrorMessage(string $message): void
    public function expectErrorMessageMatches(string $regularExpression): void
    public function getStatus(): int
    public function markAsRisky(): void
    public function getStatusMessage(): string
    public function hasFailed(): bool
    public function run(?TestResult $result = null): TestResult
    $class = new ReflectionClass($this);
    public function getMockBuilder(string $className): MockBuilder
    public function registerComparator(Comparator $comparator): void
    public function doubledTypes(): array
    public function getGroups(): array
    public function setGroups(array $groups): void
    public function getName(bool $withDataSet = true): string
    public function getSize(): int
    public function hasSize(): bool
    public function isSmall(): bool
    public function isMedium(): bool
    public function isLarge(): bool
    public function getActualOutput(): string
    public function hasOutput(): bool
    public function doesNotPerformAssertions(): bool
    public function hasExpectationOnOutput(): bool
    public function getExpectedException(): ?string
    public function getExpectedExceptionCode()
    public function getExpectedExceptionMessage(): ?string
    public function getExpectedExceptionMessageRegExp(): ?string
    public function setRegisterMockObjectsFromTestArgumentsRecursively(bool $flag): void
    public function runBare(): void
    public function setName(string $name): void
    public function setDependencies(array $dependencies): void
    public function setDependencyInput(array $dependencyInput): void
    public function setBeStrictAboutChangesToGlobalState(?bool $beStrictAboutChangesToGlobalState): void
    public function setBackupGlobals(?bool $backupGlobals): void
    public function setBackupStaticAttributes(?bool $backupStaticAttributes): void
    public function setRunTestInSeparateProcess(bool $runTestInSeparateProcess): void
    public function setRunClassInSeparateProcess(bool $runClassInSeparateProcess): void
    public function setPreserveGlobalState(bool $preserveGlobalState): void
    public function setInIsolation(bool $inIsolation): void
    public function isInIsolation(): bool
    public function getResult()
    public function setResult($result): void
    public function setOutputCallback(callable $callback): void
    public function getTestResultObject(): ?TestResult
    public function setTestResultObject(TestResult $result): void
    public function registerMockObject(MockObject $mockObject): void
    public function addToAssertionCount(int $count): void
    public function getNumAssertions(): int
    public function usesDataProvider(): bool
    public function dataName()
    public function getDataSetAsString(bool $includeData = true): string
    public function getProvidedData(): array
    public function addWarning(string $warning): void
    public function sortId(): string
    $id = static::class . '::' . $id;
    public function provides(): array
    public function requires(): array
    protected function runTest()
    * This method is a wrapper for the ini_set() function that automatically
    protected function iniSet(string $varName, string $newValue): void
    * This method is a wrapper for the setlocale() function that automatically
    protected function setLocale(...$args): void
    protected function createStub(string $originalClassName): Stub
    protected function createMock(string $originalClassName): MockObject
    protected function createConfiguredMock(string $originalClassName, array $configuration): MockObject
    protected function createPartialMock(string $originalClassName, array $methods): MockObject
    static function (string $method) use ($reflector)
    protected function createTestProxy(string $originalClassName, array $constructorArguments = []): MockObject
    * Mocks the specified class and returns the name of the mocked class.
    protected function getMockClass(string $originalClassName, $methods = [], array $arguments = [], string $mockClassName = '', bool $callOriginalConstructor = false, bool $callOriginalClone = true, bool $callAutoload = true, bool $cloneArguments = false): string
    * Returns a mock object for the specified abstract class with all abstract
    * methods of the class mocked. Concrete methods are not mocked by default.
    protected function getMockForAbstractClass(string $originalClassName, array $arguments = [], string $mockClassName = '', bool $callOriginalConstructor = true, bool $callOriginalClone = true, bool $callAutoload = true, array $mockedMethods = [], bool $cloneArguments = false): MockObject
    protected function getMockFromWsdl(string $wsdlFile, string $originalClassName = '', string $mockClassName = '', array $methods = [], bool $callOriginalConstructor = true, array $options = []): MockObject
    protected function getMockForTrait(string $traitName, array $arguments = [], string $mockClassName = '', bool $callOriginalConstructor = true, bool $callOriginalClone = true, bool $callAutoload = true, array $mockedMethods = [], bool $cloneArguments = false): MockObject
    protected function getObjectForTrait(string $traitName, array $arguments = [], string $traitClassName = '', bool $callOriginalConstructor = true, bool $callOriginalClone = true, bool $callAutoload = true): object
    protected function prophesize(?string $classOrInterface = null): ObjectProphecy
    protected function createResult(): TestResult
    protected function onNotSuccessfulTest(Throwable $t): void
    protected function recordDoubledType(string $originalClassName): void
    private function verifyMockObjects(): void
    private function checkRequirements(): void
    private function handleDependencies(): bool
    private function markSkippedForNotSpecifyingDependency(): void
    private function markSkippedForMissingDependency(ExecutionOrderDependency $dependency): void
    private function markWarningForUncallableDependency(ExecutionOrderDependency $dependency): void
    private function getMockObjectGenerator(): MockGenerator
    private function startOutputBuffering(): void
    private function stopOutputBuffering(): void
    private function snapshotGlobalState(): void
    private function restoreGlobalState(): void
    private function createGlobalStateSnapshot(bool $backupGlobals): Snapshot
    foreach ($this->backupStaticAttributesExcludeList as $class => $attributes) {
    foreach ($this->backupStaticAttributesBlacklist as $class => $attributes) {
    private function compareGlobalStateSnapshots(Snapshot $before, Snapshot $after): void
    private function compareGlobalStateSnapshotPart(array $before, array $after, string $header): void
    private function getProphet(): Prophet
    private function shouldInvocationMockerBeReset(MockObject $mock): bool
    private function registerMockObjectsFromTestArguments(array $testArguments, array &$visited = []): void
    private function setDoesNotPerformAssertionsFromAnnotation(): void
    private function unregisterCustomComparators(): void
    private function cleanupIniSettings(): void
    private function cleanupLocaleSettings(): void
    private function checkExceptionExpectations(Throwable $throwable): bool
    private function runInSeparateProcess(): bool
    private function isCallableTestMethod(string $dependency): bool
    $class = new ReflectionClass($className);
    private function createMockObject(string $originalClassName): MockObject
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/TestFailure.php
    use function get_class;
    use function sprintf;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestFailure
    public static function exceptionToString(Throwable $e): string
    public function __construct(Test $failedTest, Throwable $t)
    public function toString(): string
    public function getExceptionAsString(): string
    public function getTestName(): string
    public function failedTest(): ?Test
    public function thrownException(): Throwable
    public function exceptionMessage(): string
    public function isFailure(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/TestListener.php
    public function addError(Test $test, Throwable $t, float $time): void;
    public function addWarning(Test $test, Warning $e, float $time): void;
    public function addFailure(Test $test, AssertionFailedError $e, float $time): void;
    public function addIncompleteTest(Test $test, Throwable $t, float $time): void;
    public function addRiskyTest(Test $test, Throwable $t, float $time): void;
    public function addSkippedTest(Test $test, Throwable $t, float $time): void;
    public function startTestSuite(TestSuite $suite): void;
    public function endTestSuite(TestSuite $suite): void;
    public function startTest(Test $test): void;
    public function endTest(Test $test, float $time): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/TestListenerDefaultImplementation.php
    public function addError(Test $test, Throwable $t, float $time): void
    public function addWarning(Test $test, Warning $e, float $time): void
    public function addFailure(Test $test, AssertionFailedError $e, float $time): void
    public function addIncompleteTest(Test $test, Throwable $t, float $time): void
    public function addRiskyTest(Test $test, Throwable $t, float $time): void
    public function addSkippedTest(Test $test, Throwable $t, float $time): void
    public function startTestSuite(TestSuite $suite): void
    public function endTestSuite(TestSuite $suite): void
    public function startTest(Test $test): void
    public function endTest(Test $test, float $time): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/TestResult.php
    use function class_exists;
    use function count;
    use function extension_loaded;
    use function function_exists;
    use function get_class;
    use function sprintf;
    use function xdebug_get_monitored_functions;
    use function xdebug_is_debugger_active;
    use function xdebug_start_function_monitor;
    use function xdebug_stop_function_monitor;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestResult implements Countable
    public function addListener(TestListener $listener): void
    public function removeListener(TestListener $listener): void
    public function flushListeners(): void
    public function addError(Test $test, Throwable $t, float $time): void
    public function addWarning(Test $test, Warning $e, float $time): void
    public function addFailure(Test $test, AssertionFailedError $e, float $time): void
    public function startTestSuite(TestSuite $suite): void
    public function endTestSuite(TestSuite $suite): void
    public function startTest(Test $test): void
    public function endTest(Test $test, float $time): void
    $class = get_class($test);
    $key   = $class . '::' . $test->getName();
    public function allHarmless(): bool
    public function riskyCount(): int
    public function allCompletelyImplemented(): bool
    public function notImplementedCount(): int
    public function risky(): array
    public function notImplemented(): array
    public function noneSkipped(): bool
    public function skippedCount(): int
    public function skipped(): array
    public function errorCount(): int
    public function errors(): array
    public function failureCount(): int
    public function failures(): array
    public function warningCount(): int
    public function warnings(): array
    public function passed(): array
    public function passedClasses(): array
    public function getCollectCodeCoverageInformation(): bool
    public function run(Test $test): void
    public function count(): int
    public function shouldStop(): bool
    public function stop(): void
    public function getCodeCoverage(): ?CodeCoverage
    public function setCodeCoverage(CodeCoverage $codeCoverage): void
    public function convertDeprecationsToExceptions(bool $flag): void
    public function getConvertDeprecationsToExceptions(): bool
    public function convertErrorsToExceptions(bool $flag): void
    public function getConvertErrorsToExceptions(): bool
    public function convertNoticesToExceptions(bool $flag): void
    public function getConvertNoticesToExceptions(): bool
    public function convertWarningsToExceptions(bool $flag): void
    public function getConvertWarningsToExceptions(): bool
    public function stopOnError(bool $flag): void
    public function stopOnFailure(bool $flag): void
    public function stopOnWarning(bool $flag): void
    public function beStrictAboutTestsThatDoNotTestAnything(bool $flag): void
    public function isStrictAboutTestsThatDoNotTestAnything(): bool
    public function beStrictAboutOutputDuringTests(bool $flag): void
    public function isStrictAboutOutputDuringTests(): bool
    public function beStrictAboutResourceUsageDuringSmallTests(bool $flag): void
    public function isStrictAboutResourceUsageDuringSmallTests(): bool
    public function enforceTimeLimit(bool $flag): void
    public function enforcesTimeLimit(): bool
    public function beStrictAboutTodoAnnotatedTests(bool $flag): void
    public function isStrictAboutTodoAnnotatedTests(): bool
    public function forceCoversAnnotation(): void
    public function forcesCoversAnnotation(): bool
    public function stopOnRisky(bool $flag): void
    public function stopOnIncomplete(bool $flag): void
    public function stopOnSkipped(bool $flag): void
    public function stopOnDefect(bool $flag): void
    public function time(): float
    public function wasSuccessful(): bool
    public function wasSuccessfulIgnoringWarnings(): bool
    public function wasSuccessfulAndNoTestIsRiskyOrSkippedOrIncomplete(): bool
    public function setDefaultTimeLimit(int $timeout): void
    public function setTimeoutForSmallTests(int $timeout): void
    public function setTimeoutForMediumTests(int $timeout): void
    public function setTimeoutForLargeTests(int $timeout): void
    public function getTimeoutForLargeTests(): int
    public function setRegisterMockObjectsFromTestArgumentsRecursively(bool $flag): void
    private function recordError(Test $test, Throwable $t): void
    private function recordNotImplemented(Test $test, Throwable $t): void
    private function recordRisky(Test $test, Throwable $t): void
    private function recordSkipped(Test $test, Throwable $t): void
    private function recordWarning(Test $test, Throwable $t): void
    private function shouldTimeLimitBeEnforced(int $size): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/TestSuite.php
    use function array_keys;
    use function array_map;
    use function array_merge;
    use function array_slice;
    use function array_unique;
    use function basename;
    use function call_user_func;
    use function class_exists;
    use function count;
    use function dirname;
    use function get_declared_classes;
    use function implode;
    use function is_bool;
    use function is_callable;
    use function is_file;
    use function is_object;
    use function is_string;
    use function method_exists;
    use function preg_match;
    use function preg_quote;
    use function sprintf;
    use function strpos;
    use function substr;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    class TestSuite implements IteratorAggregate, Reorderable, SelfDescribing, Test
    *     constructs a TestSuite from the given class with the given
    *     TestSuite from the given class (if the passed string is the
    public function __construct($theClass = '', string $name = '')
    'No tests found in class "%s".',
    public function toString(): string
    public function addTest(Test $test, $groups = []): void
    $class = new ReflectionClass($test);
    * Adds the tests from the given class to the suite.
    public function addTestSuite($testClass): void
    'class name or object',
    public function addWarning(string $warning): void
    public function addTestFile(string $filename): void
    // test class itself. Figure out the actual test class.
    // The diff is empty in case a parent class (with test methods) is added
    // AFTER a child class that inherited from it. To account for that case,
    // accumulate all discovered classes, so the parent class may be found in
    $class = new ReflectionClass($className);
    $class = new ReflectionClass($className);
    "Test case class not matching filename is deprecated\n               in %s\n               Class name was '%s', expected '%s'",
    public function addTestFiles(iterable $fileNames): void
    public function count(): int
    public function getName(): string
    public function getGroups(): array
    static function ($key): string
    public function getGroupDetails(): array
    public function setGroupDetails(array $groups): void
    public function run(?TestResult $result = null): TestResult
    public function setRunTestInSeparateProcess(bool $runTestInSeparateProcess): void
    public function setName(string $name): void
    public function tests(): array
    public function setTests(array $tests): void
    public function markTestSuiteSkipped($message = ''): void
    public function setBeStrictAboutChangesToGlobalState($beStrictAboutChangesToGlobalState): void
    public function setBackupGlobals($backupGlobals): void
    public function setBackupStaticAttributes($backupStaticAttributes): void
    public function getIterator(): Iterator
    public function injectFilter(Factory $filter): void
    public function warnings(): array
    public function provides(): array
    public function requires(): array
    public function sortId(): string
    protected function createResult(): TestResult
    protected function addTestMethod(ReflectionClass $class, ReflectionMethod $method): void
    private function clearCaches(): void
    private function containsOnlyVirtualGroups(array $groups): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/TestSuiteIterator.php
    use function assert;
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestSuiteIterator implements RecursiveIterator
    public function __construct(TestSuite $testSuite)
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): Test
    public function next(): void
    public function getChildren(): self
    public function hasChildren(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Framework/WarningTestCase.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class WarningTestCase extends TestCase
    public function __construct(string $message = '')
    public function getMessage(): string
    public function toString(): string
    protected function runTest(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/BaseTestRunner.php
    use function is_dir;
    use function is_file;
    use function substr;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    abstract class BaseTestRunner
    public function getLoader(): TestSuiteLoader
    public function getTest(string $suiteClassFile, $suffixes = ''): ?TestSuite
    protected function loadSuiteClass(string $suiteClassFile): ReflectionClass
    protected function clearStatus(): void
    abstract protected function runFailed(string $message): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/DefaultTestResultCache.php
    use function assert;
    use function dirname;
    use function file_get_contents;
    use function file_put_contents;
    use function in_array;
    use function is_array;
    use function is_dir;
    use function is_file;
    use function json_decode;
    use function json_encode;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class DefaultTestResultCache implements TestResultCache
    public function __construct(?string $filepath = null)
    public function setState(string $testName, int $state): void
    public function getState(string $testName): int
    public function setTime(string $testName, float $time): void
    public function getTime(string $testName): float
    public function load(): void
    public function persist(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Exception.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Exception extends RuntimeException implements \PHPUnit\Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Extension/ExtensionHandler.php
    use function class_exists;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ExtensionHandler
    public function registerExtension(Extension $extensionConfiguration, TestRunner $runner): void
    public function createTestListenerInstance(Extension $listenerConfiguration): TestListener
    private function createInstance(Extension $extensionConfiguration): object
    private function ensureClassExists(Extension $extensionConfiguration): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Extension/PharLoader.php
    use function count;
    use function explode;
    use function implode;
    use function is_file;
    use function strpos;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class PharLoader
    public function loadPharExtensionsInDirectory(string $directory): array
    private function phpunitVersion(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Filter/ExcludeGroupFilterIterator.php
    use function in_array;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ExcludeGroupFilterIterator extends GroupFilterIterator
    protected function doAccept(string $hash): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Filter/Factory.php
    use function assert;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Factory
    public function addFilter(ReflectionClass $filter, $args): void
    public function factory(Iterator $iterator, TestSuite $suite): FilterIterator
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Filter/GroupFilterIterator.php
    use function array_map;
    use function array_merge;
    use function in_array;
    use function spl_object_hash;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    abstract class GroupFilterIterator extends RecursiveFilterIterator
    public function __construct(RecursiveIterator $iterator, array $groups, TestSuite $suite)
    public function accept(): bool
    abstract protected function doAccept(string $hash);
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Filter/IncludeGroupFilterIterator.php
    use function in_array;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class IncludeGroupFilterIterator extends GroupFilterIterator
    protected function doAccept(string $hash): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Filter/NameFilterIterator.php
    use function end;
    use function implode;
    use function preg_match;
    use function sprintf;
    use function str_replace;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class NameFilterIterator extends RecursiveFilterIterator
    public function __construct(RecursiveIterator $iterator, string $filter)
    public function accept(): bool
    private function setFilter(string $filter): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/AfterIncompleteTestHook.php
    public function executeAfterIncompleteTest(string $test, string $message, float $time): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/AfterLastTestHook.php
    public function executeAfterLastTest(): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/AfterRiskyTestHook.php
    public function executeAfterRiskyTest(string $test, string $message, float $time): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/AfterSkippedTestHook.php
    public function executeAfterSkippedTest(string $test, string $message, float $time): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/AfterSuccessfulTestHook.php
    public function executeAfterSuccessfulTest(string $test, float $time): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/AfterTestErrorHook.php
    public function executeAfterTestError(string $test, string $message, float $time): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/AfterTestFailureHook.php
    public function executeAfterTestFailure(string $test, string $message, float $time): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/AfterTestHook.php
    public function executeAfterTest(string $test, float $time): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/AfterTestWarningHook.php
    public function executeAfterTestWarning(string $test, string $message, float $time): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/BeforeFirstTestHook.php
    public function executeBeforeFirstTest(): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/BeforeTestHook.php
    public function executeBeforeTest(string $test): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/Hook.php
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/TestHook.php
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Hook/TestListenerAdapter.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestListenerAdapter implements TestListener
    public function add(TestHook $hook): void
    public function startTest(Test $test): void
    public function addError(Test $test, Throwable $t, float $time): void
    public function addWarning(Test $test, Warning $e, float $time): void
    public function addFailure(Test $test, AssertionFailedError $e, float $time): void
    public function addIncompleteTest(Test $test, Throwable $t, float $time): void
    public function addRiskyTest(Test $test, Throwable $t, float $time): void
    public function addSkippedTest(Test $test, Throwable $t, float $time): void
    public function endTest(Test $test, float $time): void
    public function startTestSuite(TestSuite $suite): void
    public function endTestSuite(TestSuite $suite): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/NullTestResultCache.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class NullTestResultCache implements TestResultCache
    public function setState(string $testName, int $state): void
    public function getState(string $testName): int
    public function setTime(string $testName, float $time): void
    public function getTime(string $testName): float
    public function load(): void
    public function persist(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/PhptTestCase.php
    use function array_merge;
    use function basename;
    use function debug_backtrace;
    use function defined;
    use function dirname;
    use function explode;
    use function extension_loaded;
    use function file;
    use function file_get_contents;
    use function file_put_contents;
    use function is_array;
    use function is_file;
    use function is_readable;
    use function is_string;
    use function ltrim;
    use function phpversion;
    use function preg_match;
    use function preg_replace;
    use function preg_split;
    use function realpath;
    use function rtrim;
    use function sprintf;
    use function str_replace;
    use function strncasecmp;
    use function strpos;
    use function substr;
    use function trim;
    use function unlink;
    use function unserialize;
    use function var_export;
    use function version_compare;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class PhptTestCase implements Reorderable, SelfDescribing, Test
    public function __construct(string $filename, ?AbstractPhpProcess $phpUtil = null)
    public function count(): int
    public function run(?TestResult $result = null): TestResult
    public function getName(): string
    public function toString(): string
    public function usesDataProvider(): bool
    public function getNumAssertions(): int
    public function getActualOutput(): string
    public function hasOutput(): bool
    public function sortId(): string
    public function provides(): array
    public function requires(): array
    private function parseIniSection($content, array $ini = []): array
    private function parseEnvSection(string $content): array
    private function assertPhptExpectation(array $sections, string $output): void
    private function runSkip(array &$sections, TestResult $result, array $settings): bool
    private function runClean(array &$sections, bool $collectCoverage): void
    private function parse(): array
    private function parseExternal(array &$sections): void
    private function validate(array &$sections): bool
    private function render(string $code): string
    private function getCoverageFiles(): array
    private function renderForCoverage(string &$job, bool $pathCoverage, ?string $codeCoverageCacheDirectory): void
    private function cleanupForCoverage(): RawCodeCoverageData
    private function stringifyIni(array $ini): array
    private function getLocationHintFromDiff(string $message, array $sections): array
    private function getCleanDiffLine(string $line): string
    private function getLocationHint(string $needle, array $sections, ?string $sectionName = null): array
    private function settings(bool $collectCoverage): array
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/ResultCacheExtension.php
    use function preg_match;
    use function round;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ResultCacheExtension implements AfterIncompleteTestHook, AfterLastTestHook, AfterRiskyTestHook, AfterSkippedTestHook, AfterSuccessfulTestHook, AfterTestErrorHook, AfterTestFailureHook, AfterTestWarningHook
    public function __construct(TestResultCache $cache)
    public function flush(): void
    public function executeAfterSuccessfulTest(string $test, float $time): void
    public function executeAfterIncompleteTest(string $test, string $message, float $time): void
    public function executeAfterRiskyTest(string $test, string $message, float $time): void
    public function executeAfterSkippedTest(string $test, string $message, float $time): void
    public function executeAfterTestError(string $test, string $message, float $time): void
    public function executeAfterTestFailure(string $test, string $message, float $time): void
    public function executeAfterTestWarning(string $test, string $message, float $time): void
    public function executeAfterLastTest(): void
    private function getTestName(string $test): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/StandardTestSuiteLoader.php
    use function array_diff;
    use function array_values;
    use function basename;
    use function class_exists;
    use function get_declared_classes;
    use function sprintf;
    use function stripos;
    use function strlen;
    use function substr;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class StandardTestSuiteLoader implements TestSuiteLoader
    public function load(string $suiteClassFile): ReflectionClass
    $class = new ReflectionClass($suiteClassName);
    public function reload(ReflectionClass $aClass): ReflectionClass
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/TestResultCache.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    public function setState(string $testName, int $state): void;
    public function getState(string $testName): int;
    public function setTime(string $testName, float $time): void;
    public function getTime(string $testName): float;
    public function load(): void;
    public function persist(): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/TestSuiteLoader.php
    public function load(string $suiteClassFile): ReflectionClass;
    public function reload(ReflectionClass $aClass): ReflectionClass;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/TestSuiteSorter.php
    use function array_diff;
    use function array_merge;
    use function array_reverse;
    use function array_splice;
    use function count;
    use function in_array;
    use function max;
    use function shuffle;
    use function usort;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestSuiteSorter
    public function __construct(?TestResultCache $cache = null)
    public function reorderTestsInSuite(Test $suite, int $order, bool $resolveDependencies, int $orderDefects, bool $isRootTestSuite = true): void
    public function getOriginalExecutionOrder(): array
    public function getExecutionOrder(): array
    private function sort(TestSuite $suite, int $order, bool $resolveDependencies, int $orderDefects): void
    private function addSuiteToDefectSortOrder(TestSuite $suite): void
    private function reverse(array $tests): array
    private function randomize(array $tests): array
    private function sortDefectsFirst(array $tests): array
    function ($left, $right)
    private function sortByDuration(array $tests): array
    function ($left, $right)
    private function sortBySize(array $tests): array
    function ($left, $right)
    * Comparator callback function to sort tests for "reach failure as fast as possible".
    private function cmpDefectPriorityAndTime(Test $a, Test $b): int
    private function cmpDuration(Test $a, Test $b): int
    private function cmpSize(Test $a, Test $b): int
    private function resolveDependencies(array $tests): array
    private function calculateTestExecutionOrder(Test $suite): array
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Runner/Version.php
    use function array_slice;
    use function assert;
    use function dirname;
    use function explode;
    use function implode;
    use function strpos;
    final class Version
    public static function id(): string
    public static function series(): string
    public static function getVersionString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/CliArguments/Builder.php
    use function array_map;
    use function array_merge;
    use function class_exists;
    use function explode;
    use function is_numeric;
    use function str_replace;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Builder
    public function fromParameters(array $parameters, array $additionalLongOptions): Configuration
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/CliArguments/Configuration.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Configuration
    public function __construct(?string $argument, ?string $atLeastVersion, ?bool $backupGlobals, ?bool $backupStaticAttributes, ?bool $beStrictAboutChangesToGlobalState, ?bool $beStrictAboutResourceUsageDuringSmallTests, ?string $bootstrap, ?bool $cacheResult, ?string $cacheResultFile, ?bool $checkVersion, ?string $colors, $columns, ?string $configuration, ?string $coverageClover, ?string $coverageCobertura, ?string $coverageCrap4J, ?string $coverageHtml, ?string $coveragePhp, ?string $coverageText, ?bool $coverageTextShowUncoveredFiles, ?bool $coverageTextShowOnlySummary, ?string $coverageXml, ?bool $pathCoverage, ?string $coverageCacheDirectory, ?bool $warmCoverageCache, ?bool $debug, ?int $defaultTimeLimit, ?bool $disableCodeCoverageIgnore, ?bool $disallowTestOutput, ?bool $disallowTodoAnnotatedTests, ?bool $enforceTimeLimit, ?array $excludeGroups, ?int $executionOrder, ?int $executionOrderDefects, ?array $extensions, ?array $unavailableExtensions, ?bool $failOnEmptyTestSuite, ?bool $failOnIncomplete, ?bool $failOnRisky, ?bool $failOnSkipped, ?bool $failOnWarning, ?string $filter, ?bool $generateConfiguration, ?bool $migrateConfiguration, ?array $groups, ?array $testsCovering, ?array $testsUsing, ?bool $help, ?string $includePath, ?array $iniSettings, ?string $junitLogfile, ?bool $listGroups, ?bool $listSuites, ?bool $listTests, ?string $listTestsXml, ?string $loader, ?bool $noCoverage, ?bool $noExtensions, ?bool $noInteraction, ?bool $noLogging, ?string $printer, ?bool $processIsolation, ?int $randomOrderSeed, ?int $repeat, ?bool $reportUselessTests, ?bool $resolveDependencies, ?bool $reverseList, ?bool $stderr, ?bool $strictCoverage, ?bool $stopOnDefect, ?bool $stopOnError, ?bool $stopOnFailure, ?bool $stopOnIncomplete, ?bool $stopOnRisky, ?bool $stopOnSkipped, ?bool $stopOnWarning, ?string $teamcityLogfile, ?array $testdoxExcludeGroups, ?array $testdoxGroups, ?string $testdoxHtmlFile, ?string $testdoxTextFile, ?string $testdoxXmlFile, ?array $testSuffixes, ?string $testSuite, array $unrecognizedOptions, ?string $unrecognizedOrderBy, ?bool $useDefaultConfiguration, ?bool $verbose, ?bool $version, ?array $coverageFilter, ?string $xdebugFilterFile)
    public function hasArgument(): bool
    public function argument(): string
    public function hasAtLeastVersion(): bool
    public function atLeastVersion(): string
    public function hasBackupGlobals(): bool
    public function backupGlobals(): bool
    public function hasBackupStaticAttributes(): bool
    public function backupStaticAttributes(): bool
    public function hasBeStrictAboutChangesToGlobalState(): bool
    public function beStrictAboutChangesToGlobalState(): bool
    public function hasBeStrictAboutResourceUsageDuringSmallTests(): bool
    public function beStrictAboutResourceUsageDuringSmallTests(): bool
    public function hasBootstrap(): bool
    public function bootstrap(): string
    public function hasCacheResult(): bool
    public function cacheResult(): bool
    public function hasCacheResultFile(): bool
    public function cacheResultFile(): string
    public function hasCheckVersion(): bool
    public function checkVersion(): bool
    public function hasColors(): bool
    public function colors(): string
    public function hasColumns(): bool
    public function columns()
    public function hasConfiguration(): bool
    public function configuration(): string
    public function hasCoverageFilter(): bool
    public function coverageFilter(): array
    public function hasCoverageClover(): bool
    public function coverageClover(): string
    public function hasCoverageCobertura(): bool
    public function coverageCobertura(): string
    public function hasCoverageCrap4J(): bool
    public function coverageCrap4J(): string
    public function hasCoverageHtml(): bool
    public function coverageHtml(): string
    public function hasCoveragePhp(): bool
    public function coveragePhp(): string
    public function hasCoverageText(): bool
    public function coverageText(): string
    public function hasCoverageTextShowUncoveredFiles(): bool
    public function coverageTextShowUncoveredFiles(): bool
    public function hasCoverageTextShowOnlySummary(): bool
    public function coverageTextShowOnlySummary(): bool
    public function hasCoverageXml(): bool
    public function coverageXml(): string
    public function hasPathCoverage(): bool
    public function pathCoverage(): bool
    public function hasCoverageCacheDirectory(): bool
    public function coverageCacheDirectory(): string
    public function hasWarmCoverageCache(): bool
    public function warmCoverageCache(): bool
    public function hasDebug(): bool
    public function debug(): bool
    public function hasDefaultTimeLimit(): bool
    public function defaultTimeLimit(): int
    public function hasDisableCodeCoverageIgnore(): bool
    public function disableCodeCoverageIgnore(): bool
    public function hasDisallowTestOutput(): bool
    public function disallowTestOutput(): bool
    public function hasDisallowTodoAnnotatedTests(): bool
    public function disallowTodoAnnotatedTests(): bool
    public function hasEnforceTimeLimit(): bool
    public function enforceTimeLimit(): bool
    public function hasExcludeGroups(): bool
    public function excludeGroups(): array
    public function hasExecutionOrder(): bool
    public function executionOrder(): int
    public function hasExecutionOrderDefects(): bool
    public function executionOrderDefects(): int
    public function hasFailOnEmptyTestSuite(): bool
    public function failOnEmptyTestSuite(): bool
    public function hasFailOnIncomplete(): bool
    public function failOnIncomplete(): bool
    public function hasFailOnRisky(): bool
    public function failOnRisky(): bool
    public function hasFailOnSkipped(): bool
    public function failOnSkipped(): bool
    public function hasFailOnWarning(): bool
    public function failOnWarning(): bool
    public function hasFilter(): bool
    public function filter(): string
    public function hasGenerateConfiguration(): bool
    public function generateConfiguration(): bool
    public function hasMigrateConfiguration(): bool
    public function migrateConfiguration(): bool
    public function hasGroups(): bool
    public function groups(): array
    public function hasTestsCovering(): bool
    public function testsCovering(): array
    public function hasTestsUsing(): bool
    public function testsUsing(): array
    public function hasHelp(): bool
    public function help(): bool
    public function hasIncludePath(): bool
    public function includePath(): string
    public function hasIniSettings(): bool
    public function iniSettings(): array
    public function hasJunitLogfile(): bool
    public function junitLogfile(): string
    public function hasListGroups(): bool
    public function listGroups(): bool
    public function hasListSuites(): bool
    public function listSuites(): bool
    public function hasListTests(): bool
    public function listTests(): bool
    public function hasListTestsXml(): bool
    public function listTestsXml(): string
    public function hasLoader(): bool
    public function loader(): string
    public function hasNoCoverage(): bool
    public function noCoverage(): bool
    public function hasNoExtensions(): bool
    public function noExtensions(): bool
    public function hasExtensions(): bool
    public function extensions(): array
    public function hasUnavailableExtensions(): bool
    public function unavailableExtensions(): array
    public function hasNoInteraction(): bool
    public function noInteraction(): bool
    public function hasNoLogging(): bool
    public function noLogging(): bool
    public function hasPrinter(): bool
    public function printer(): string
    public function hasProcessIsolation(): bool
    public function processIsolation(): bool
    public function hasRandomOrderSeed(): bool
    public function randomOrderSeed(): int
    public function hasRepeat(): bool
    public function repeat(): int
    public function hasReportUselessTests(): bool
    public function reportUselessTests(): bool
    public function hasResolveDependencies(): bool
    public function resolveDependencies(): bool
    public function hasReverseList(): bool
    public function reverseList(): bool
    public function hasStderr(): bool
    public function stderr(): bool
    public function hasStrictCoverage(): bool
    public function strictCoverage(): bool
    public function hasStopOnDefect(): bool
    public function stopOnDefect(): bool
    public function hasStopOnError(): bool
    public function stopOnError(): bool
    public function hasStopOnFailure(): bool
    public function stopOnFailure(): bool
    public function hasStopOnIncomplete(): bool
    public function stopOnIncomplete(): bool
    public function hasStopOnRisky(): bool
    public function stopOnRisky(): bool
    public function hasStopOnSkipped(): bool
    public function stopOnSkipped(): bool
    public function hasStopOnWarning(): bool
    public function stopOnWarning(): bool
    public function hasTeamcityLogfile(): bool
    public function teamcityLogfile(): string
    public function hasTestdoxExcludeGroups(): bool
    public function testdoxExcludeGroups(): array
    public function hasTestdoxGroups(): bool
    public function testdoxGroups(): array
    public function hasTestdoxHtmlFile(): bool
    public function testdoxHtmlFile(): string
    public function hasTestdoxTextFile(): bool
    public function testdoxTextFile(): string
    public function hasTestdoxXmlFile(): bool
    public function testdoxXmlFile(): string
    public function hasTestSuffixes(): bool
    public function testSuffixes(): array
    public function hasTestSuite(): bool
    public function testSuite(): string
    public function unrecognizedOptions(): array
    public function hasUnrecognizedOrderBy(): bool
    public function unrecognizedOrderBy(): string
    public function hasUseDefaultConfiguration(): bool
    public function useDefaultConfiguration(): bool
    public function hasVerbose(): bool
    public function verbose(): bool
    public function hasVersion(): bool
    public function version(): bool
    public function hasXdebugFilterFile(): bool
    public function xdebugFilterFile(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/CliArguments/Exception.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Exception extends RuntimeException implements \PHPUnit\Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/CliArguments/Mapper.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Mapper
    public function mapToLegacyArray(Configuration $arguments): array
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/Command.php
    use function array_keys;
    use function assert;
    use function class_exists;
    use function copy;
    use function explode;
    use function extension_loaded;
    use function fgets;
    use function file_get_contents;
    use function file_put_contents;
    use function get_class;
    use function getcwd;
    use function ini_get;
    use function ini_set;
    use function is_array;
    use function is_callable;
    use function is_dir;
    use function is_file;
    use function is_string;
    use function printf;
    use function realpath;
    use function sort;
    use function sprintf;
    use function stream_resolve_include_path;
    use function strpos;
    use function trim;
    use function version_compare;
    class Command
    public static function main(bool $exit = true): int
    public function run(array $argv, bool $exit = true): int
    protected function createRunner(): TestRunner
    * A child class of PHPUnit\TextUI\Command can hook into the argument
    * callback method that handles the switch(es) in the child class like this
    * class MyCommand extends PHPUnit\TextUI\Command
    *     public function __construct()
    *     protected function myHandler()
    *     protected function myOtherHandler ($value)
    *     public static function main($exit = true)
    protected function handleArguments(array $argv): void
    protected function handleLoader(string $loaderClass, string $loaderFile = ''): ?TestSuiteLoader
    $class = new ReflectionClass($loaderClass);
    protected function handlePrinter(string $printerClass, string $printerFile = '')
    'Could not use "%s" as printer: class does not exist',
    $class = new ReflectionClass($printerClass);
    'Could not use "%s" as printer: class does not implement %s',
    'Could not use "%s" as printer: class cannot be instantiated',
    protected function handleBootstrap(string $filename): void
    protected function handleVersionCheck(): void
    protected function showHelp(): void
    protected function handleCustomTestSuite(): void
    private function printVersionString(): void
    private function exitWithErrorMessage(string $message): void
    private function handleListGroups(TestSuite $suite, bool $exit): int
    private function handleListSuites(bool $exit): int
    private function handleListTests(TestSuite $suite, bool $exit): int
    private function handleListTestsXml(TestSuite $suite, string $target, bool $exit): int
    private function generateConfiguration(): void
    private function migrateConfiguration(string $filename): void
    private function handleCustomOptions(array $unrecognizedOptions): void
    private function handleWarmCoverageCache(XmlConfiguration\Configuration $configuration): void
    private function configurationFileInDirectory(string $directory): ?string
    private function warnAboutConflictingOptions(string $key, array $keys): void
    private function mapKeyToOptionForWarning(string $key): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/DefaultResultPrinter.php
    use function array_map;
    use function array_reverse;
    use function count;
    use function floor;
    use function implode;
    use function in_array;
    use function is_int;
    use function max;
    use function preg_split;
    use function sprintf;
    use function str_pad;
    use function str_repeat;
    use function strlen;
    use function trim;
    use function vsprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    class DefaultResultPrinter extends Printer implements ResultPrinter
    public function __construct($out = null, bool $verbose = false, string $colors = self::COLOR_DEFAULT, bool $debug = false, $numberOfColumns = 80, bool $reverse = false)
    public function printResult(TestResult $result): void
    public function addError(Test $test, Throwable $t, float $time): void
    public function addFailure(Test $test, AssertionFailedError $e, float $time): void
    public function addWarning(Test $test, Warning $e, float $time): void
    public function addIncompleteTest(Test $test, Throwable $t, float $time): void
    public function addRiskyTest(Test $test, Throwable $t, float $time): void
    public function addSkippedTest(Test $test, Throwable $t, float $time): void
    public function startTestSuite(TestSuite $suite): void
    public function endTestSuite(TestSuite $suite): void
    public function startTest(Test $test): void
    public function endTest(Test $test, float $time): void
    protected function printDefects(array $defects, string $type): void
    protected function printDefect(TestFailure $defect, int $count): void
    protected function printDefectHeader(TestFailure $defect, int $count): void
    protected function printDefectTrace(TestFailure $defect): void
    protected function printErrors(TestResult $result): void
    protected function printFailures(TestResult $result): void
    protected function printWarnings(TestResult $result): void
    protected function printIncompletes(TestResult $result): void
    protected function printRisky(TestResult $result): void
    protected function printSkipped(TestResult $result): void
    protected function printHeader(TestResult $result): void
    protected function printFooter(TestResult $result): void
    protected function writeProgress(string $progress): void
    protected function writeNewLine(): void
    protected function colorizeTextBox(string $color, string $buffer): string
    protected function writeWithColor(string $color, string $buffer, bool $lf = true): void
    protected function writeProgressWithColor(string $color, string $buffer): void
    private function writeCountString(int $count, string $name, string $color, bool $always = false): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/Exception/Exception.php
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/Exception/ReflectionException.php
    final class ReflectionException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/Exception/RuntimeException.php
    final class RuntimeException extends \RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/Exception/TestDirectoryNotFoundException.php
    use function sprintf;
    final class TestDirectoryNotFoundException extends RuntimeException implements Exception
    public function __construct(string $path)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/Exception/TestFileNotFoundException.php
    use function sprintf;
    final class TestFileNotFoundException extends RuntimeException implements Exception
    public function __construct(string $path)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/Help.php
    use function count;
    use function defined;
    use function explode;
    use function max;
    use function preg_replace_callback;
    use function str_pad;
    use function str_repeat;
    use function strlen;
    use function wordwrap;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Help
    public function __construct(?int $width = null, ?bool $withColor = null)
    public function writeToConsole(): void
    private function writePlaintext(): void
    private function writeWithColor(): void
    static function ($matches)
    private function elements(): array
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/ResultPrinter.php
    public function printResult(TestResult $result): void;
    public function write(string $buffer): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/TestRunner.php
    use function array_diff;
    use function array_map;
    use function array_merge;
    use function assert;
    use function class_exists;
    use function count;
    use function dirname;
    use function file_put_contents;
    use function htmlspecialchars;
    use function is_array;
    use function is_int;
    use function is_string;
    use function mt_srand;
    use function range;
    use function realpath;
    use function sort;
    use function sprintf;
    use function time;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestRunner extends BaseTestRunner
    public function __construct(?TestSuiteLoader $loader = null, ?CodeCoverageFilter $filter = null)
    public function run(TestSuite $suite, array $arguments = [], array $warnings = [], bool $exit = true): TestResult
    public function getLoader(): TestSuiteLoader
    public function addExtension(Hook $extension): void
    protected function runFailed(string $message): void
    private function createTestResult(): TestResult
    private function write(string $buffer): void
    private function handleConfiguration(array &$arguments): void
    private function processSuiteFilters(TestSuite $suite, array $arguments): void
    static function (string $name): string
    static function (string $name): string
    private function writeMessage(string $type, string $message): void
    private function createPrinter(string $class, array $arguments): ResultPrinter
    private function codeCoverageGenerationStart(string $format): void
    private function codeCoverageGenerationSucceeded(): void
    private function codeCoverageGenerationFailed(\Exception $e): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/TestSuiteMapper.php
    use function explode;
    use function in_array;
    use function is_dir;
    use function is_file;
    use function strpos;
    use function version_compare;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestSuiteMapper
    public function map(TestSuiteCollection $configuration, string $filter): TestSuiteObject
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/CodeCoverage/CodeCoverage.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class CodeCoverage
    public function __construct(?Directory $cacheDirectory, DirectoryCollection $directories, FileCollection $files, DirectoryCollection $excludeDirectories, FileCollection $excludeFiles, bool $pathCoverage, bool $includeUncoveredFiles, bool $processUncoveredFiles, bool $ignoreDeprecatedCodeUnits, bool $disableCodeCoverageIgnore, ?Clover $clover, ?Cobertura $cobertura, ?Crap4j $crap4j, ?Html $html, ?Php $php, ?Text $text, ?Xml $xml)
    public function hasCacheDirectory(): bool
    public function cacheDirectory(): Directory
    public function hasNonEmptyListOfFilesToBeIncludedInCodeCoverageReport(): bool
    public function directories(): DirectoryCollection
    public function files(): FileCollection
    public function excludeDirectories(): DirectoryCollection
    public function excludeFiles(): FileCollection
    public function pathCoverage(): bool
    public function includeUncoveredFiles(): bool
    public function ignoreDeprecatedCodeUnits(): bool
    public function disableCodeCoverageIgnore(): bool
    public function processUncoveredFiles(): bool
    public function hasClover(): bool
    public function clover(): Clover
    public function hasCobertura(): bool
    public function cobertura(): Cobertura
    public function hasCrap4j(): bool
    public function crap4j(): Crap4j
    public function hasHtml(): bool
    public function html(): Html
    public function hasPhp(): bool
    public function php(): Php
    public function hasText(): bool
    public function text(): Text
    public function hasXml(): bool
    public function xml(): Xml
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/CodeCoverage/Filter/Directory.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Directory
    public function __construct(string $path, string $prefix, string $suffix, string $group)
    public function path(): string
    public function prefix(): string
    public function suffix(): string
    public function group(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/CodeCoverage/Filter/DirectoryCollection.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class DirectoryCollection implements Countable, IteratorAggregate
    public static function fromArray(array $directories): self
    private function __construct(Directory ...$directories)
    public function asArray(): array
    public function count(): int
    public function getIterator(): DirectoryCollectionIterator
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/CodeCoverage/Filter/DirectoryCollectionIterator.php
    use function count;
    use function iterator_count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class DirectoryCollectionIterator implements Countable, Iterator
    public function __construct(DirectoryCollection $directories)
    public function count(): int
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): Directory
    public function next(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/CodeCoverage/FilterMapper.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class FilterMapper
    public function map(Filter $filter, CodeCoverage $configuration): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/CodeCoverage/Report/Clover.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Clover
    public function __construct(File $target)
    public function target(): File
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/CodeCoverage/Report/Cobertura.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Cobertura
    public function __construct(File $target)
    public function target(): File
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/CodeCoverage/Report/Crap4j.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Crap4j
    public function __construct(File $target, int $threshold)
    public function target(): File
    public function threshold(): int
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/CodeCoverage/Report/Html.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Html
    public function __construct(Directory $target, int $lowUpperBound, int $highLowerBound)
    public function target(): Directory
    public function lowUpperBound(): int
    public function highLowerBound(): int
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/CodeCoverage/Report/Php.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Php
    public function __construct(File $target)
    public function target(): File
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/CodeCoverage/Report/Text.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Text
    public function __construct(File $target, bool $showUncoveredFiles, bool $showOnlySummary)
    public function target(): File
    public function showUncoveredFiles(): bool
    public function showOnlySummary(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/CodeCoverage/Report/Xml.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Xml
    public function __construct(Directory $target)
    public function target(): Directory
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Configuration.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Configuration
    public function __construct(string $filename, ValidationResult $validationResult, ExtensionCollection $extensions, CodeCoverage $codeCoverage, Groups $groups, Groups $testdoxGroups, ExtensionCollection $listeners, Logging $logging, Php $php, PHPUnit $phpunit, TestSuiteCollection $testSuite)
    public function filename(): string
    public function hasValidationErrors(): bool
    public function validationErrors(): string
    public function extensions(): ExtensionCollection
    public function codeCoverage(): CodeCoverage
    public function groups(): Groups
    public function testdoxGroups(): Groups
    public function listeners(): ExtensionCollection
    public function logging(): Logging
    public function php(): Php
    public function phpunit(): PHPUnit
    public function testSuite(): TestSuiteCollection
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Exception.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Exception extends RuntimeException implements \PHPUnit\Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Filesystem/Directory.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Directory
    public function __construct(string $path)
    public function path(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Filesystem/DirectoryCollection.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class DirectoryCollection implements Countable, IteratorAggregate
    public static function fromArray(array $directories): self
    private function __construct(Directory ...$directories)
    public function asArray(): array
    public function count(): int
    public function getIterator(): DirectoryCollectionIterator
    public function isEmpty(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Filesystem/DirectoryCollectionIterator.php
    use function count;
    use function iterator_count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class DirectoryCollectionIterator implements Countable, Iterator
    public function __construct(DirectoryCollection $directories)
    public function count(): int
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): Directory
    public function next(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Filesystem/File.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class File
    public function __construct(string $path)
    public function path(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Filesystem/FileCollection.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class FileCollection implements Countable, IteratorAggregate
    public static function fromArray(array $files): self
    private function __construct(File ...$files)
    public function asArray(): array
    public function count(): int
    public function getIterator(): FileCollectionIterator
    public function isEmpty(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Filesystem/FileCollectionIterator.php
    use function count;
    use function iterator_count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class FileCollectionIterator implements Countable, Iterator
    public function __construct(FileCollection $files)
    public function count(): int
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): File
    public function next(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Generator.php
    use function str_replace;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Generator
    public function generateDefaultConfiguration(string $phpunitVersion, string $bootstrapScript, string $testsDirectory, string $srcDirectory, string $cacheDirectory): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Group/Group.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Group
    public function __construct(string $name)
    public function name(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Group/GroupCollection.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class GroupCollection implements IteratorAggregate
    public static function fromArray(array $groups): self
    private function __construct(Group ...$groups)
    public function asArray(): array
    public function asArrayOfStrings(): array
    public function isEmpty(): bool
    public function getIterator(): GroupCollectionIterator
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Group/GroupCollectionIterator.php
    use function count;
    use function iterator_count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class GroupCollectionIterator implements Countable, Iterator
    public function __construct(GroupCollection $groups)
    public function count(): int
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): Group
    public function next(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Group/Groups.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Groups
    public function __construct(GroupCollection $include, GroupCollection $exclude)
    public function hasInclude(): bool
    public function include(): GroupCollection
    public function hasExclude(): bool
    public function exclude(): GroupCollection
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Loader.php
    use function assert;
    use function defined;
    use function dirname;
    use function explode;
    use function is_file;
    use function is_numeric;
    use function preg_match;
    use function stream_resolve_include_path;
    use function strlen;
    use function strpos;
    use function strtolower;
    use function substr;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Loader
    public function load(string $filename): Configuration
    public function logging(string $filename, DOMXPath $xpath): Logging
    public function legacyLogging(string $filename, DOMXPath $xpath): Logging
    private function extensions(string $filename, DOMXPath $xpath): ExtensionCollection
    private function getElementConfigurationParameters(string $filename, DOMElement $element): Extension
    /** @psalm-var class-string $class */
    $class     = (string) $element->getAttribute('class');
    private function toAbsolutePath(string $filename, string $path, bool $useIncludePath = false): string
    private function getConfigurationArguments(string $filename, DOMNodeList $nodes): array
    private function codeCoverage(string $filename, DOMXPath $xpath, DOMDocument $document): CodeCoverage
    private function legacyCodeCoverage(string $filename, DOMXPath $xpath, DOMDocument $document): CodeCoverage
    private function getBoolean(string $value, $default)
    private function readFilterDirectories(string $filename, DOMXPath $xpath, string $query): FilterDirectoryCollection
    private function readFilterFiles(string $filename, DOMXPath $xpath, string $query): FileCollection
    private function groups(DOMXPath $xpath): Groups
    private function testdoxGroups(DOMXPath $xpath): Groups
    private function parseGroupConfiguration(DOMXPath $xpath, string $root): Groups
    private function listeners(string $filename, DOMXPath $xpath): ExtensionCollection
    private function getBooleanAttribute(DOMElement $element, string $attribute, bool $default): bool
    private function getIntegerAttribute(DOMElement $element, string $attribute, int $default): int
    private function getStringAttribute(DOMElement $element, string $attribute): ?string
    private function getInteger(string $value, int $default): int
    private function php(string $filename, DOMXPath $xpath): Php
    private function phpunit(string $filename, DOMDocument $document): PHPUnit
    private function getColors(DOMDocument $document): string
    private function getColumns(DOMDocument $document)
    private function testSuite(string $filename, DOMXPath $xpath): TestSuiteCollection
    private function getTestSuiteElements(DOMXPath $xpath): array
    private function element(DOMXPath $xpath, string $element): ?DOMElement
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Logging/Junit.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Junit
    public function __construct(File $target)
    public function target(): File
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Logging/Logging.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Logging
    public function __construct(?Junit $junit, ?Text $text, ?TeamCity $teamCity, ?TestDoxHtml $testDoxHtml, ?TestDoxText $testDoxText, ?TestDoxXml $testDoxXml)
    public function hasJunit(): bool
    public function junit(): Junit
    public function hasText(): bool
    public function text(): Text
    public function hasTeamCity(): bool
    public function teamCity(): TeamCity
    public function hasTestDoxHtml(): bool
    public function testDoxHtml(): TestDoxHtml
    public function hasTestDoxText(): bool
    public function testDoxText(): TestDoxText
    public function hasTestDoxXml(): bool
    public function testDoxXml(): TestDoxXml
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Logging/TeamCity.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TeamCity
    public function __construct(File $target)
    public function target(): File
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Logging/TestDox/Html.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Html
    public function __construct(File $target)
    public function target(): File
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Logging/TestDox/Text.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Text
    public function __construct(File $target)
    public function target(): File
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Logging/TestDox/Xml.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Xml
    public function __construct(File $target)
    public function target(): File
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Logging/Text.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Text
    public function __construct(File $target)
    public function target(): File
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/MigrationBuilder.php
    use function version_compare;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MigrationBuilder
    public function build(string $fromVersion): array
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/MigrationBuilderException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MigrationBuilderException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/MigrationException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MigrationException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/ConvertLogTypes.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ConvertLogTypes implements Migration
    public function migrate(DOMDocument $document): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/CoverageCloverToReport.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class CoverageCloverToReport extends LogToReportMigration
    protected function forType(): string
    protected function toReportFormat(DOMElement $logNode): DOMElement
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/CoverageCrap4jToReport.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class CoverageCrap4jToReport extends LogToReportMigration
    protected function forType(): string
    protected function toReportFormat(DOMElement $logNode): DOMElement
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/CoverageHtmlToReport.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class CoverageHtmlToReport extends LogToReportMigration
    protected function forType(): string
    protected function toReportFormat(DOMElement $logNode): DOMElement
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/CoveragePhpToReport.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class CoveragePhpToReport extends LogToReportMigration
    protected function forType(): string
    protected function toReportFormat(DOMElement $logNode): DOMElement
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/CoverageTextToReport.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class CoverageTextToReport extends LogToReportMigration
    protected function forType(): string
    protected function toReportFormat(DOMElement $logNode): DOMElement
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/CoverageXmlToReport.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class CoverageXmlToReport extends LogToReportMigration
    protected function forType(): string
    protected function toReportFormat(DOMElement $logNode): DOMElement
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/IntroduceCoverageElement.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class IntroduceCoverageElement implements Migration
    public function migrate(DOMDocument $document): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/LogToReportMigration.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    abstract class LogToReportMigration implements Migration
    public function migrate(DOMDocument $document): void
    protected function migrateAttributes(DOMElement $src, DOMElement $dest, array $attributes): void
    abstract protected function forType(): string;
    abstract protected function toReportFormat(DOMElement $logNode): DOMElement;
    private function findLogNode(DOMDocument $document): ?DOMElement
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/Migration.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    public function migrate(DOMDocument $document): void;
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/MoveAttributesFromFilterWhitelistToCoverage.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MoveAttributesFromFilterWhitelistToCoverage implements Migration
    public function migrate(DOMDocument $document): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/MoveAttributesFromRootToCoverage.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MoveAttributesFromRootToCoverage implements Migration
    public function migrate(DOMDocument $document): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/MoveWhitelistExcludesToCoverage.php
    use function assert;
    use function in_array;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MoveWhitelistExcludesToCoverage implements Migration
    public function migrate(DOMDocument $document): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/MoveWhitelistIncludesToCoverage.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class MoveWhitelistIncludesToCoverage implements Migration
    public function migrate(DOMDocument $document): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/RemoveCacheTokensAttribute.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class RemoveCacheTokensAttribute implements Migration
    public function migrate(DOMDocument $document): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/RemoveEmptyFilter.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class RemoveEmptyFilter implements Migration
    public function migrate(DOMDocument $document): void
    private function ensureEmpty(DOMElement $element): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/RemoveLogTypes.php
    use function assert;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class RemoveLogTypes implements Migration
    public function migrate(DOMDocument $document): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrations/UpdateSchemaLocationTo93.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class UpdateSchemaLocationTo93 implements Migration
    public function migrate(DOMDocument $document): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/Migration/Migrator.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Migrator
    public function migrate(string $filename): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHP/Constant.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Constant
    public function __construct(string $name, $value)
    public function name(): string
    public function value()
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHP/ConstantCollection.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ConstantCollection implements Countable, IteratorAggregate
    public static function fromArray(array $constants): self
    private function __construct(Constant ...$constants)
    public function asArray(): array
    public function count(): int
    public function getIterator(): ConstantCollectionIterator
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHP/ConstantCollectionIterator.php
    use function count;
    use function iterator_count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ConstantCollectionIterator implements Countable, Iterator
    public function __construct(ConstantCollection $constants)
    public function count(): int
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): Constant
    public function next(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHP/IniSetting.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class IniSetting
    public function __construct(string $name, string $value)
    public function name(): string
    public function value(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHP/IniSettingCollection.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class IniSettingCollection implements Countable, IteratorAggregate
    public static function fromArray(array $iniSettings): self
    private function __construct(IniSetting ...$iniSettings)
    public function asArray(): array
    public function count(): int
    public function getIterator(): IniSettingCollectionIterator
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHP/IniSettingCollectionIterator.php
    use function count;
    use function iterator_count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class IniSettingCollectionIterator implements Countable, Iterator
    public function __construct(IniSettingCollection $iniSettings)
    public function count(): int
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): IniSetting
    public function next(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHP/Php.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Php
    public function __construct(DirectoryCollection $includePaths, IniSettingCollection $iniSettings, ConstantCollection $constants, VariableCollection $globalVariables, VariableCollection $envVariables, VariableCollection $postVariables, VariableCollection $getVariables, VariableCollection $cookieVariables, VariableCollection $serverVariables, VariableCollection $filesVariables, VariableCollection $requestVariables)
    public function includePaths(): DirectoryCollection
    public function iniSettings(): IniSettingCollection
    public function constants(): ConstantCollection
    public function globalVariables(): VariableCollection
    public function envVariables(): VariableCollection
    public function postVariables(): VariableCollection
    public function getVariables(): VariableCollection
    public function cookieVariables(): VariableCollection
    public function serverVariables(): VariableCollection
    public function filesVariables(): VariableCollection
    public function requestVariables(): VariableCollection
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHP/PhpHandler.php
    use function constant;
    use function define;
    use function defined;
    use function getenv;
    use function implode;
    use function ini_get;
    use function ini_set;
    use function putenv;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class PhpHandler
    public function handle(Php $configuration): void
    private function handleIncludePaths(DirectoryCollection $includePaths): void
    private function handleIniSettings(IniSettingCollection $iniSettings): void
    private function handleConstants(ConstantCollection $constants): void
    private function handleGlobalVariables(VariableCollection $variables): void
    private function handleServerVariables(VariableCollection $variables): void
    private function handleVariables(string $target, VariableCollection $variables): void
    private function handleEnvVariables(VariableCollection $variables): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHP/Variable.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Variable
    public function __construct(string $name, $value, bool $force)
    public function name(): string
    public function value()
    public function force(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHP/VariableCollection.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class VariableCollection implements Countable, IteratorAggregate
    public static function fromArray(array $variables): self
    private function __construct(Variable ...$variables)
    public function asArray(): array
    public function count(): int
    public function getIterator(): VariableCollectionIterator
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHP/VariableCollectionIterator.php
    use function count;
    use function iterator_count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class VariableCollectionIterator implements Countable, Iterator
    public function __construct(VariableCollection $variables)
    public function count(): int
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): Variable
    public function next(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHPUnit/Extension.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Extension
    public function __construct(string $className, string $sourceFile, array $arguments)
    public function className(): string
    public function hasSourceFile(): bool
    public function sourceFile(): string
    public function hasArguments(): bool
    public function arguments(): array
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHPUnit/ExtensionCollection.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ExtensionCollection implements IteratorAggregate
    public static function fromArray(array $extensions): self
    private function __construct(Extension ...$extensions)
    public function asArray(): array
    public function getIterator(): ExtensionCollectionIterator
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHPUnit/ExtensionCollectionIterator.php
    use function count;
    use function iterator_count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ExtensionCollectionIterator implements Countable, Iterator
    public function __construct(ExtensionCollection $extensions)
    public function count(): int
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): Extension
    public function next(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/PHPUnit/PHPUnit.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class PHPUnit
    public function __construct(bool $cacheResult, ?string $cacheResultFile, $columns, string $colors, bool $stderr, bool $noInteraction, bool $verbose, bool $reverseDefectList, bool $convertDeprecationsToExceptions, bool $convertErrorsToExceptions, bool $convertNoticesToExceptions, bool $convertWarningsToExceptions, bool $forceCoversAnnotation, ?string $bootstrap, bool $processIsolation, bool $failOnEmptyTestSuite, bool $failOnIncomplete, bool $failOnRisky, bool $failOnSkipped, bool $failOnWarning, bool $stopOnDefect, bool $stopOnError, bool $stopOnFailure, bool $stopOnWarning, bool $stopOnIncomplete, bool $stopOnRisky, bool $stopOnSkipped, ?string $extensionsDirectory, ?string $testSuiteLoaderClass, ?string $testSuiteLoaderFile, ?string $printerClass, ?string $printerFile, bool $beStrictAboutChangesToGlobalState, bool $beStrictAboutOutputDuringTests, bool $beStrictAboutResourceUsageDuringSmallTests, bool $beStrictAboutTestsThatDoNotTestAnything, bool $beStrictAboutTodoAnnotatedTests, bool $beStrictAboutCoversAnnotation, bool $enforceTimeLimit, int $defaultTimeLimit, int $timeoutForSmallTests, int $timeoutForMediumTests, int $timeoutForLargeTests, ?string $defaultTestSuite, int $executionOrder, bool $resolveDependencies, bool $defectsFirst, bool $backupGlobals, bool $backupStaticAttributes, bool $registerMockObjectsFromTestArgumentsRecursively, bool $conflictBetweenPrinterClassAndTestdox)
    public function cacheResult(): bool
    public function hasCacheResultFile(): bool
    public function cacheResultFile(): string
    public function columns()
    public function colors(): string
    public function stderr(): bool
    public function noInteraction(): bool
    public function verbose(): bool
    public function reverseDefectList(): bool
    public function convertDeprecationsToExceptions(): bool
    public function convertErrorsToExceptions(): bool
    public function convertNoticesToExceptions(): bool
    public function convertWarningsToExceptions(): bool
    public function forceCoversAnnotation(): bool
    public function hasBootstrap(): bool
    public function bootstrap(): string
    public function processIsolation(): bool
    public function failOnEmptyTestSuite(): bool
    public function failOnIncomplete(): bool
    public function failOnRisky(): bool
    public function failOnSkipped(): bool
    public function failOnWarning(): bool
    public function stopOnDefect(): bool
    public function stopOnError(): bool
    public function stopOnFailure(): bool
    public function stopOnWarning(): bool
    public function stopOnIncomplete(): bool
    public function stopOnRisky(): bool
    public function stopOnSkipped(): bool
    public function hasExtensionsDirectory(): bool
    public function extensionsDirectory(): string
    public function hasTestSuiteLoaderClass(): bool
    public function testSuiteLoaderClass(): string
    throw new Exception('TestSuiteLoader class is not configured');
    public function hasTestSuiteLoaderFile(): bool
    public function testSuiteLoaderFile(): string
    public function hasPrinterClass(): bool
    public function printerClass(): string
    throw new Exception('ResultPrinter class is not configured');
    public function hasPrinterFile(): bool
    public function printerFile(): string
    public function beStrictAboutChangesToGlobalState(): bool
    public function beStrictAboutOutputDuringTests(): bool
    public function beStrictAboutResourceUsageDuringSmallTests(): bool
    public function beStrictAboutTestsThatDoNotTestAnything(): bool
    public function beStrictAboutTodoAnnotatedTests(): bool
    public function beStrictAboutCoversAnnotation(): bool
    public function enforceTimeLimit(): bool
    public function defaultTimeLimit(): int
    public function timeoutForSmallTests(): int
    public function timeoutForMediumTests(): int
    public function timeoutForLargeTests(): int
    public function hasDefaultTestSuite(): bool
    public function defaultTestSuite(): string
    public function executionOrder(): int
    public function resolveDependencies(): bool
    public function defectsFirst(): bool
    public function backupGlobals(): bool
    public function backupStaticAttributes(): bool
    public function registerMockObjectsFromTestArgumentsRecursively(): bool
    public function conflictBetweenPrinterClassAndTestdox(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/TestSuite/TestDirectory.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestDirectory
    public function __construct(string $path, string $prefix, string $suffix, string $phpVersion, VersionComparisonOperator $phpVersionOperator)
    public function path(): string
    public function prefix(): string
    public function suffix(): string
    public function phpVersion(): string
    public function phpVersionOperator(): VersionComparisonOperator
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/TestSuite/TestDirectoryCollection.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestDirectoryCollection implements Countable, IteratorAggregate
    public static function fromArray(array $directories): self
    private function __construct(TestDirectory ...$directories)
    public function asArray(): array
    public function count(): int
    public function getIterator(): TestDirectoryCollectionIterator
    public function isEmpty(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/TestSuite/TestDirectoryCollectionIterator.php
    use function count;
    use function iterator_count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestDirectoryCollectionIterator implements Countable, Iterator
    public function __construct(TestDirectoryCollection $directories)
    public function count(): int
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): TestDirectory
    public function next(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/TestSuite/TestFile.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestFile
    public function __construct(string $path, string $phpVersion, VersionComparisonOperator $phpVersionOperator)
    public function path(): string
    public function phpVersion(): string
    public function phpVersionOperator(): VersionComparisonOperator
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/TestSuite/TestFileCollection.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestFileCollection implements Countable, IteratorAggregate
    public static function fromArray(array $files): self
    private function __construct(TestFile ...$files)
    public function asArray(): array
    public function count(): int
    public function getIterator(): TestFileCollectionIterator
    public function isEmpty(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/TestSuite/TestFileCollectionIterator.php
    use function count;
    use function iterator_count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestFileCollectionIterator implements Countable, Iterator
    public function __construct(TestFileCollection $files)
    public function count(): int
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): TestFile
    public function next(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/TestSuite/TestSuite.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestSuite
    public function __construct(string $name, TestDirectoryCollection $directories, TestFileCollection $files, FileCollection $exclude)
    public function name(): string
    public function directories(): TestDirectoryCollection
    public function files(): TestFileCollection
    public function exclude(): FileCollection
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/TestSuite/TestSuiteCollection.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestSuiteCollection implements Countable, IteratorAggregate
    public static function fromArray(array $testSuites): self
    private function __construct(TestSuite ...$testSuites)
    public function asArray(): array
    public function count(): int
    public function getIterator(): TestSuiteCollectionIterator
    public function isEmpty(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/TextUI/XmlConfiguration/TestSuite/TestSuiteCollectionIterator.php
    use function count;
    use function iterator_count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TestSuiteCollectionIterator implements Countable, Iterator
    public function __construct(TestSuiteCollection $testSuites)
    public function count(): int
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): TestSuite
    public function next(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Annotation/DocBlock.php
    use function array_filter;
    use function array_key_exists;
    use function array_map;
    use function array_merge;
    use function array_pop;
    use function array_slice;
    use function array_values;
    use function count;
    use function explode;
    use function file;
    use function implode;
    use function is_array;
    use function is_int;
    use function json_decode;
    use function json_last_error;
    use function json_last_error_msg;
    use function preg_match;
    use function preg_match_all;
    use function preg_replace;
    use function preg_split;
    use function realpath;
    use function rtrim;
    use function sprintf;
    use function str_replace;
    use function strlen;
    use function strpos;
    use function strtolower;
    use function substr;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class DocBlock
    public static function ofClass(ReflectionClass $class): self
    public static function ofMethod(ReflectionMethod $method, string $classNameInHierarchy): self
    private function __construct(string $docComment, bool $isMethod, array $symbolAnnotations, int $startLine, int $endLine, string $fileName, string $name, string $className)
    public function requirements(): array
    public function getProvidedData(): ?array
    public function getInlineAnnotations(): array
    public function symbolAnnotations(): array
    public function isHookToBeExecutedBeforeClass(): bool
    public function isHookToBeExecutedAfterClass(): bool
    public function isToBeExecutedBeforeTest(): bool
    public function isToBeExecutedAfterTest(): bool
    public function isToBeExecutedAsPreCondition(): bool
    public function isToBeExecutedAsPostCondition(): bool
    private function getDataFromDataProviderAnnotation(string $docComment): ?array
    private function getDataFromTestWithAnnotation(string $docComment): ?array
    private function cleanUpMultiLineAnnotation(string $docComment): string
    private static function parseDocBlock(string $docBlock): array
    private static function extractAnnotationsFromReflector(Reflector $reflector): array
    static function (ReflectionClass $trait): array
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Annotation/Registry.php
    use function array_key_exists;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Registry
    /** @var array<string, DocBlock> indexed by class name */
    /** @var array<string, array<string, DocBlock>> indexed by class name and method name */
    public static function getInstance(): self
    private function __construct()
    public function forClassName(string $class): DocBlock
    public function forMethod(string $classInHierarchy, string $method): DocBlock
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Blacklist.php
    final class Blacklist
    public static function addDirectory(string $directory): void
    public function getBlacklistedDirectories(): array
    public function isBlacklisted(string $file): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Cloner.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Cloner
    public static function clone(object $original): object
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Color.php
    use function array_keys;
    use function array_map;
    use function array_values;
    use function count;
    use function explode;
    use function implode;
    use function min;
    use function preg_replace;
    use function preg_replace_callback;
    use function sprintf;
    use function strtr;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Color
    public static function colorize(string $color, string $buffer): string
    public static function colorizePath(string $path, ?string $prevPath = null, bool $colorizeFilename = false): string
    static function ($matches)
    public static function dim(string $buffer): string
    public static function visualizeWhitespace(string $buffer, bool $visualizeEOL = false): string
    return preg_replace_callback('/\s+/', static function ($matches) use ($replaceMap)
    private static function optimizeColor(string $buffer): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/ErrorHandler.php
    use function defined;
    use function error_reporting;
    use function restore_error_handler;
    use function set_error_handler;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ErrorHandler
    public static function invokeIgnoringWarnings(callable $callable)
    static function ($errorNumber, $errorString)
    public function __construct(bool $convertDeprecationsToExceptions, bool $convertErrorsToExceptions, bool $convertNoticesToExceptions, bool $convertWarningsToExceptions)
    public function __invoke(int $errorNumber, string $errorString, string $errorFile, int $errorLine): bool
    public function register(): void
    public function unregister(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Exception.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Exception extends RuntimeException implements \PHPUnit\Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/ExcludeList.php
    use function class_exists;
    use function defined;
    use function dirname;
    use function is_dir;
    use function realpath;
    use function sprintf;
    use function strpos;
    use function sys_get_temp_dir;
    final class ExcludeList
    ClassLoader::class => 1,
    Instantiator::class => 1,
    DeepCopy::class => 1,
    Parser::class => 1,
    Manifest::class => 1,
    PharIoVersion::class => 1,
    Type::class => 1,
    TestCase::class => 2,
    CodeCoverage::class => 1,
    FileIteratorFacade::class => 1,
    Invoker::class => 1,
    Template::class => 1,
    Timer::class => 1,
    CliParser::class => 1,
    CodeUnit::class => 1,
    Wizard::class => 1,
    Comparator::class => 1,
    Calculator::class => 1,
    Diff::class => 1,
    Runtime::class => 1,
    Exporter::class => 1,
    Snapshot::class => 1,
    Counter::class => 1,
    Enumerator::class => 1,
    ObjectReflector::class => 1,
    Context::class => 1,
    ResourceOperations::class => 1,
    TypeName::class => 1,
    Version::class => 1,
    Tokenizer::class => 1,
    public static function addDirectory(string $directory): void
    public function getExcludedDirectories(): array
    public function isExcluded(string $file): bool
    private function initialize(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/FileLoader.php
    use function array_diff;
    use function array_keys;
    use function fopen;
    use function get_defined_vars;
    use function sprintf;
    use function stream_resolve_include_path;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class FileLoader
    public static function checkAndLoad(string $filename): string
    public static function load(string $filename): void
    private static function isReadable(string $filename): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Filesystem.php
    use function is_dir;
    use function mkdir;
    use function str_replace;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Filesystem
    * Maps class names to source file names.
    public static function classNameToFilename(string $className): string
    public static function createDirectory(string $directory): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Filter.php
    use function array_unshift;
    use function defined;
    use function in_array;
    use function is_file;
    use function realpath;
    use function sprintf;
    use function strpos;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Filter
    public static function getFilteredStacktrace(Throwable $t): string
    private static function shouldPrintFrame(array $frame, $prefix, ExcludeList $excludeList): bool
    private static function fileIsExcluded(string $file, ExcludeList $excludeList): bool
    private static function frameExists(array $trace, string $file, int $line): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/GlobalState.php
    use function array_keys;
    use function array_reverse;
    use function array_shift;
    use function defined;
    use function get_defined_constants;
    use function get_included_files;
    use function in_array;
    use function ini_get_all;
    use function is_array;
    use function is_file;
    use function is_scalar;
    use function preg_match;
    use function serialize;
    use function sprintf;
    use function strpos;
    use function strtr;
    use function substr;
    use function var_export;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class GlobalState
    public static function getIncludedFilesAsString(): string
    public static function processIncludedFilesAsString(array $files): string
    public static function getIniSettingsAsString(): string
    public static function getConstantsAsString(): string
    public static function getGlobalsAsString(): string
    private static function exportVariable($variable): string
    private static function arrayOnlyContainsScalars(array $array): bool
    private static function isIniSettingDeprecated(string $iniSetting): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/InvalidDataSetException.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class InvalidDataSetException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Json.php
    use function count;
    use function is_array;
    use function is_object;
    use function json_decode;
    use function json_encode;
    use function json_last_error;
    use function ksort;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Json
    public static function prettify(string $json): string
    public static function canonicalize(string $json): array
    private static function recursiveSort(&$json): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Log/JUnit.php
    use function class_exists;
    use function get_class;
    use function method_exists;
    use function sprintf;
    use function str_replace;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class JUnit extends Printer implements TestListener
    public function __construct($out = null, bool $reportRiskyTests = false)
    public function flush(): void
    public function addError(Test $test, Throwable $t, float $time): void
    public function addWarning(Test $test, Warning $e, float $time): void
    public function addFailure(Test $test, AssertionFailedError $e, float $time): void
    public function addIncompleteTest(Test $test, Throwable $t, float $time): void
    public function addRiskyTest(Test $test, Throwable $t, float $time): void
    public function addSkippedTest(Test $test, Throwable $t, float $time): void
    public function startTestSuite(TestSuite $suite): void
    $class = new ReflectionClass($suite->getName());
    public function endTestSuite(TestSuite $suite): void
    public function startTest(Test $test): void
    $class = new ReflectionClass($test);
    public function endTest(Test $test, float $time): void
    public function getXML(): string
    private function doAddFault(Test $test, Throwable $t, string $type): void
    private function doAddSkipped(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Log/TeamCity.php
    use function class_exists;
    use function count;
    use function explode;
    use function get_class;
    use function getmypid;
    use function ini_get;
    use function is_bool;
    use function is_scalar;
    use function method_exists;
    use function print_r;
    use function round;
    use function str_replace;
    use function stripos;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TeamCity extends DefaultResultPrinter
    public function printResult(TestResult $result): void
    public function addError(Test $test, Throwable $t, float $time): void
    public function addWarning(Test $test, Warning $e, float $time): void
    public function addFailure(Test $test, AssertionFailedError $e, float $time): void
    public function addIncompleteTest(Test $test, Throwable $t, float $time): void
    public function addRiskyTest(Test $test, Throwable $t, float $time): void
    public function addSkippedTest(Test $test, Throwable $t, float $time): void
    public function printIgnoredTest(string $testName, Throwable $t, float $time): void
    public function startTestSuite(TestSuite $suite): void
    public function endTestSuite(TestSuite $suite): void
    public function startTest(Test $test): void
    public function endTest(Test $test, float $time): void
    protected function writeProgress(string $progress): void
    private function printEvent(string $eventName, array $params = []): void
    private static function getMessage(Throwable $t): string
    private static function getDetails(Throwable $t): string
    private static function getPrimitiveValueAsString($value): ?string
    private static function escapeValue(string $text): string
    private static function getFileName($className): string
    private static function toMilliseconds(float $time): int
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/PHP/AbstractPhpProcess.php
    use function array_keys;
    use function array_merge;
    use function assert;
    use function escapeshellarg;
    use function file_exists;
    use function file_get_contents;
    use function ini_get_all;
    use function restore_error_handler;
    use function set_error_handler;
    use function sprintf;
    use function str_replace;
    use function strpos;
    use function strrpos;
    use function substr;
    use function trim;
    use function unlink;
    use function unserialize;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    abstract class AbstractPhpProcess
    public static function factory(): self
    public function __construct()
    public function setUseStderrRedirection(bool $stderrRedirection): void
    public function useStderrRedirection(): bool
    public function setStdin(string $stdin): void
    public function getStdin(): string
    public function setArgs(string $args): void
    public function getArgs(): string
    public function setEnv(array $env): void
    public function getEnv(): array
    public function setTimeout(int $timeout): void
    public function getTimeout(): int
    public function runTestJob(string $job, Test $test, TestResult $result, string $processResultFile): void
    public function getCommand(array $settings, ?string $file = null): string
    abstract public function runJob(string $job, array $settings = []): array;
    protected function settingsToParameters(array $settings): string
    private function processChildResult(Test $test, TestResult $result, string $stdout, string $stderr): void
    static function ($errno, $errstr, $errfile, $errline): void
    private function getException(TestFailure $error): Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/PHP/DefaultPhpProcess.php
    use function array_merge;
    use function fclose;
    use function file_put_contents;
    use function fread;
    use function fwrite;
    use function is_array;
    use function is_resource;
    use function proc_close;
    use function proc_open;
    use function proc_terminate;
    use function rewind;
    use function sprintf;
    use function stream_get_contents;
    use function stream_select;
    use function sys_get_temp_dir;
    use function tempnam;
    use function unlink;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    class DefaultPhpProcess extends AbstractPhpProcess
    public function runJob(string $job, array $settings = []): array
    protected function getHandles(): array
    protected function runProcess(string $job, array $settings): array
    protected function process($pipe, string $job): void
    protected function cleanup(): void
    protected function useTemporaryFile(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/PHP/WindowsPhpProcess.php
    use function tmpfile;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class WindowsPhpProcess extends DefaultPhpProcess
    public function getCommand(array $settings, ?string $file = null): string
    protected function getHandles(): array
    protected function useTemporaryFile(): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Printer.php
    use function assert;
    use function count;
    use function dirname;
    use function explode;
    use function fclose;
    use function fopen;
    use function fsockopen;
    use function fwrite;
    use function htmlspecialchars;
    use function is_resource;
    use function is_string;
    use function sprintf;
    use function str_replace;
    use function strncmp;
    use function strpos;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    class Printer
    public function __construct($out = null)
    public function write(string $buffer): void
    public function flush(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Reflection.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Reflection
    public function publicMethodsInTestClass(ReflectionClass $class): array
    public function methodsInTestClass(ReflectionClass $class): array
    private function filterMethods(ReflectionClass $class, ?int $filter): array
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/RegularExpression.php
    use function preg_match;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class RegularExpression
    public static function safeMatch(string $pattern, string $subject)
    static function () use ($pattern, $subject)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Test.php
    use function addcslashes;
    use function array_flip;
    use function array_key_exists;
    use function array_merge;
    use function array_unique;
    use function array_unshift;
    use function class_exists;
    use function count;
    use function explode;
    use function extension_loaded;
    use function function_exists;
    use function get_class;
    use function ini_get;
    use function interface_exists;
    use function is_array;
    use function is_int;
    use function method_exists;
    use function phpversion;
    use function preg_match;
    use function preg_replace;
    use function sprintf;
    use function strncmp;
    use function strpos;
    use function strtolower;
    use function trim;
    use function version_compare;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Test
    public static function describe(\PHPUnit\Framework\Test $test): array
    public static function describeAsString(\PHPUnit\Framework\Test $test): string
    public static function getLinesToBeCovered(string $className, string $methodName)
    public static function getLinesToBeUsed(string $className, string $methodName): array
    public static function requiresCodeCoverageDataCollection(TestCase $test): bool
    public static function getRequirements(string $className, string $methodName): array
    public static function getMissingRequirements(string $className, string $methodName): array
    public static function getProvidedData(string $className, string $methodName): ?array
    public static function parseTestMethodAnnotations(string $className, ?string $methodName = null): array
    public static function getInlineAnnotations(string $className, string $methodName): array
    public static function getBackupSettings(string $className, string $methodName): array
    public static function getDependencies(string $className, string $methodName): array
    public static function getGroups(string $className, ?string $methodName = ''): array
    public static function getSize(string $className, ?string $methodName): int
    public static function getProcessIsolationSettings(string $className, string $methodName): bool
    public static function getClassProcessIsolationSettings(string $className, string $methodName): bool
    public static function getPreserveGlobalStateSettings(string $className, string $methodName): ?bool
    public static function getHookMethods(string $className): array
    public static function isTestMethod(ReflectionMethod $method): bool
    private static function getLinesToBeCoveredOrUsed(string $className, string $methodName, string $mode): array
    'More than one @%sClass annotation in class or interface "%s".',
    private static function emptyHookMethodsArray(): array
    private static function getBooleanAnnotationSetting(string $className, ?string $methodName, string $settingName): ?bool
    private static function sanitizeVersionNumber(string $version)
    private static function shouldCoversAnnotationBeUsed(array $annotations): bool
    private static function mergeArraysRecursively(array $a, array $b): array
    private static function canonicalizeName(string $name): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/TestDox/CliTestDoxPrinter.php
    use function array_map;
    use function ceil;
    use function count;
    use function explode;
    use function get_class;
    use function implode;
    use function preg_match;
    use function sprintf;
    use function strlen;
    use function strpos;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    class CliTestDoxPrinter extends TestDoxPrinter
    public function __construct($out = null, bool $verbose = false, string $colors = self::COLOR_DEFAULT, bool $debug = false, $numberOfColumns = 80, bool $reverse = false)
    public function printResult(TestResult $result): void
    protected function printHeader(TestResult $result): void
    protected function formatClassName(Test $test): string
    protected function registerTestResult(Test $test, ?Throwable $t, int $status, float $time, bool $verbose): void
    protected function formatTestName(Test $test): string
    protected function writeTestResult(array $prevResult, array $result): void
    protected function formatThrowable(Throwable $t, ?int $status = null): string
    protected function colorizeMessageAndDiff(string $style, string $buffer): array
    protected function formatStacktrace(Throwable $t): string
    protected function formatTestResultMessage(Throwable $t, array $result, ?string $prefix = null): string
    $prefix = array_map(static function ($p) use ($color)
    protected function drawSpinner(): void
    protected function undrawSpinner(): void
    private function formatRuntime(float $time, string $color = ''): string
    private function printNonSuccessfulTestsSummary(int $numberOfExecutedTests): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/TestDox/HtmlResultPrinter.php
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class HtmlResultPrinter extends ResultPrinter
    public function printResult(TestResult $result): void
    protected function startRun(): void
    protected function startClass(string $name): void
    protected function onTest(string $name, bool $success = true): void
    protected function endClass(string $name): void
    protected function endRun(): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/TestDox/NamePrettifier.php
    use function array_key_exists;
    use function array_keys;
    use function array_map;
    use function array_pop;
    use function array_values;
    use function explode;
    use function get_class;
    use function gettype;
    use function implode;
    use function in_array;
    use function is_bool;
    use function is_float;
    use function is_int;
    use function is_numeric;
    use function is_object;
    use function is_scalar;
    use function is_string;
    use function ord;
    use function preg_quote;
    use function preg_replace;
    use function range;
    use function sprintf;
    use function str_replace;
    use function strlen;
    use function strpos;
    use function strtolower;
    use function strtoupper;
    use function substr;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class NamePrettifier
    public function __construct(bool $useColor = false)
    public function prettifyTestClass(string $className): string
    public function prettifyTestCase(TestCase $test): string
    $callback = static function (string $variable): string
    public function prettifyDataSet(TestCase $test): string
    public function prettifyTestMethod(string $name): string
    private function mapTestMethodParameterNamesToProvidedDataValues(TestCase $test): array
    $providedData = array_map(static function ($value)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/TestDox/ResultPrinter.php
    use function get_class;
    use function in_array;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    abstract class ResultPrinter extends Printer implements ResultPrinterInterface
    public function __construct($out = null, array $groups = [], array $excludeGroups = [])
    public function flush(): void
    public function addError(Test $test, Throwable $t, float $time): void
    public function addWarning(Test $test, Warning $e, float $time): void
    public function addFailure(Test $test, AssertionFailedError $e, float $time): void
    public function addIncompleteTest(Test $test, Throwable $t, float $time): void
    public function addRiskyTest(Test $test, Throwable $t, float $time): void
    public function addSkippedTest(Test $test, Throwable $t, float $time): void
    public function startTestSuite(TestSuite $suite): void
    public function endTestSuite(TestSuite $suite): void
    public function startTest(Test $test): void
    $class = get_class($test);
    public function endTest(Test $test, float $time): void
    protected function doEndClass(): void
    protected function startRun(): void
    protected function startClass(string $name): void
    protected function onTest(string $name, bool $success = true): void
    protected function endClass(string $name): void
    protected function endRun(): void
    private function isOfInterest(Test $test): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/TestDox/TestDoxPrinter.php
    use function array_map;
    use function get_class;
    use function implode;
    use function method_exists;
    use function preg_split;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    class TestDoxPrinter extends DefaultResultPrinter
    public function __construct($out = null, bool $verbose = false, string $colors = self::COLOR_DEFAULT, bool $debug = false, $numberOfColumns = 80, bool $reverse = false)
    public function setOriginalExecutionOrder(array $order): void
    public function setShowProgressAnimation(bool $showProgress): void
    public function printResult(TestResult $result): void
    public function endTest(Test $test, float $time): void
    public function addError(Test $test, Throwable $t, float $time): void
    public function addWarning(Test $test, Warning $e, float $time): void
    public function addFailure(Test $test, AssertionFailedError $e, float $time): void
    public function addIncompleteTest(Test $test, Throwable $t, float $time): void
    public function addRiskyTest(Test $test, Throwable $t, float $time): void
    public function addSkippedTest(Test $test, Throwable $t, float $time): void
    public function writeProgress(string $progress): void
    public function flush(): void
    protected function registerTestResult(Test $test, ?Throwable $t, int $status, float $time, bool $verbose): void
    protected function formatTestName(Test $test): string
    protected function formatClassName(Test $test): string
    protected function testHasPassed(): bool
    protected function flushOutputBuffer(bool $forceFlush = false): void
    protected function showSpinner(): void
    protected function hideSpinner(): void
    protected function drawSpinner(): void
    protected function undrawSpinner(): void
    protected function writeTestResult(array $prevResult, array $result): void
    protected function getEmptyTestResult(): array
    protected function getTestResultByName(?string $testName): array
    protected function formatThrowable(Throwable $t, ?int $status = null): string
    protected function formatStacktrace(Throwable $t): string
    protected function formatTestResultMessage(Throwable $t, array $result, string $prefix = '│'): string
    protected function prefixLines(string $prefix, string $message): string
    static function (string $text) use ($prefix)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/TestDox/TextResultPrinter.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TextResultPrinter extends ResultPrinter
    public function printResult(TestResult $result): void
    protected function startClass(string $name): void
    protected function onTest(string $name, bool $success = true): void
    protected function endClass(string $name): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/TestDox/XmlResultPrinter.php
    use function array_filter;
    use function get_class;
    use function implode;
    use function strpos;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class XmlResultPrinter extends Printer implements TestListener
    public function __construct($out = null)
    public function flush(): void
    public function addError(Test $test, Throwable $t, float $time): void
    public function addWarning(Test $test, Warning $e, float $time): void
    public function addFailure(Test $test, AssertionFailedError $e, float $time): void
    public function addIncompleteTest(Test $test, Throwable $t, float $time): void
    public function addRiskyTest(Test $test, Throwable $t, float $time): void
    public function addSkippedTest(Test $test, Throwable $t, float $time): void
    public function startTestSuite(TestSuite $suite): void
    public function endTestSuite(TestSuite $suite): void
    public function startTest(Test $test): void
    public function endTest(Test $test, float $time): void
    static function ($group)
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/TextTestListRenderer.php
    use function get_class;
    use function sprintf;
    use function str_replace;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class TextTestListRenderer
    public function render(TestSuite $suite): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Type.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Type
    public static function isType(string $type): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/VersionComparisonOperator.php
    use function in_array;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class VersionComparisonOperator
    public function __construct(string $operator)
    public function asString(): string
    private function ensureOperatorIsValid(string $operator): void
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/XdebugFilterScriptGenerator.php
    use function addslashes;
    use function array_map;
    use function implode;
    use function is_string;
    use function realpath;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class XdebugFilterScriptGenerator
    public function generate(FilterConfiguration $filter): string
    static function ($item)
    private function getItems(FilterConfiguration $filter): array
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Xml/Exception.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Exception extends RuntimeException implements \PHPUnit\Exception
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Xml/FailedSchemaDetectionResult.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class FailedSchemaDetectionResult extends SchemaDetectionResult
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Xml/Loader.php
    use function chdir;
    use function dirname;
    use function error_reporting;
    use function file_get_contents;
    use function getcwd;
    use function libxml_get_errors;
    use function libxml_use_internal_errors;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Loader
    public function loadFile(string $filename, bool $isHtml = false, bool $xinclude = false, bool $strict = false): DOMDocument
    public function load(string $actual, bool $isHtml = false, string $filename = '', bool $xinclude = false, bool $strict = false): DOMDocument
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Xml/SchemaDetectionResult.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    abstract class SchemaDetectionResult
    public function detected(): bool
    public function version(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Xml/SchemaDetector.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class SchemaDetector
    public function detect(string $filename): SchemaDetectionResult
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Xml/SchemaFinder.php
    use function assert;
    use function defined;
    use function is_file;
    use function rsort;
    use function sprintf;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class SchemaFinder
    public function available(): array
    public function find(string $version): string
    private function path(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Xml/SnapshotNodeList.php
    use function count;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class SnapshotNodeList implements Countable, IteratorAggregate
    public static function fromNodeList(DOMNodeList $list): self
    public function count(): int
    public function getIterator(): ArrayIterator
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Xml/SuccessfulSchemaDetectionResult.php
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class SuccessfulSchemaDetectionResult extends SchemaDetectionResult
    public function __construct(string $version)
    public function detected(): bool
    public function version(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Xml/ValidationResult.php
    use function sprintf;
    use function trim;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class ValidationResult
    public static function fromArray(array $errors): self
    private function __construct(array $validationErrors)
    public function hasValidationErrors(): bool
    public function asString(): string
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Xml/Validator.php
    use function file_get_contents;
    use function libxml_clear_errors;
    use function libxml_get_errors;
    use function libxml_use_internal_errors;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Validator
    public function validate(DOMDocument $document, string $xsdFilename): ValidationResult
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/Xml.php
    use function assert;
    use function class_exists;
    use function htmlspecialchars;
    use function mb_convert_encoding;
    use function ord;
    use function preg_replace;
    use function settype;
    use function strlen;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class Xml
    public static function import(DOMElement $element): DOMElement
    public static function removeCharacterDataNodes(DOMNode $node): void
    public static function prepareString(string $string): string
    public static function xmlToVariable(DOMElement $element)
    private static function convertToUtf8(string $string): string
    private static function isUtf8(string $string): bool
--------------------------------------------
Fichier : ./vendor/phpunit/phpunit/src/Util/XmlTestListRenderer.php
    use function get_class;
    use function implode;
    use function str_replace;
    * @internal This class is not covered by the backward compatibility promise for PHPUnit
    final class XmlTestListRenderer
    public function render(TestSuite $suite): string
--------------------------------------------
Fichier : ./vendor/psr/http-client/src/ClientExceptionInterface.php
--------------------------------------------
Fichier : ./vendor/psr/http-client/src/ClientInterface.php
    public function sendRequest(RequestInterface $request): ResponseInterface;
--------------------------------------------
Fichier : ./vendor/psr/http-client/src/NetworkExceptionInterface.php
    public function getRequest(): RequestInterface;
--------------------------------------------
Fichier : ./vendor/psr/http-client/src/RequestExceptionInterface.php
    public function getRequest(): RequestInterface;
--------------------------------------------
Fichier : ./vendor/psr/http-factory/src/RequestFactoryInterface.php
    public function createRequest(string $method, $uri): RequestInterface;
--------------------------------------------
Fichier : ./vendor/psr/http-factory/src/ResponseFactoryInterface.php
    public function createResponse(int $code = 200, string $reasonPhrase = ''): ResponseInterface;
--------------------------------------------
Fichier : ./vendor/psr/http-factory/src/ServerRequestFactoryInterface.php
    public function createServerRequest(string $method, $uri, array $serverParams = []): ServerRequestInterface;
--------------------------------------------
Fichier : ./vendor/psr/http-factory/src/StreamFactoryInterface.php
    public function createStream(string $content = ''): StreamInterface;
    public function createStreamFromFile(string $filename, string $mode = 'r'): StreamInterface;
    public function createStreamFromResource($resource): StreamInterface;
--------------------------------------------
Fichier : ./vendor/psr/http-factory/src/UploadedFileFactoryInterface.php
    public function createUploadedFile(
--------------------------------------------
Fichier : ./vendor/psr/http-factory/src/UriFactoryInterface.php
    public function createUri(string $uri = ''): UriInterface;
--------------------------------------------
Fichier : ./vendor/psr/http-message/src/MessageInterface.php
    public function getProtocolVersion(): string;
    public function withProtocolVersion(string $version): MessageInterface;
    public function getHeaders(): array;
    public function hasHeader(string $name): bool;
    public function getHeader(string $name): array;
    public function getHeaderLine(string $name): string;
    public function withHeader(string $name, $value): MessageInterface;
    public function withAddedHeader(string $name, $value): MessageInterface;
    public function withoutHeader(string $name): MessageInterface;
    public function getBody(): StreamInterface;
    public function withBody(StreamInterface $body): MessageInterface;
--------------------------------------------
Fichier : ./vendor/psr/http-message/src/RequestInterface.php
    public function getRequestTarget(): string;
    public function withRequestTarget(string $requestTarget): RequestInterface;
    public function getMethod(): string;
    public function withMethod(string $method): RequestInterface;
    public function getUri(): UriInterface;
    public function withUri(UriInterface $uri, bool $preserveHost = false): RequestInterface;
--------------------------------------------
Fichier : ./vendor/psr/http-message/src/ResponseInterface.php
    public function getStatusCode(): int;
    public function withStatus(int $code, string $reasonPhrase = ''): ResponseInterface;
    public function getReasonPhrase(): string;
--------------------------------------------
Fichier : ./vendor/psr/http-message/src/ServerRequestInterface.php
    public function getServerParams(): array;
    public function getCookieParams(): array;
    public function withCookieParams(array $cookies): ServerRequestInterface;
    public function getQueryParams(): array;
    public function withQueryParams(array $query): ServerRequestInterface;
    public function getUploadedFiles(): array;
    public function withUploadedFiles(array $uploadedFiles): ServerRequestInterface;
    public function getParsedBody();
    public function withParsedBody($data): ServerRequestInterface;
    public function getAttributes(): array;
    public function getAttribute(string $name, $default = null);
    public function withAttribute(string $name, $value): ServerRequestInterface;
    public function withoutAttribute(string $name): ServerRequestInterface;
--------------------------------------------
Fichier : ./vendor/psr/http-message/src/StreamInterface.php
    public function __toString(): string;
    public function close(): void;
    public function detach();
    public function getSize(): ?int;
    public function tell(): int;
    public function eof(): bool;
    public function isSeekable(): bool;
    public function seek(int $offset, int $whence = SEEK_SET): void;
    public function rewind(): void;
    public function isWritable(): bool;
    public function write(string $string): int;
    public function isReadable(): bool;
    public function read(int $length): string;
    public function getContents(): string;
    public function getMetadata(?string $key = null);
--------------------------------------------
Fichier : ./vendor/psr/http-message/src/UploadedFileInterface.php
    public function getStream(): StreamInterface;
    public function moveTo(string $targetPath): void;
    public function getSize(): ?int;
    public function getError(): int;
    public function getClientFilename(): ?string;
    public function getClientMediaType(): ?string;
--------------------------------------------
Fichier : ./vendor/psr/http-message/src/UriInterface.php
    public function getScheme(): string;
    public function getAuthority(): string;
    public function getUserInfo(): string;
    public function getHost(): string;
    public function getPort(): ?int;
    public function getPath(): string;
    public function getQuery(): string;
    public function getFragment(): string;
    public function withScheme(string $scheme): UriInterface;
    public function withUserInfo(string $user, ?string $password = null): UriInterface;
    public function withHost(string $host): UriInterface;
    public function withPort(?int $port): UriInterface;
    public function withPath(string $path): UriInterface;
    public function withQuery(string $query): UriInterface;
    public function withFragment(string $fragment): UriInterface;
    public function __toString(): string;
--------------------------------------------
Fichier : ./vendor/psr/simple-cache/src/CacheException.php
--------------------------------------------
Fichier : ./vendor/psr/simple-cache/src/CacheInterface.php
    public function get(string $key, mixed $default = null): mixed;
    public function set(string $key, mixed $value, null|int|\DateInterval $ttl = null): bool;
    public function delete(string $key): bool;
    public function clear(): bool;
    public function getMultiple(iterable $keys, mixed $default = null): iterable;
    public function setMultiple(iterable $values, null|int|\DateInterval $ttl = null): bool;
    public function deleteMultiple(iterable $keys): bool;
    public function has(string $key): bool;
--------------------------------------------
Fichier : ./vendor/psr/simple-cache/src/InvalidArgumentException.php
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/.php-cs-fixer.dist.php
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/demo/demo.php
    spl_autoload_register(function ($className) {
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Algorithm.php
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Qr/BaconQrCodeProvider.php
    class BaconQrCodeProvider implements IQRCodeProvider
    public function __construct(
    public function getMimeType(): string
    public function getQRCodeImage(string $qrText, int $size): string
    private function getQRCodeByBackend($qrText, $size, ImageBackEndInterface $backend)
    private function handleColour(array|string $colour): array|string
    $hexToRGB = static function ($input) {
    array_walk($split, static function (&$character) {
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Qr/BaseHTTPQRCodeProvider.php
    abstract class BaseHTTPQRCodeProvider implements IQRCodeProvider
    protected function getContent(string $url): string|bool
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Qr/EndroidQrCodeProvider.php
    class EndroidQrCodeProvider implements IQRCodeProvider
    public function __construct($bgcolor = 'ffffff', $color = '000000', $margin = 0, $errorcorrectionlevel = 'H')
    public function getMimeType(): string
    public function getQRCodeImage(string $qrText, int $size): string
    protected function qrCodeInstance(string $qrText, int $size): QrCode
    private function handleColor(string $color): Color|array
    private function handleErrorCorrectionLevel(string $level): ErrorCorrectionLevelInterface|ErrorCorrectionLevel
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Qr/EndroidQrCodeWithLogoProvider.php
    class EndroidQrCodeWithLogoProvider extends EndroidQrCodeProvider
    public function setLogo($path, $size = null)
    public function getQRCodeImage(string $qrText, int $size): string
    protected function qrCodeInstance(string $qrText, int $size): QrCode
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Qr/GoogleChartsQrCodeProvider.php
    class GoogleChartsQrCodeProvider extends BaseHTTPQRCodeProvider
    public function __construct(protected bool $verifyssl = false, public string $errorcorrectionlevel = 'L', public int $margin = 4, public string $encoding = 'UTF-8')
    public function getMimeType(): string
    public function getQRCodeImage(string $qrText, int $size): string
    public function getUrl(string $qrText, int $size): string
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Qr/HandlesDataUri.php
    use function base64_decode;
    use function preg_match;
    private function DecodeDataUri(string $datauri): ?array
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Qr/ImageChartsQRCodeProvider.php
    class ImageChartsQRCodeProvider extends BaseHTTPQRCodeProvider
    public function __construct(protected bool $verifyssl = false, public string $errorcorrectionlevel = 'L', public int $margin = 1)
    public function getMimeType(): string
    public function getQRCodeImage(string $qrText, int $size): string
    public function getUrl(string $qrText, int $size): string
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Qr/IQRCodeProvider.php
    public function getQRCodeImage(string $qrText, int $size): string;
    public function getMimeType(): string;
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Qr/QRException.php
    class QRException extends TwoFactorAuthException
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Qr/QRicketProvider.php
    class QRicketProvider extends BaseHTTPQRCodeProvider
    public function __construct(public string $errorcorrectionlevel = 'L', public string $bgcolor = 'ffffff', public string $color = '000000', public string $format = 'p')
    public function getMimeType(): string
    public function getQRCodeImage(string $qrText, int $size): string
    public function getUrl(string $qrText, int $size): string
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Qr/QRServerProvider.php
    class QRServerProvider extends BaseHTTPQRCodeProvider
    public function __construct(protected bool $verifyssl = false, public string $errorcorrectionlevel = 'L', public int $margin = 4, public int $qzone = 1, public string $bgcolor = 'ffffff', public string $color = '000000', public string $format = 'png')
    public function getMimeType(): string
    public function getQRCodeImage(string $qrText, int $size): string
    public function getUrl(string $qrText, int $size): string
    private function decodeColor(string $value): string
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Rng/CSRNGProvider.php
    class CSRNGProvider implements IRNGProvider
    public function getRandomBytes(int $bytecount): string
    public function isCryptographicallySecure(): bool
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Rng/HashRNGProvider.php
    use function in_array;
    class HashRNGProvider implements IRNGProvider
    public function __construct(private readonly string $algorithm = 'sha256')
    public function getRandomBytes(int $bytecount): string
    public function isCryptographicallySecure(): bool
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Rng/IRNGProvider.php
    public function getRandomBytes(int $bytecount): string;
    public function isCryptographicallySecure(): bool;
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Rng/OpenSSLRNGProvider.php
    class OpenSSLRNGProvider implements IRNGProvider
    public function __construct(private readonly bool $requirestrong = true)
    public function getRandomBytes(int $bytecount): string
    public function isCryptographicallySecure(): bool
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Rng/RNGException.php
    class RNGException extends TwoFactorAuthException
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Time/HttpTimeProvider.php
    class HttpTimeProvider implements ITimeProvider
    public function __construct(
    public function getTime()
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Time/ITimeProvider.php
    public function getTime();
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Time/LocalMachineTimeProvider.php
    class LocalMachineTimeProvider implements ITimeProvider
    public function getTime()
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Time/NTPTimeProvider.php
    use function socket_create;
    class NTPTimeProvider implements ITimeProvider
    public function __construct(public string $host = 'time.google.com', public int $port = 123, public int $timeout = 1)
    public function getTime()
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/Providers/Time/TimeException.php
    class TimeException extends TwoFactorAuthException
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/TwoFactorAuth.php
    class TwoFactorAuth
    public function __construct(
    public function createSecret(int $bits = 80, bool $requirecryptosecure = true): string
    public function getCode(string $secret, ?int $time = null): string
    public function verifyCode(string $secret, string $code, int $discrepancy = 1, ?int $time = null, ?int &$timeslice = 0): bool
    public function getQRCodeImageAsDataUri(string $label, string $secret, int $size = 200): string
    public function ensureCorrectTime(?array $timeproviders = null, int $leniency = 5): void
    public function getQRText(string $label, string $secret): string
    public function getQrCodeProvider(): IQRCodeProvider
    public function getRngProvider(): IRNGProvider
    public function getTimeProvider(): ITimeProvider
    private function codeEquals(string $safe, string $user): bool
    private function getTime(?int $time = null): int
    private function getTimeSlice(?int $time = null, int $offset = 0): int
    private function base32Decode(string $value): string
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/lib/TwoFactorAuthException.php
    class TwoFactorAuthException extends Exception
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/tests/Providers/Qr/IQRCodeProviderTest.php
    class IQRCodeProviderTest extends TestCase
    public function testTotpUriIsCorrect(): void
    public function testTotpUriIsCorrectNoIssuer(): void
    public function testGetQRCodeImageAsDataUriThrowsOnInvalidSize(): void
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/tests/Providers/Qr/TestQrProvider.php
    class TestQrProvider implements IQRCodeProvider
    public function getQRCodeImage(string $qrText, int $size): string
    public function getMimeType(): string
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/tests/Providers/Rng/CSRNGProviderTest.php
    class CSRNGProviderTest extends TestCase
    * @requires function random_bytes
    public function testCSRNGProvidersReturnExpectedNumberOfBytes(): void
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/tests/Providers/Rng/HashRNGProviderTest.php
    class HashRNGProviderTest extends TestCase
    public function testHashRNGProvidersReturnExpectedNumberOfBytes()
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/tests/Providers/Rng/IRNGProviderTest.php
    class IRNGProviderTest extends TestCase
    public function testCreateSecretThrowsOnInsecureRNGProvider(): void
    public function testCreateSecretOverrideSecureDoesNotThrowOnInsecureRNG(): void
    public function testCreateSecretDoesNotThrowOnSecureRNGProvider(): void
    public function testCreateSecretGeneratesDesiredAmountOfEntropy(): void
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/tests/Providers/Rng/NeedsRngLengths.php
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/tests/Providers/Rng/OpenSSLRNGProviderTest.php
    class OpenSSLRNGProviderTest extends TestCase
    public function testStrongOpenSSLRNGProvidersReturnExpectedNumberOfBytes()
    public function testNonStrongOpenSSLRNGProvidersReturnExpectedNumberOfBytes()
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/tests/Providers/Rng/TestRNGProvider.php
    class TestRNGProvider implements IRNGProvider
    public function __construct(private readonly bool $isSecure = false)
    public function getRandomBytes(int $bytecount): string
    public function isCryptographicallySecure(): bool
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/tests/Providers/Time/ITimeProviderTest.php
    class ITimeProviderTest extends TestCase
    public function testEnsureCorrectTimeDoesNotThrowForCorrectTime(): void
    public function testEnsureCorrectTimeThrowsOnIncorrectTime(): void
    public function testEnsureDefaultTimeProviderReturnsCorrectTime(): void
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/tests/Providers/Time/TestTimeProvider.php
    class TestTimeProvider implements ITimeProvider
    public function __construct($time)
    public function getTime()
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/tests/TwoFactorAuthTest.php
    class TwoFactorAuthTest extends TestCase
    public function testConstructorThrowsOnInvalidDigits(): void
    public function testConstructorThrowsOnInvalidPeriod(): void
    public function testGetCodeReturnsCorrectResults(): void
    public function testEnsureAllTimeProvidersReturnCorrectTime(): void
    public function testVerifyCodeWorksCorrectly(): void
    public function testVerifyCorrectTimeSliceIsReturned(): void
    public function testGetCodeThrowsOnInvalidBase32String1(): void
    public function testGetCodeThrowsOnInvalidBase32String2(): void
    public function testKnownBase32DecodeTestVectors(): void
    // expose your privates!"). Most of the time, you should be able to test a class by exercising its public methods."
    public function testKnownBase32DecodeUnpaddedTestVectors(): void
    public function testKnownTestVectors_sha1(): void
    public function testKnownTestVectors_sha256(): void
    public function testKnownTestVectors_sha512(): void
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/testsDependency/BaconQRCodeTest.php
    class BaconQRCodeTest extends TestCase
    public function testDependency(): void
    public function testBadTextColour(): void
    public function testBadBackgroundColour(): void
    public function testBadTextColourHexRef(): void
    public function testBadBackgroundColourHexRef(): void
--------------------------------------------
Fichier : ./vendor/robthree/twofactorauth/testsDependency/EndroidQRCodeTest.php
    class EndroidQRCodeTest extends TestCase
    public function testDependency(): void
--------------------------------------------
Fichier : ./vendor/sebastian/cli-parser/src/exceptions/AmbiguousOptionException.php
    use function sprintf;
    final class AmbiguousOptionException extends RuntimeException implements Exception
    public function __construct(string $option)
--------------------------------------------
Fichier : ./vendor/sebastian/cli-parser/src/exceptions/Exception.php
--------------------------------------------
Fichier : ./vendor/sebastian/cli-parser/src/exceptions/OptionDoesNotAllowArgumentException.php
    use function sprintf;
    final class OptionDoesNotAllowArgumentException extends RuntimeException implements Exception
    public function __construct(string $option)
--------------------------------------------
Fichier : ./vendor/sebastian/cli-parser/src/exceptions/RequiredOptionArgumentMissingException.php
    use function sprintf;
    final class RequiredOptionArgumentMissingException extends RuntimeException implements Exception
    public function __construct(string $option)
--------------------------------------------
Fichier : ./vendor/sebastian/cli-parser/src/exceptions/UnknownOptionException.php
    use function sprintf;
    final class UnknownOptionException extends RuntimeException implements Exception
    public function __construct(string $option)
--------------------------------------------
Fichier : ./vendor/sebastian/cli-parser/src/Parser.php
    use function array_map;
    use function array_merge;
    use function array_shift;
    use function array_slice;
    use function assert;
    use function count;
    use function current;
    use function explode;
    use function is_array;
    use function is_int;
    use function is_string;
    use function key;
    use function next;
    use function preg_replace;
    use function reset;
    use function sort;
    use function strlen;
    use function strpos;
    use function strstr;
    use function substr;
    final class Parser
    public function parse(array $argv, string $shortOptions, ?array $longOptions = null): array
    private function parseShortOption(string $arg, string $shortOptions, array &$opts, array &$args): void
    private function parseLongOption(string $arg, array $longOptions, array &$opts, array &$args): void
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/ClassMethodUnit.php
    final class ClassMethodUnit extends CodeUnit
    public function isClassMethod(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/ClassUnit.php
    final class ClassUnit extends CodeUnit
    public function isClass(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/CodeUnit.php
    use function range;
    use function sprintf;
    abstract class CodeUnit
    public static function forClass(string $className): ClassUnit
    public static function forClassMethod(string $className, string $methodName): ClassMethodUnit
    public static function forInterface(string $interfaceName): InterfaceUnit
    public static function forInterfaceMethod(string $interfaceName, string $methodName): InterfaceMethodUnit
    public static function forTrait(string $traitName): TraitUnit
    public static function forTraitMethod(string $traitName, string $methodName): TraitMethodUnit
    public static function forFunction(string $functionName): FunctionUnit
    private function __construct(string $name, string $sourceFileName, array $sourceLines)
    public function name(): string
    public function sourceFileName(): string
    public function sourceLines(): array
    public function isClass(): bool
    public function isClassMethod(): bool
    public function isInterface(): bool
    public function isInterfaceMethod(): bool
    public function isTrait(): bool
    public function isTraitMethod(): bool
    public function isFunction(): bool
    private static function ensureUserDefinedClass(string $className): void
    private static function ensureUserDefinedInterface(string $interfaceName): void
    private static function ensureUserDefinedTrait(string $traitName): void
    private static function reflectorForClass(string $className): ReflectionClass
    private static function reflectorForClassMethod(string $className, string $methodName): ReflectionMethod
    private static function reflectorForFunction(string $functionName): ReflectionFunction
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/CodeUnitCollection.php
    use function array_merge;
    use function count;
    final class CodeUnitCollection implements Countable, IteratorAggregate
    public static function fromArray(array $items): self
    public static function fromList(CodeUnit ...$items): self
    private function __construct()
    public function asArray(): array
    public function getIterator(): CodeUnitCollectionIterator
    public function count(): int
    public function isEmpty(): bool
    public function mergeWith(self $other): self
    private function add(CodeUnit $item): void
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/CodeUnitCollectionIterator.php
    final class CodeUnitCollectionIterator implements Iterator
    public function __construct(CodeUnitCollection $collection)
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): CodeUnit
    public function next(): void
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/exceptions/Exception.php
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/exceptions/InvalidCodeUnitException.php
    final class InvalidCodeUnitException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/exceptions/NoTraitException.php
    final class NoTraitException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/exceptions/ReflectionException.php
    final class ReflectionException extends RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/FunctionUnit.php
    final class FunctionUnit extends CodeUnit
    public function isFunction(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/InterfaceMethodUnit.php
    final class InterfaceMethodUnit extends CodeUnit
    public function isInterfaceMethod(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/InterfaceUnit.php
    final class InterfaceUnit extends CodeUnit
    public function isInterface(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/Mapper.php
    use function array_keys;
    use function array_merge;
    use function array_unique;
    use function array_values;
    use function class_exists;
    use function explode;
    use function function_exists;
    use function interface_exists;
    use function ksort;
    use function method_exists;
    use function sort;
    use function sprintf;
    use function str_replace;
    use function strpos;
    use function trait_exists;
    final class Mapper
    public function codeUnitsToSourceLines(CodeUnitCollection $codeUnits): array
    public function stringToCodeUnits(string $unit): CodeUnitCollection
    private function publicMethodsOfClass(string $className): CodeUnitCollection
    private function publicAndProtectedMethodsOfClass(string $className): CodeUnitCollection
    private function publicAndPrivateMethodsOfClass(string $className): CodeUnitCollection
    private function protectedMethodsOfClass(string $className): CodeUnitCollection
    private function protectedAndPrivateMethodsOfClass(string $className): CodeUnitCollection
    private function privateMethodsOfClass(string $className): CodeUnitCollection
    private function methodsOfClass(string $className, int $filter): CodeUnitCollection
    private function classAndParentClassesAndTraits(string $className): CodeUnitCollection
    private function reflectorForClass(string $className): ReflectionClass
    private function isUserDefinedFunction(string $functionName): bool
    private function isUserDefinedClass(string $className): bool
    private function isUserDefinedInterface(string $interfaceName): bool
    private function isUserDefinedTrait(string $traitName): bool
    private function isUserDefinedMethod(string $className, string $methodName): bool
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/TraitMethodUnit.php
    final class TraitMethodUnit extends CodeUnit
    public function isTraitMethod(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit/src/TraitUnit.php
    final class TraitUnit extends CodeUnit
    public function isTrait(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/code-unit-reverse-lookup/src/Wizard.php
    use function array_merge;
    use function assert;
    use function get_declared_classes;
    use function get_declared_traits;
    use function get_defined_functions;
    use function is_array;
    use function range;
    class Wizard
    public function lookup($filename, $lineNumber)
    private function updateLookupTable(): void
    private function processClassesAndTraits(): void
    private function processFunctions(): void
    private function processFunctionOrMethod(ReflectionFunctionAbstract $functionOrMethod): void
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/ArrayComparator.php
    use function array_key_exists;
    use function is_array;
    use function sort;
    use function sprintf;
    use function str_replace;
    use function trim;
    class ArrayComparator extends Comparator
    public function accepts($expected, $actual)
    public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = false, $ignoreCase = false, array &$processed = [])/*: void*/
    protected function indent($lines)
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/Comparator.php
    * Abstract base class for comparators which compare values for equality.
    abstract class Comparator
    public function __construct()
    public function setFactory(Factory $factory)/*: void*/
    abstract public function accepts($expected, $actual);
    abstract public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = false, $ignoreCase = false);
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/ComparisonFailure.php
    class ComparisonFailure extends RuntimeException
    public function __construct($expected, $actual, $expectedAsString, $actualAsString, $identical = false, $message = '')
    public function getActual()
    public function getExpected()
    public function getActualAsString()
    public function getExpectedAsString()
    public function getDiff()
    public function toString()
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/DateTimeComparator.php
    use function abs;
    use function floor;
    use function sprintf;
    class DateTimeComparator extends ObjectComparator
    public function accepts($expected, $actual)
    public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = false, $ignoreCase = false, array &$processed = [])/*: void*/
    private function dateTimeToString(DateTimeInterface $datetime): string
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/DOMNodeComparator.php
    use function sprintf;
    use function strtolower;
    class DOMNodeComparator extends ObjectComparator
    public function accepts($expected, $actual)
    public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = false, $ignoreCase = false, array &$processed = [])/*: void*/
    private function nodeToText(DOMNode $node, bool $canonicalize, bool $ignoreCase): string
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/DoubleComparator.php
    use function is_float;
    use function is_numeric;
    class DoubleComparator extends NumericComparator
    public function accepts($expected, $actual)
    public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = false, $ignoreCase = false)/*: void*/
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/ExceptionComparator.php
    class ExceptionComparator extends ObjectComparator
    public function accepts($expected, $actual)
    protected function toArray($object)
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/exceptions/Exception.php
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/exceptions/RuntimeException.php
    final class RuntimeException extends \RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/Factory.php
    use function array_unshift;
    class Factory
    public static function getInstance()
    public function __construct()
    public function getComparatorFor($expected, $actual)
    public function register(Comparator $comparator)/*: void*/
    public function unregister(Comparator $comparator)/*: void*/
    public function reset()/*: void*/
    private function registerDefaultComparators(): void
    private function registerDefaultComparator(Comparator $comparator): void
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/MockObjectComparator.php
    class MockObjectComparator extends ObjectComparator
    public function accepts($expected, $actual)
    protected function toArray($object)
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/NumericComparator.php
    use function abs;
    use function is_float;
    use function is_infinite;
    use function is_nan;
    use function is_numeric;
    use function is_string;
    use function sprintf;
    class NumericComparator extends ScalarComparator
    public function accepts($expected, $actual)
    public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = false, $ignoreCase = false)/*: void*/
    private function isInfinite($value): bool
    private function isNan($value): bool
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/ObjectComparator.php
    use function get_class;
    use function in_array;
    use function is_object;
    use function sprintf;
    use function substr_replace;
    class ObjectComparator extends ArrayComparator
    public function accepts($expected, $actual)
    public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = false, $ignoreCase = false, array &$processed = [])/*: void*/
    '%s is not instance of expected class "%s".',
    // this helps to avoid the error "maximum function nesting level reached"
    protected function toArray($object)
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/ResourceComparator.php
    use function is_resource;
    class ResourceComparator extends Comparator
    public function accepts($expected, $actual)
    public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = false, $ignoreCase = false)/*: void*/
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/ScalarComparator.php
    use function is_bool;
    use function is_object;
    use function is_scalar;
    use function is_string;
    use function method_exists;
    use function sprintf;
    use function strtolower;
    class ScalarComparator extends Comparator
    public function accepts($expected, $actual)
    public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = false, $ignoreCase = false)/*: void*/
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/SplObjectStorageComparator.php
    class SplObjectStorageComparator extends Comparator
    public function accepts($expected, $actual)
    public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = false, $ignoreCase = false)/*: void*/
--------------------------------------------
Fichier : ./vendor/sebastian/comparator/src/TypeComparator.php
    use function gettype;
    use function sprintf;
    class TypeComparator extends Comparator
    public function accepts($expected, $actual)
    public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = false, $ignoreCase = false)/*: void*/
--------------------------------------------
Fichier : ./vendor/sebastian/complexity/src/Calculator.php
    final class Calculator
    public function calculateForSourceFile(string $sourceFile): ComplexityCollection
    public function calculateForSourceString(string $source): ComplexityCollection
    public function calculateForAbstractSyntaxTree(array $nodes): ComplexityCollection
--------------------------------------------
Fichier : ./vendor/sebastian/complexity/src/Complexity/Complexity.php
    final class Complexity
    public function __construct(string $name, int $cyclomaticComplexity)
    public function name(): string
    public function cyclomaticComplexity(): int
--------------------------------------------
Fichier : ./vendor/sebastian/complexity/src/Complexity/ComplexityCollection.php
    use function count;
    final class ComplexityCollection implements Countable, IteratorAggregate
    public static function fromList(Complexity ...$items): self
    private function __construct(array $items)
    public function asArray(): array
    public function getIterator(): ComplexityCollectionIterator
    public function count(): int
    public function isEmpty(): bool
    public function cyclomaticComplexity(): int
--------------------------------------------
Fichier : ./vendor/sebastian/complexity/src/Complexity/ComplexityCollectionIterator.php
    final class ComplexityCollectionIterator implements Iterator
    public function __construct(ComplexityCollection $items)
    public function rewind(): void
    public function valid(): bool
    public function key(): int
    public function current(): Complexity
    public function next(): void
--------------------------------------------
Fichier : ./vendor/sebastian/complexity/src/Exception/Exception.php
--------------------------------------------
Fichier : ./vendor/sebastian/complexity/src/Exception/RuntimeException.php
    final class RuntimeException extends \RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/complexity/src/Visitor/ComplexityCalculatingVisitor.php
    use function assert;
    use function is_array;
    final class ComplexityCalculatingVisitor extends NodeVisitorAbstract
    public function __construct(bool $shortCircuitTraversal)
    public function enterNode(Node $node): ?int
    public function result(): ComplexityCollection
    private function cyclomaticComplexity(array $statements): int
    private function classMethodName(ClassMethod $node): string
    private function functionName(Function_ $node): string
--------------------------------------------
Fichier : ./vendor/sebastian/complexity/src/Visitor/CyclomaticComplexityCalculatingVisitor.php
    use function get_class;
    final class CyclomaticComplexityCalculatingVisitor extends NodeVisitorAbstract
    public function enterNode(Node $node): void
    public function cyclomaticComplexity(): int
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Chunk.php
    final class Chunk
    public function __construct(int $start = 0, int $startRange = 1, int $end = 0, int $endRange = 1, array $lines = [])
    public function getStart(): int
    public function getStartRange(): int
    public function getEnd(): int
    public function getEndRange(): int
    public function getLines(): array
    public function setLines(array $lines): void
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Diff.php
    final class Diff
    public function __construct(string $from, string $to, array $chunks = [])
    public function getFrom(): string
    public function getTo(): string
    public function getChunks(): array
    public function setChunks(array $chunks): void
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Differ.php
    use function array_shift;
    use function array_unshift;
    use function array_values;
    use function count;
    use function current;
    use function end;
    use function get_class;
    use function gettype;
    use function is_array;
    use function is_object;
    use function is_string;
    use function key;
    use function min;
    use function preg_split;
    use function prev;
    use function reset;
    use function sprintf;
    use function substr;
    final class Differ
    public function __construct($outputBuilder = null)
    public function diff($from, $to, ?LongestCommonSubsequenceCalculator $lcs = null): string
    public function diffToArray($from, $to, ?LongestCommonSubsequenceCalculator $lcs = null): array
    private function normalizeDiffInput($input)
    private function splitStringByLines(string $input): array
    private function selectLcsImplementation(array $from, array $to): LongestCommonSubsequenceCalculator
    private function calculateEstimatedFootprint(array $from, array $to)
    private function detectUnmatchedLineEndings(array $diff): bool
    private function getLinebreak($line): string
    private static function getArrayDiffParted(array &$from, array &$to): array
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Exception/ConfigurationException.php
    use function get_class;
    use function gettype;
    use function is_object;
    use function sprintf;
    final class ConfigurationException extends InvalidArgumentException
    public function __construct(
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Exception/Exception.php
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Exception/InvalidArgumentException.php
    class InvalidArgumentException extends \InvalidArgumentException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Line.php
    final class Line
    public function __construct(int $type = self::UNCHANGED, string $content = '')
    public function getContent(): string
    public function getType(): int
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/LongestCommonSubsequenceCalculator.php
    public function calculate(array $from, array $to): array;
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/MemoryEfficientLongestCommonSubsequenceCalculator.php
    use function array_fill;
    use function array_merge;
    use function array_reverse;
    use function array_slice;
    use function count;
    use function in_array;
    use function max;
    final class MemoryEfficientLongestCommonSubsequenceCalculator implements LongestCommonSubsequenceCalculator
    public function calculate(array $from, array $to): array
    private function length(array $from, array $to): array
    // don't use max() to avoid function call overhead
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Output/AbstractChunkOutputBuilder.php
    use function count;
    abstract class AbstractChunkOutputBuilder implements DiffOutputBuilderInterface
    protected function getCommonChunks(array $diff, int $lineThreshold = 5): array
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Output/DiffOnlyOutputBuilder.php
    use function fclose;
    use function fopen;
    use function fwrite;
    use function stream_get_contents;
    use function substr;
    final class DiffOnlyOutputBuilder implements DiffOutputBuilderInterface
    public function __construct(string $header = "--- Original\n+++ New\n")
    public function getDiff(array $diff): string
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Output/DiffOutputBuilderInterface.php
    public function getDiff(array $diff): string;
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Output/StrictUnifiedDiffOutputBuilder.php
    use function array_merge;
    use function array_splice;
    use function count;
    use function fclose;
    use function fopen;
    use function fwrite;
    use function is_bool;
    use function is_int;
    use function is_string;
    use function max;
    use function min;
    use function sprintf;
    use function stream_get_contents;
    use function substr;
    final class StrictUnifiedDiffOutputBuilder implements DiffOutputBuilderInterface
    public function __construct(array $options = [])
    public function getDiff(array $diff): string
    private function writeDiffHunks($output, array $diff): void
    private function writeHunk(
    private function assertString(array $options, string $option): void
    private function assertStringOrNull(array $options, string $option): void
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Output/UnifiedDiffOutputBuilder.php
    use function array_splice;
    use function count;
    use function fclose;
    use function fopen;
    use function fwrite;
    use function max;
    use function min;
    use function stream_get_contents;
    use function strlen;
    use function substr;
    final class UnifiedDiffOutputBuilder extends AbstractChunkOutputBuilder
    public function __construct(string $header = "--- Original\n+++ New\n", bool $addLineNumbers = false)
    public function getDiff(array $diff): string
    private function writeDiffHunks($output, array $diff): void
    private function writeHunk(
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/Parser.php
    use function array_pop;
    use function count;
    use function max;
    use function preg_match;
    use function preg_split;
    final class Parser
    public function parse(string $string): array
    private function parseFileDiff(Diff $diff, array $lines): void
--------------------------------------------
Fichier : ./vendor/sebastian/diff/src/TimeEfficientLongestCommonSubsequenceCalculator.php
    use function array_reverse;
    use function count;
    use function max;
    final class TimeEfficientLongestCommonSubsequenceCalculator implements LongestCommonSubsequenceCalculator
    public function calculate(array $from, array $to): array
    // don't use max() to avoid function call overhead
--------------------------------------------
Fichier : ./vendor/sebastian/environment/src/Console.php
    use function defined;
    use function fclose;
    use function fstat;
    use function function_exists;
    use function getenv;
    use function is_resource;
    use function is_string;
    use function posix_isatty;
    use function preg_match;
    use function proc_close;
    use function proc_open;
    use function sapi_windows_vt100_support;
    use function shell_exec;
    use function stream_get_contents;
    use function stream_isatty;
    use function trim;
    final class Console
    public function hasColorSupport(): bool
    public function getNumberOfColumns(): int
    public function isInteractive($fileDescriptor = self::STDOUT): bool
    private function isWindows(): bool
    private function getNumberOfColumnsInteractive(): int
    private function getNumberOfColumnsWindows(): int
--------------------------------------------
Fichier : ./vendor/sebastian/environment/src/OperatingSystem.php
    use function defined;
    final class OperatingSystem
    public function getFamily(): string
--------------------------------------------
Fichier : ./vendor/sebastian/environment/src/Runtime.php
    use function array_map;
    use function array_merge;
    use function defined;
    use function escapeshellarg;
    use function explode;
    use function extension_loaded;
    use function getenv;
    use function ini_get;
    use function is_readable;
    use function parse_ini_file;
    use function php_ini_loaded_file;
    use function php_ini_scanned_files;
    use function phpversion;
    use function sprintf;
    use function strpos;
    * Utility class for HHVM/PHP environment handling.
    final class Runtime
    public function canCollectCodeCoverage(): bool
    public function discardsComments(): bool
    public function performsJustInTimeCompilation(): bool
    public function getBinary(): string
    public function getNameWithVersion(): string
    public function getNameWithVersionAndCodeCoverageDriver(): string
    public function getName(): string
    public function getVendorUrl(): string
    public function getVersion(): string
    public function hasXdebug(): bool
    public function isHHVM(): bool
    public function isPHP(): bool
    public function isPHPDBG(): bool
    public function hasPHPDBGCodeCoverage(): bool
    public function hasPCOV(): bool
    public function getCurrentSettings(array $values): array
    private function isOpcacheActive(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/exporter/src/Exporter.php
    use function bin2hex;
    use function count;
    use function function_exists;
    use function get_class;
    use function get_resource_type;
    use function gettype;
    use function implode;
    use function ini_get;
    use function ini_set;
    use function is_array;
    use function is_float;
    use function is_object;
    use function is_resource;
    use function is_string;
    use function mb_strlen;
    use function mb_substr;
    use function preg_match;
    use function spl_object_hash;
    use function sprintf;
    use function str_repeat;
    use function str_replace;
    use function strlen;
    use function substr;
    use function var_export;
    class Exporter
    public function export($value, $indentation = 0)
    public function shortenedRecursiveExport(&$data, ?Context $context = null)
    public function shortenedExport($value)
    public function toArray($value)
    protected function recursiveExport(&$value, $indentation, $processed = null)
    $class = get_class($value);
--------------------------------------------
Fichier : ./vendor/sebastian/global-state/src/CodeExporter.php
    use function is_array;
    use function is_scalar;
    use function serialize;
    use function sprintf;
    use function var_export;
    final class CodeExporter
    public function constants(Snapshot $snapshot): string
    public function globalVariables(Snapshot $snapshot): string
    function ()
    public function iniSettings(Snapshot $snapshot): string
    private function exportVariable($variable): string
    private function arrayOnlyContainsScalars(array $array): bool
--------------------------------------------
Fichier : ./vendor/sebastian/global-state/src/exceptions/Exception.php
--------------------------------------------
Fichier : ./vendor/sebastian/global-state/src/exceptions/RuntimeException.php
    final class RuntimeException extends \RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/global-state/src/ExcludeList.php
    use function in_array;
    use function strpos;
    final class ExcludeList
    public function addGlobalVariable(string $variableName): void
    public function addClass(string $className): void
    public function addSubclassesOf(string $className): void
    public function addImplementorsOf(string $interfaceName): void
    public function addClassNamePrefix(string $classNamePrefix): void
    public function addStaticAttribute(string $className, string $attributeName): void
    public function isGlobalVariableExcluded(string $variableName): bool
    public function isStaticAttributeExcluded(string $className, string $attributeName): bool
    $class = new ReflectionClass($className);
--------------------------------------------
Fichier : ./vendor/sebastian/global-state/src/Restorer.php
    use function array_diff;
    use function array_key_exists;
    use function array_keys;
    use function array_merge;
    use function function_exists;
    use function get_defined_functions;
    use function in_array;
    use function is_array;
    class Restorer
    * Deletes function definitions that are not defined in a snapshot.
    * @throws RuntimeException when the uopz_delete() function is not available
    public function restoreFunctions(Snapshot $snapshot): void
    throw new RuntimeException('The uopz_delete() function is required for this operation');
    public function restoreGlobalVariables(Snapshot $snapshot): void
    public function restoreStaticAttributes(Snapshot $snapshot): void
    $class    = new ReflectionClass($className);
    private function restoreSuperGlobalArray(Snapshot $snapshot, string $superGlobalArray): void
--------------------------------------------
Fichier : ./vendor/sebastian/global-state/src/Snapshot.php
    use function array_keys;
    use function array_merge;
    use function array_reverse;
    use function func_get_args;
    use function get_declared_classes;
    use function get_declared_interfaces;
    use function get_declared_traits;
    use function get_defined_constants;
    use function get_defined_functions;
    use function get_included_files;
    use function in_array;
    use function ini_get_all;
    use function is_array;
    use function is_object;
    use function is_resource;
    use function is_scalar;
    use function serialize;
    use function unserialize;
    class Snapshot
    public function __construct(?ExcludeList $excludeList = null, bool $includeGlobalVariables = true, bool $includeStaticAttributes = true, bool $includeConstants = true, bool $includeFunctions = true, bool $includeClasses = true, bool $includeInterfaces = true, bool $includeTraits = true, bool $includeIniSettings = true, bool $includeIncludedFiles = true)
    public function excludeList(): ExcludeList
    public function globalVariables(): array
    public function superGlobalVariables(): array
    public function superGlobalArrays(): array
    public function staticAttributes(): array
    public function iniSettings(): array
    public function includedFiles(): array
    public function constants(): array
    public function functions(): array
    public function interfaces(): array
    public function classes(): array
    public function traits(): array
    private function snapshotConstants(): void
    private function snapshotFunctions(): void
    private function snapshotClasses(): void
    $class = new ReflectionClass($className);
    private function snapshotInterfaces(): void
    $class = new ReflectionClass($interfaceName);
    private function snapshotGlobals(): void
    private function snapshotSuperGlobalArray(string $superGlobalArray): void
    private function snapshotStaticAttributes(): void
    $class    = new ReflectionClass($className);
    private function setupSuperGlobalArrays(): void
    private function canBeSerialized($variable): bool
    $class = new ReflectionClass($value);
    private function enumerateObjectsAndResources($variable): array
--------------------------------------------
Fichier : ./vendor/sebastian/lines-of-code/src/Counter.php
    use function substr_count;
    final class Counter
    public function countInSourceFile(string $sourceFile): LinesOfCode
    public function countInSourceString(string $source): LinesOfCode
    public function countInAbstractSyntaxTree(int $linesOfCode, array $nodes): LinesOfCode
--------------------------------------------
Fichier : ./vendor/sebastian/lines-of-code/src/Exception/Exception.php
--------------------------------------------
Fichier : ./vendor/sebastian/lines-of-code/src/Exception/IllogicalValuesException.php
    final class IllogicalValuesException extends LogicException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/lines-of-code/src/Exception/NegativeValueException.php
    final class NegativeValueException extends InvalidArgumentException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/lines-of-code/src/Exception/RuntimeException.php
    final class RuntimeException extends \RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/lines-of-code/src/LineCountingVisitor.php
    use function array_merge;
    use function array_unique;
    use function count;
    final class LineCountingVisitor extends NodeVisitorAbstract
    public function __construct(int $linesOfCode)
    public function enterNode(Node $node): void
    public function result(): LinesOfCode
    private function comments(): array
--------------------------------------------
Fichier : ./vendor/sebastian/lines-of-code/src/LinesOfCode.php
    final class LinesOfCode
    public function __construct(int $linesOfCode, int $commentLinesOfCode, int $nonCommentLinesOfCode, int $logicalLinesOfCode)
    public function linesOfCode(): int
    public function commentLinesOfCode(): int
    public function nonCommentLinesOfCode(): int
    public function logicalLinesOfCode(): int
    public function plus(self $other): self
--------------------------------------------
Fichier : ./vendor/sebastian/object-enumerator/src/Enumerator.php
    use function array_merge;
    use function func_get_args;
    use function is_array;
    use function is_object;
    class Enumerator
    public function enumerate($variable)
--------------------------------------------
Fichier : ./vendor/sebastian/object-enumerator/src/Exception.php
--------------------------------------------
Fichier : ./vendor/sebastian/object-enumerator/src/InvalidArgumentException.php
    class InvalidArgumentException extends \InvalidArgumentException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/object-reflector/src/Exception.php
--------------------------------------------
Fichier : ./vendor/sebastian/object-reflector/src/InvalidArgumentException.php
    class InvalidArgumentException extends \InvalidArgumentException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/object-reflector/src/ObjectReflector.php
    use function count;
    use function explode;
    use function get_class;
    use function is_object;
    class ObjectReflector
    public function getAttributes($object): array
--------------------------------------------
Fichier : ./vendor/sebastian/recursion-context/src/Context.php
    use function array_key_exists;
    use function array_pop;
    use function array_slice;
    use function count;
    use function is_array;
    use function is_object;
    use function random_int;
    use function spl_object_hash;
    final class Context
    public function __construct()
    public function __destruct()
    public function add(&$value)
    public function contains(&$value)
    private function addArray(array &$array)
    private function addObject($object): string
    private function containsArray(array &$array)
    private function containsObject($value)
--------------------------------------------
Fichier : ./vendor/sebastian/recursion-context/src/Exception.php
--------------------------------------------
Fichier : ./vendor/sebastian/recursion-context/src/InvalidArgumentException.php
    final class InvalidArgumentException extends \InvalidArgumentException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/resource-operations/build/generate.php
    foreach ($functions as $function => $arguments) {
    final class ResourceOperations
    public static function getFunctions(): array
--------------------------------------------
Fichier : ./vendor/sebastian/resource-operations/src/ResourceOperations.php
    final class ResourceOperations
    public static function getFunctions(): array
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/exception/Exception.php
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/exception/RuntimeException.php
    final class RuntimeException extends \RuntimeException implements Exception
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/Parameter.php
    final class Parameter
    public function __construct(string $name, Type $type)
    public function name(): string
    public function type(): Type
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/ReflectionMapper.php
    use function assert;
    final class ReflectionMapper
    public function fromParameterTypes(ReflectionFunctionAbstract $functionOrMethod): array
    public function fromReturnType(ReflectionFunctionAbstract $functionOrMethod): Type
    private function mapNamedType(ReflectionNamedType $type, ReflectionFunctionAbstract $functionOrMethod): Type
    private function mapUnionType(ReflectionUnionType $type, ReflectionFunctionAbstract $functionOrMethod): Type
    private function mapIntersectionType(ReflectionIntersectionType $type, ReflectionFunctionAbstract $functionOrMethod): Type
    private function hasReturnType(ReflectionFunctionAbstract $functionOrMethod): bool
    private function returnType(ReflectionFunctionAbstract $functionOrMethod): ?ReflectionType
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/CallableType.php
    use function assert;
    use function class_exists;
    use function count;
    use function explode;
    use function function_exists;
    use function is_array;
    use function is_object;
    use function is_string;
    final class CallableType extends Type
    public function __construct(bool $nullable)
    public function isAssignable(Type $other): bool
    public function name(): string
    public function allowsNull(): bool
    public function isCallable(): bool
    private function isClosure(ObjectType $type): bool
    private function hasInvokeMethod(ObjectType $type): bool
    $class = new ReflectionClass($className);
    private function isFunction(SimpleType $type): bool
    private function isObjectCallback(SimpleType $type): bool
    private function isClassCallback(SimpleType $type): bool
    $class = new ReflectionClass($className);
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/FalseType.php
    final class FalseType extends Type
    public function isAssignable(Type $other): bool
    public function name(): string
    public function allowsNull(): bool
    public function isFalse(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/GenericObjectType.php
    final class GenericObjectType extends Type
    public function __construct(bool $nullable)
    public function isAssignable(Type $other): bool
    public function name(): string
    public function allowsNull(): bool
    public function isGenericObject(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/IntersectionType.php
    use function assert;
    use function count;
    use function implode;
    use function in_array;
    use function sort;
    final class IntersectionType extends Type
    public function __construct(Type ...$types)
    public function isAssignable(Type $other): bool
    public function asString(): string
    public function name(): string
    public function allowsNull(): bool
    public function isIntersection(): bool
    public function types(): array
    private function ensureMinimumOfTwoTypes(Type ...$types): void
    private function ensureOnlyValidTypes(Type ...$types): void
    private function ensureNoDuplicateTypes(Type ...$types): void
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/IterableType.php
    use function assert;
    use function class_exists;
    use function is_iterable;
    final class IterableType extends Type
    public function __construct(bool $nullable)
    public function isAssignable(Type $other): bool
    public function name(): string
    public function allowsNull(): bool
    public function isIterable(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/MixedType.php
    final class MixedType extends Type
    public function isAssignable(Type $other): bool
    public function asString(): string
    public function name(): string
    public function allowsNull(): bool
    public function isMixed(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/NeverType.php
    final class NeverType extends Type
    public function isAssignable(Type $other): bool
    public function name(): string
    public function allowsNull(): bool
    public function isNever(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/NullType.php
    final class NullType extends Type
    public function isAssignable(Type $other): bool
    public function name(): string
    public function asString(): string
    public function allowsNull(): bool
    public function isNull(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/ObjectType.php
    use function is_subclass_of;
    use function strcasecmp;
    final class ObjectType extends Type
    public function __construct(TypeName $className, bool $allowsNull)
    public function isAssignable(Type $other): bool
    public function name(): string
    public function allowsNull(): bool
    public function className(): TypeName
    public function isObject(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/SimpleType.php
    use function strtolower;
    final class SimpleType extends Type
    public function __construct(string $name, bool $nullable, $value = null)
    public function isAssignable(Type $other): bool
    public function name(): string
    public function allowsNull(): bool
    public function value()
    public function isSimple(): bool
    private function normalize(string $name): string
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/StaticType.php
    final class StaticType extends Type
    public function __construct(TypeName $className, bool $allowsNull)
    public function isAssignable(Type $other): bool
    public function name(): string
    public function allowsNull(): bool
    public function isStatic(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/TrueType.php
    final class TrueType extends Type
    public function isAssignable(Type $other): bool
    public function name(): string
    public function allowsNull(): bool
    public function isTrue(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/Type.php
    use function get_class;
    use function gettype;
    use function strtolower;
    use function version_compare;
    abstract class Type
    public static function fromValue($value, bool $allowsNull): self
    public static function fromName(string $typeName, bool $allowsNull): self
    public function asString(): string
    public function isCallable(): bool
    public function isTrue(): bool
    public function isFalse(): bool
    public function isGenericObject(): bool
    public function isIntersection(): bool
    public function isIterable(): bool
    public function isMixed(): bool
    public function isNever(): bool
    public function isNull(): bool
    public function isObject(): bool
    public function isSimple(): bool
    public function isStatic(): bool
    public function isUnion(): bool
    public function isUnknown(): bool
    public function isVoid(): bool
    abstract public function isAssignable(self $other): bool;
    abstract public function name(): string;
    abstract public function allowsNull(): bool;
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/UnionType.php
    use function count;
    use function implode;
    use function sort;
    final class UnionType extends Type
    public function __construct(Type ...$types)
    public function isAssignable(Type $other): bool
    public function asString(): string
    public function name(): string
    public function allowsNull(): bool
    public function isUnion(): bool
    public function containsIntersectionTypes(): bool
    public function types(): array
    private function ensureMinimumOfTwoTypes(Type ...$types): void
    private function ensureOnlyValidTypes(Type ...$types): void
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/UnknownType.php
    final class UnknownType extends Type
    public function isAssignable(Type $other): bool
    public function name(): string
    public function asString(): string
    public function allowsNull(): bool
    public function isUnknown(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/type/VoidType.php
    final class VoidType extends Type
    public function isAssignable(Type $other): bool
    public function name(): string
    public function allowsNull(): bool
    public function isVoid(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/type/src/TypeName.php
    use function array_pop;
    use function explode;
    use function implode;
    use function substr;
    final class TypeName
    public static function fromQualifiedName(string $fullClassName): self
    public static function fromReflection(ReflectionClass $type): self
    public function __construct(?string $namespaceName, string $simpleName)
    public function namespaceName(): ?string
    public function simpleName(): string
    public function qualifiedName(): string
    public function isNamespaced(): bool
--------------------------------------------
Fichier : ./vendor/sebastian/version/src/Version.php
    final class Version
    public function __construct(string $release, string $path)
    public function getVersion(): string
    private function getGitInformation(string $path)
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-ctype/bootstrap.php
    function ctype_alnum($text) { return p\Ctype::ctype_alnum($text); }
    function ctype_alpha($text) { return p\Ctype::ctype_alpha($text); }
    function ctype_cntrl($text) { return p\Ctype::ctype_cntrl($text); }
    function ctype_digit($text) { return p\Ctype::ctype_digit($text); }
    function ctype_graph($text) { return p\Ctype::ctype_graph($text); }
    function ctype_lower($text) { return p\Ctype::ctype_lower($text); }
    function ctype_print($text) { return p\Ctype::ctype_print($text); }
    function ctype_punct($text) { return p\Ctype::ctype_punct($text); }
    function ctype_space($text) { return p\Ctype::ctype_space($text); }
    function ctype_upper($text) { return p\Ctype::ctype_upper($text); }
    function ctype_xdigit($text) { return p\Ctype::ctype_xdigit($text); }
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-ctype/bootstrap80.php
    function ctype_alnum(mixed $text): bool { return p\Ctype::ctype_alnum($text); }
    function ctype_alpha(mixed $text): bool { return p\Ctype::ctype_alpha($text); }
    function ctype_cntrl(mixed $text): bool { return p\Ctype::ctype_cntrl($text); }
    function ctype_digit(mixed $text): bool { return p\Ctype::ctype_digit($text); }
    function ctype_graph(mixed $text): bool { return p\Ctype::ctype_graph($text); }
    function ctype_lower(mixed $text): bool { return p\Ctype::ctype_lower($text); }
    function ctype_print(mixed $text): bool { return p\Ctype::ctype_print($text); }
    function ctype_punct(mixed $text): bool { return p\Ctype::ctype_punct($text); }
    function ctype_space(mixed $text): bool { return p\Ctype::ctype_space($text); }
    function ctype_upper(mixed $text): bool { return p\Ctype::ctype_upper($text); }
    function ctype_xdigit(mixed $text): bool { return p\Ctype::ctype_xdigit($text); }
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-ctype/Ctype.php
    final class Ctype
    public static function ctype_alnum($text)
    public static function ctype_alpha($text)
    public static function ctype_cntrl($text)
    public static function ctype_digit($text)
    public static function ctype_graph($text)
    public static function ctype_lower($text)
    * Returns TRUE if every character in text will actually create output (including blanks). Returns FALSE if text contains control characters or characters that do not have any output or control function at all.
    public static function ctype_print($text)
    public static function ctype_punct($text)
    public static function ctype_space($text)
    public static function ctype_upper($text)
    public static function ctype_xdigit($text)
    private static function convert_int_to_char_for_ctype($int, $function)
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-mbstring/bootstrap.php
    function mb_convert_encoding($string, $to_encoding, $from_encoding = null) { return p\Mbstring::mb_convert_encoding($string, $to_encoding, $from_encoding); }
    function mb_decode_mimeheader($string) { return p\Mbstring::mb_decode_mimeheader($string); }
    function mb_encode_mimeheader($string, $charset = null, $transfer_encoding = null, $newline = "\r\n", $indent = 0) { return p\Mbstring::mb_encode_mimeheader($string, $charset, $transfer_encoding, $newline, $indent); }
    function mb_decode_numericentity($string, $map, $encoding = null) { return p\Mbstring::mb_decode_numericentity($string, $map, $encoding); }
    function mb_encode_numericentity($string, $map, $encoding = null, $hex = false) { return p\Mbstring::mb_encode_numericentity($string, $map, $encoding, $hex); }
    function mb_convert_case($string, $mode, $encoding = null) { return p\Mbstring::mb_convert_case($string, $mode, $encoding); }
    function mb_internal_encoding($encoding = null) { return p\Mbstring::mb_internal_encoding($encoding); }
    function mb_language($language = null) { return p\Mbstring::mb_language($language); }
    function mb_list_encodings() { return p\Mbstring::mb_list_encodings(); }
    function mb_encoding_aliases($encoding) { return p\Mbstring::mb_encoding_aliases($encoding); }
    function mb_check_encoding($value = null, $encoding = null) { return p\Mbstring::mb_check_encoding($value, $encoding); }
    function mb_detect_encoding($string, $encodings = null, $strict = false) { return p\Mbstring::mb_detect_encoding($string, $encodings, $strict); }
    function mb_detect_order($encoding = null) { return p\Mbstring::mb_detect_order($encoding); }
    function mb_parse_str($string, &$result = []) { parse_str($string, $result); return (bool) $result; }
    function mb_strlen($string, $encoding = null) { return p\Mbstring::mb_strlen($string, $encoding); }
    function mb_strpos($haystack, $needle, $offset = 0, $encoding = null) { return p\Mbstring::mb_strpos($haystack, $needle, $offset, $encoding); }
    function mb_strtolower($string, $encoding = null) { return p\Mbstring::mb_strtolower($string, $encoding); }
    function mb_strtoupper($string, $encoding = null) { return p\Mbstring::mb_strtoupper($string, $encoding); }
    function mb_substitute_character($substitute_character = null) { return p\Mbstring::mb_substitute_character($substitute_character); }
    function mb_substr($string, $start, $length = 2147483647, $encoding = null) { return p\Mbstring::mb_substr($string, $start, $length, $encoding); }
    function mb_stripos($haystack, $needle, $offset = 0, $encoding = null) { return p\Mbstring::mb_stripos($haystack, $needle, $offset, $encoding); }
    function mb_stristr($haystack, $needle, $before_needle = false, $encoding = null) { return p\Mbstring::mb_stristr($haystack, $needle, $before_needle, $encoding); }
    function mb_strrchr($haystack, $needle, $before_needle = false, $encoding = null) { return p\Mbstring::mb_strrchr($haystack, $needle, $before_needle, $encoding); }
    function mb_strrichr($haystack, $needle, $before_needle = false, $encoding = null) { return p\Mbstring::mb_strrichr($haystack, $needle, $before_needle, $encoding); }
    function mb_strripos($haystack, $needle, $offset = 0, $encoding = null) { return p\Mbstring::mb_strripos($haystack, $needle, $offset, $encoding); }
    function mb_strrpos($haystack, $needle, $offset = 0, $encoding = null) { return p\Mbstring::mb_strrpos($haystack, $needle, $offset, $encoding); }
    function mb_strstr($haystack, $needle, $before_needle = false, $encoding = null) { return p\Mbstring::mb_strstr($haystack, $needle, $before_needle, $encoding); }
    function mb_get_info($type = 'all') { return p\Mbstring::mb_get_info($type); }
    function mb_http_output($encoding = null) { return p\Mbstring::mb_http_output($encoding); }
    function mb_strwidth($string, $encoding = null) { return p\Mbstring::mb_strwidth($string, $encoding); }
    function mb_substr_count($haystack, $needle, $encoding = null) { return p\Mbstring::mb_substr_count($haystack, $needle, $encoding); }
    function mb_output_handler($string, $status) { return p\Mbstring::mb_output_handler($string, $status); }
    function mb_http_input($type = null) { return p\Mbstring::mb_http_input($type); }
    function mb_convert_variables($to_encoding, $from_encoding, &...$vars) { return p\Mbstring::mb_convert_variables($to_encoding, $from_encoding, ...$vars); }
    function mb_ord($string, $encoding = null) { return p\Mbstring::mb_ord($string, $encoding); }
    function mb_chr($codepoint, $encoding = null) { return p\Mbstring::mb_chr($codepoint, $encoding); }
    function mb_scrub($string, $encoding = null) { $encoding = null === $encoding ? mb_internal_encoding() : $encoding; return mb_convert_encoding($string, $encoding, $encoding); }
    function mb_str_split($string, $length = 1, $encoding = null) { return p\Mbstring::mb_str_split($string, $length, $encoding); }
    function mb_str_pad(string $string, int $length, string $pad_string = ' ', int $pad_type = STR_PAD_RIGHT, ?string $encoding = null): string { return p\Mbstring::mb_str_pad($string, $length, $pad_string, $pad_type, $encoding); }
    function mb_ucfirst(string $string, ?string $encoding = null): string { return p\Mbstring::mb_ucfirst($string, $encoding); }
    function mb_lcfirst(string $string, ?string $encoding = null): string { return p\Mbstring::mb_lcfirst($string, $encoding); }
    function mb_trim(string $string, ?string $characters = null, ?string $encoding = null): string { return p\Mbstring::mb_trim($string, $characters, $encoding); }
    function mb_ltrim(string $string, ?string $characters = null, ?string $encoding = null): string { return p\Mbstring::mb_ltrim($string, $characters, $encoding); }
    function mb_rtrim(string $string, ?string $characters = null, ?string $encoding = null): string { return p\Mbstring::mb_rtrim($string, $characters, $encoding); }
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-mbstring/bootstrap80.php
    function mb_convert_encoding(array|string|null $string, ?string $to_encoding, array|string|null $from_encoding = null): array|string|false { return p\Mbstring::mb_convert_encoding($string ?? '', (string) $to_encoding, $from_encoding); }
    function mb_decode_mimeheader(?string $string): string { return p\Mbstring::mb_decode_mimeheader((string) $string); }
    function mb_encode_mimeheader(?string $string, ?string $charset = null, ?string $transfer_encoding = null, ?string $newline = "\r\n", ?int $indent = 0): string { return p\Mbstring::mb_encode_mimeheader((string) $string, $charset, $transfer_encoding, (string) $newline, (int) $indent); }
    function mb_decode_numericentity(?string $string, array $map, ?string $encoding = null): string { return p\Mbstring::mb_decode_numericentity((string) $string, $map, $encoding); }
    function mb_encode_numericentity(?string $string, array $map, ?string $encoding = null, ?bool $hex = false): string { return p\Mbstring::mb_encode_numericentity((string) $string, $map, $encoding, (bool) $hex); }
    function mb_convert_case(?string $string, ?int $mode, ?string $encoding = null): string { return p\Mbstring::mb_convert_case((string) $string, (int) $mode, $encoding); }
    function mb_internal_encoding(?string $encoding = null): string|bool { return p\Mbstring::mb_internal_encoding($encoding); }
    function mb_language(?string $language = null): string|bool { return p\Mbstring::mb_language($language); }
    function mb_list_encodings(): array { return p\Mbstring::mb_list_encodings(); }
    function mb_encoding_aliases(?string $encoding): array { return p\Mbstring::mb_encoding_aliases((string) $encoding); }
    function mb_check_encoding(array|string|null $value = null, ?string $encoding = null): bool { return p\Mbstring::mb_check_encoding($value, $encoding); }
    function mb_detect_encoding(?string $string, array|string|null $encodings = null, ?bool $strict = false): string|false { return p\Mbstring::mb_detect_encoding((string) $string, $encodings, (bool) $strict); }
    function mb_detect_order(array|string|null $encoding = null): array|bool { return p\Mbstring::mb_detect_order($encoding); }
    function mb_parse_str(?string $string, &$result = []): bool { parse_str((string) $string, $result); return (bool) $result; }
    function mb_strlen(?string $string, ?string $encoding = null): int { return p\Mbstring::mb_strlen((string) $string, $encoding); }
    function mb_strpos(?string $haystack, ?string $needle, ?int $offset = 0, ?string $encoding = null): int|false { return p\Mbstring::mb_strpos((string) $haystack, (string) $needle, (int) $offset, $encoding); }
    function mb_strtolower(?string $string, ?string $encoding = null): string { return p\Mbstring::mb_strtolower((string) $string, $encoding); }
    function mb_strtoupper(?string $string, ?string $encoding = null): string { return p\Mbstring::mb_strtoupper((string) $string, $encoding); }
    function mb_substitute_character(string|int|null $substitute_character = null): string|int|bool { return p\Mbstring::mb_substitute_character($substitute_character); }
    function mb_substr(?string $string, ?int $start, ?int $length = null, ?string $encoding = null): string { return p\Mbstring::mb_substr((string) $string, (int) $start, $length, $encoding); }
    function mb_stripos(?string $haystack, ?string $needle, ?int $offset = 0, ?string $encoding = null): int|false { return p\Mbstring::mb_stripos((string) $haystack, (string) $needle, (int) $offset, $encoding); }
    function mb_stristr(?string $haystack, ?string $needle, ?bool $before_needle = false, ?string $encoding = null): string|false { return p\Mbstring::mb_stristr((string) $haystack, (string) $needle, (bool) $before_needle, $encoding); }
    function mb_strrchr(?string $haystack, ?string $needle, ?bool $before_needle = false, ?string $encoding = null): string|false { return p\Mbstring::mb_strrchr((string) $haystack, (string) $needle, (bool) $before_needle, $encoding); }
    function mb_strrichr(?string $haystack, ?string $needle, ?bool $before_needle = false, ?string $encoding = null): string|false { return p\Mbstring::mb_strrichr((string) $haystack, (string) $needle, (bool) $before_needle, $encoding); }
    function mb_strripos(?string $haystack, ?string $needle, ?int $offset = 0, ?string $encoding = null): int|false { return p\Mbstring::mb_strripos((string) $haystack, (string) $needle, (int) $offset, $encoding); }
    function mb_strrpos(?string $haystack, ?string $needle, ?int $offset = 0, ?string $encoding = null): int|false { return p\Mbstring::mb_strrpos((string) $haystack, (string) $needle, (int) $offset, $encoding); }
    function mb_strstr(?string $haystack, ?string $needle, ?bool $before_needle = false, ?string $encoding = null): string|false { return p\Mbstring::mb_strstr((string) $haystack, (string) $needle, (bool) $before_needle, $encoding); }
    function mb_get_info(?string $type = 'all'): array|string|int|false|null { return p\Mbstring::mb_get_info((string) $type); }
    function mb_http_output(?string $encoding = null): string|bool { return p\Mbstring::mb_http_output($encoding); }
    function mb_strwidth(?string $string, ?string $encoding = null): int { return p\Mbstring::mb_strwidth((string) $string, $encoding); }
    function mb_substr_count(?string $haystack, ?string $needle, ?string $encoding = null): int { return p\Mbstring::mb_substr_count((string) $haystack, (string) $needle, $encoding); }
    function mb_output_handler(?string $string, ?int $status): string { return p\Mbstring::mb_output_handler((string) $string, (int) $status); }
    function mb_http_input(?string $type = null): array|string|false { return p\Mbstring::mb_http_input($type); }
    function mb_convert_variables(?string $to_encoding, array|string|null $from_encoding, mixed &$var, mixed &...$vars): string|false { return p\Mbstring::mb_convert_variables((string) $to_encoding, $from_encoding ?? '', $var, ...$vars); }
    function mb_ord(?string $string, ?string $encoding = null): int|false { return p\Mbstring::mb_ord((string) $string, $encoding); }
    function mb_chr(?int $codepoint, ?string $encoding = null): string|false { return p\Mbstring::mb_chr((int) $codepoint, $encoding); }
    function mb_scrub(?string $string, ?string $encoding = null): string { $encoding ??= mb_internal_encoding(); return mb_convert_encoding((string) $string, $encoding, $encoding); }
    function mb_str_split(?string $string, ?int $length = 1, ?string $encoding = null): array { return p\Mbstring::mb_str_split((string) $string, (int) $length, $encoding); }
    function mb_str_pad(string $string, int $length, string $pad_string = ' ', int $pad_type = STR_PAD_RIGHT, ?string $encoding = null): string { return p\Mbstring::mb_str_pad($string, $length, $pad_string, $pad_type, $encoding); }
    function mb_ucfirst(string $string, ?string $encoding = null): string { return p\Mbstring::mb_ucfirst($string, $encoding); }
    function mb_lcfirst(string $string, ?string $encoding = null): string { return p\Mbstring::mb_lcfirst($string, $encoding); }
    function mb_trim(string $string, ?string $characters = null, ?string $encoding = null): string { return p\Mbstring::mb_trim($string, $characters, $encoding); }
    function mb_ltrim(string $string, ?string $characters = null, ?string $encoding = null): string { return p\Mbstring::mb_ltrim($string, $characters, $encoding); }
    function mb_rtrim(string $string, ?string $characters = null, ?string $encoding = null): string { return p\Mbstring::mb_rtrim($string, $characters, $encoding); }
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-mbstring/Mbstring.php
    * - mb_output_handler       - Callback function converts character encoding in output buffer
    final class Mbstring
    public static function mb_convert_encoding($s, $toEncoding, $fromEncoding = null)
    public static function mb_convert_variables($toEncoding, $fromEncoding, &...$vars)
    array_walk_recursive($vars, function (&$v) use (&$ok, $toEncoding, $fromEncoding) {
    public static function mb_decode_mimeheader($s)
    public static function mb_encode_mimeheader($s, $charset = null, $transferEncoding = null, $linefeed = null, $indent = null)
    public static function mb_decode_numericentity($s, $convmap, $encoding = null)
    $s = preg_replace_callback('/&#(?:0*([0-9]+)|x0*([0-9a-fA-F]+))(?!&);?/', function (array $m) use ($cnt, $convmap) {
    public static function mb_encode_numericentity($s, $convmap, $encoding = null, $is_hex = false)
    public static function mb_convert_case($s, $mode, $encoding = null)
    public static function mb_internal_encoding($encoding = null)
    public static function mb_language($lang = null)
    public static function mb_list_encodings()
    public static function mb_encoding_aliases($encoding)
    public static function mb_check_encoding($var = null, $encoding = null)
    public static function mb_detect_encoding($str, $encodingList = null, $strict = false)
    public static function mb_detect_order($encodingList = null)
    public static function mb_strlen($s, $encoding = null)
    public static function mb_strpos($haystack, $needle, $offset = 0, $encoding = null)
    public static function mb_strrpos($haystack, $needle, $offset = 0, $encoding = null)
    public static function mb_str_split($string, $split_length = 1, $encoding = null)
    public static function mb_strtolower($s, $encoding = null)
    public static function mb_strtoupper($s, $encoding = null)
    public static function mb_substitute_character($c = null)
    public static function mb_substr($s, $start, $length = null, $encoding = null)
    public static function mb_stripos($haystack, $needle, $offset = 0, $encoding = null)
    public static function mb_stristr($haystack, $needle, $part = false, $encoding = null)
    public static function mb_strrchr($haystack, $needle, $part = false, $encoding = null)
    public static function mb_strrichr($haystack, $needle, $part = false, $encoding = null)
    public static function mb_strripos($haystack, $needle, $offset = 0, $encoding = null)
    public static function mb_strstr($haystack, $needle, $part = false, $encoding = null)
    public static function mb_get_info($type = 'all')
    public static function mb_http_input($type = '')
    public static function mb_http_output($encoding = null)
    public static function mb_strwidth($s, $encoding = null)
    public static function mb_substr_count($haystack, $needle, $encoding = null)
    public static function mb_output_handler($contents, $status)
    public static function mb_chr($code, $encoding = null)
    public static function mb_ord($s, $encoding = null)
    public static function mb_str_pad(string $string, int $length, string $pad_string = ' ', int $pad_type = \STR_PAD_RIGHT, ?string $encoding = null): string
    public static function mb_ucfirst(string $string, ?string $encoding = null): string
    public static function mb_lcfirst(string $string, ?string $encoding = null): string
    private static function getSubpart($pos, $part, $haystack, $encoding)
    private static function html_encoding_callback(array $m)
    private static function title_case(array $s)
    private static function getData($file)
    private static function getEncoding($encoding)
    public static function mb_trim(string $string, ?string $characters = null, ?string $encoding = null): string
    public static function mb_ltrim(string $string, ?string $characters = null, ?string $encoding = null): string
    public static function mb_rtrim(string $string, ?string $characters = null, ?string $encoding = null): string
    private static function mb_internal_trim(string $regex, string $string, ?string $characters, ?string $encoding, string $function): string
    private static function assertEncoding(string $encoding, string $errorFormat): void
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-mbstring/Resources/unidata/caseFolding.php
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-mbstring/Resources/unidata/lowerCase.php
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-mbstring/Resources/unidata/titleCaseRegexp.php
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-mbstring/Resources/unidata/upperCase.php
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-php80/bootstrap.php
    function fdiv(float $num1, float $num2): float { return p\Php80::fdiv($num1, $num2); }
    function preg_last_error_msg(): string { return p\Php80::preg_last_error_msg(); }
    function str_contains(?string $haystack, ?string $needle): bool { return p\Php80::str_contains($haystack ?? '', $needle ?? ''); }
    function str_starts_with(?string $haystack, ?string $needle): bool { return p\Php80::str_starts_with($haystack ?? '', $needle ?? ''); }
    function str_ends_with(?string $haystack, ?string $needle): bool { return p\Php80::str_ends_with($haystack ?? '', $needle ?? ''); }
    function get_debug_type($value): string { return p\Php80::get_debug_type($value); }
    function get_resource_id($resource): int { return p\Php80::get_resource_id($resource); }
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-php80/Php80.php
    final class Php80
    public static function fdiv(float $dividend, float $divisor): float
    public static function get_debug_type($value): string
    $class = \get_class($value);
    public static function get_resource_id($res): int
    public static function preg_last_error_msg(): string
    public static function str_contains(string $haystack, string $needle): bool
    public static function str_starts_with(string $haystack, string $needle): bool
    public static function str_ends_with(string $haystack, string $needle): bool
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-php80/PhpToken.php
    class PhpToken implements \Stringable
    public function __construct(int $id, string $text, int $line = -1, int $position = -1)
    public function getTokenName(): ?string
    public function is($kind): bool
    public function isIgnorable(): bool
    public function __toString(): string
    public static function tokenize(string $code, int $flags = 0): array
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-php80/Resources/stubs/Attribute.php
    final class Attribute
    public function __construct(int $flags = self::TARGET_ALL)
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-php80/Resources/stubs/PhpToken.php
    class PhpToken extends Symfony\Polyfill\Php80\PhpToken
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-php80/Resources/stubs/Stringable.php
    public function __toString();
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-php80/Resources/stubs/UnhandledMatchError.php
    class UnhandledMatchError extends Error
--------------------------------------------
Fichier : ./vendor/symfony/polyfill-php80/Resources/stubs/ValueError.php
    class ValueError extends Error
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/config/tcpdf_config.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/aealarabiya.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/aefurat.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/cid0cs.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/cid0ct.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/cid0jp.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/cid0kr.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/courier.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/courierb.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/courierbi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/courieri.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusans.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusansb.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusansbi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusanscondensed.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusanscondensedb.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusanscondensedbi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusanscondensedi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusansextralight.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusansi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusansmono.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusansmonob.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusansmonobi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavusansmonoi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavuserif.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavuserifb.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavuserifbi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavuserifcondensed.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavuserifcondensedb.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavuserifcondensedbi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavuserifcondensedi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/dejavuserifi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/freemono.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/freemonob.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/freemonobi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/freemonoi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/freesans.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/freesansb.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/freesansbi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/freesansi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/freeserif.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/freeserifb.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/freeserifbi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/freeserifi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/helvetica.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/helveticab.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/helveticabi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/helveticai.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/hysmyeongjostdmedium.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/kozgopromedium.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/kozminproregular.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/msungstdlight.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfacourier.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfacourierb.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfacourierbi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfacourieri.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfahelvetica.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfahelveticab.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfahelveticabi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfahelveticai.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfasymbol.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfatimes.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfatimesb.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfatimesbi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfatimesi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/pdfazapfdingbats.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/stsongstdlight.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/symbol.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/times.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/timesb.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/timesbi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/timesi.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/uni2cid_ac15.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/uni2cid_ag15.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/uni2cid_aj16.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/uni2cid_ak12.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/fonts/zapfdingbats.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/include/barcodes/datamatrix.php
    * Indicate that definitions for this class are set
    * @class Datamatrix
    class Datamatrix {
    * This is the class constructor.
    public function __construct($code) {
    public function getBarcodeArray() {
    protected function getGFProduct($a, $b, $log, $alog, $gf) {
    protected function getErrorCorrection($wd, $nb, $nd, $nc, $gf=256, $pp=301) {
    protected function get253StateCodeword($cwpad, $cwpos) {
    protected function get255StateCodeword($cwpad, $cwpos) {
    protected function isCharMode($chr, $mode) {
    protected function lookAheadTest($data, $pos, $mode) {
    protected function getSwitchEncodingCodeword($mode) {
    protected function getMaxDataCodewords($numcw) {
    protected function getHighLevelEncoding($data) {
    protected function placeModule($marr, $nrow, $ncol, $row, $col, $chr, $bit) {
    protected function placeUtah($marr, $nrow, $ncol, $row, $col, $chr) {
    protected function placeCornerA($marr, $nrow, $ncol, $chr) {
    protected function placeCornerB($marr, $nrow, $ncol, $chr) {
    protected function placeCornerC($marr, $nrow, $ncol, $chr) {
    protected function placeCornerD($marr, $nrow, $ncol, $chr) {
    protected function getPlacementMap($nrow, $ncol) {
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/include/barcodes/pdf417.php
    * Indicate that definitions for this class are set
    * @class PDF417
    class PDF417 {
    * This is the class constructor.
    public function __construct($code, $ecl=-1, $aspectratio=2, $macro=array()) {
    public function getBarcodeArray() {
    protected function getErrorCorrectionLevel($ecl, $numcw) {
    protected function getErrorCorrection($cw, $ecl) {
    protected function getInputSequences($code) {
    protected function getCompaction($mode, $code, $addmode=true) {
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/include/barcodes/qrcode.php
    // This class supports QR Code model 2, described in
    // This class is derived from the following projects:
    * This class supports QR Code model 2, described in JIS (Japanese Industrial Standards) X0510:2004 or ISO/IEC 18004.
    * This class is derived from "PHP QR Code encoder" by Dominik Dzienia (http://phpqrcode.sourceforge.net/) based on "libqrencode C library 3.1.1." by Kentaro Fukuchi (http://megaui.net/fukuchi/works/qrencode/index.en.html), contains Reed-Solomon code written by Phil Karn, KA9Q. QR Code is registered trademark of DENSO WAVE INCORPORATED (http://www.denso-wave.com/qrcode/index-e.html).
    * Please read comments on this class source file for full copyright and license information.
    * Indicate that definitions for this class are set
    // QRcode has a function of an error correcting for miss reading that white is black.
    * @class QRcode
    * This class supports QR Code model 2, described in JIS (Japanese Industrial Standards) X0510:2004 or ISO/IEC 18004.
    * This class is derived from "PHP QR Code encoder" by Dominik Dzienia (http://phpqrcode.sourceforge.net/) based on "libqrencode C library 3.1.1." by Kentaro Fukuchi (http://megaui.net/fukuchi/works/qrencode/index.en.html), contains Reed-Solomon code written by Phil Karn, KA9Q. QR Code is registered trademark of DENSO WAVE INCORPORATED (http://www.denso-wave.com/qrcode/index-e.html).
    * Please read comments on this class source file for full copyright and license information.
    class QRcode {
    * This is the class constructor.
    public function __construct($code, $eclevel = 'L') {
    public function getBarcodeArray() {
    protected function binarize($frame) {
    protected function encodeString($string) {
    protected function encodeMask($mask) {
    protected function setFrameAt($at, $val) {
    protected function getFrameAt($at) {
    protected function getNextPosition() {
    protected function init($spec) {
    protected function getCode() {
    protected function writeFormatInformation($width, &$frame, $mask, $level) {
    protected function mask0($x, $y) {
    protected function mask1($x, $y) {
    protected function mask2($x, $y) {
    protected function mask3($x, $y) {
    protected function mask4($x, $y) {
    protected function mask5($x, $y) {
    protected function mask6($x, $y) {
    protected function mask7($x, $y) {
    protected function generateMaskNo($maskNo, $width, $frame) {
    protected function makeMaskNo($maskNo, $width, $s, &$d, $maskGenOnly=false) {
    protected function makeMask($width, $frame, $maskNo, $level) {
    protected function calcN1N3($length) {
    protected function evaluateSymbol($width, $frame) {
    protected function mask($width, $frame, $level) {
    protected function isdigitat($str, $pos) {
    protected function isalnumat($str, $pos) {
    protected function identifyMode($pos) {
    protected function eatNum() {
    protected function eatAn() {
    protected function eatKanji() {
    protected function eat8() {
    protected function splitString() {
    protected function toUpper() {
    protected function newInputItem($mode, $size, $data, $bstream=null) {
    protected function encodeModeNum($inputitem, $version) {
    protected function encodeModeAn($inputitem, $version) {
    protected function encodeMode8($inputitem, $version) {
    protected function encodeModeKanji($inputitem, $version) {
    protected function encodeModeStructure($inputitem) {
    protected function encodeBitStream($inputitem, $version) {
    protected function appendNewInputItem($items, $mode, $size, $data) {
    protected function insertStructuredAppendHeader($items, $size, $index, $parity) {
    protected function calcParity($items) {
    protected function checkModeNum($size, $data) {
    protected function lookAnTable($c) {
    protected function checkModeAn($size, $data) {
    protected function estimateBitsModeNum($size) {
    protected function estimateBitsModeAn($size) {
    protected function estimateBitsMode8($size) {
    protected function estimateBitsModeKanji($size) {
    protected function checkModeKanji($size, $data) {
    protected function check($mode, $size, $data) {
    protected function estimateBitStreamSize($items, $version) {
    protected function estimateVersion($items) {
    protected function lengthOfCode($mode, $version, $bits) {
    protected function createBitStream($items) {
    protected function convertData($items) {
    protected function appendPaddingBit($bstream) {
    protected function mergeBitStream($items) {
    protected function getBitStream($items) {
    protected function getByteStream($items) {
    protected function allocate($setLength) {
    protected function newFromNum($bits, $num) {
    protected function newFromBytes($size, $data) {
    protected function appendBitstream($bitstream, $append) {
    protected function appendNum($bitstream, $bits, $num) {
    protected function appendBytes($bitstream, $size, $data) {
    protected function bitstreamToByte($bstream) {
    protected function qrstrset($srctab, $x, $y, $repl, $replLen=false) {
    protected function getDataLength($version, $level) {
    protected function getECCLength($version, $level){
    protected function getWidth($version) {
    protected function getRemainder($version) {
    protected function getMinimumVersion($size, $level) {
    protected function lengthIndicator($mode, $version) {
    protected function maximumWords($mode, $version) {
    protected function getEccSpec($version, $level, $spec) {
    protected function putAlignmentMarker($frame, $ox, $oy) {
    protected function putAlignmentPattern($version, $frame, $width) {
    protected function getVersionPattern($version) {
    protected function getFormatInfo($mask, $level) {
    protected function putFinderPattern($frame, $ox, $oy) {
    protected function createFrame($version) {
    protected function newFrame($version) {
    protected function rsBlockNum($spec) {
    protected function rsBlockNum1($spec) {
    protected function rsDataCodes1($spec) {
    protected function rsEccCodes1($spec) {
    protected function rsBlockNum2($spec) {
    protected function rsDataCodes2($spec) {
    protected function rsEccCodes2($spec) {
    protected function rsDataLength($spec) {
    protected function rsEccLength($spec) {
    protected function init_rs($symsize, $gfpoly, $fcr, $prim, $nroots, $pad) {
    protected function modnn($rs, $x) {
    protected function init_rs_char($symsize, $gfpoly, $fcr, $prim, $nroots, $pad) {
    protected function encode_rs_char($rs, $data, $parity) {
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/include/tcpdf_colors.php
    * PHP color class for TCPDF
    * @class TCPDF_COLORS
    * PHP color class for TCPDF
    class TCPDF_COLORS {
    public static function getSpotColor($name, &$spotc) {
    public static function convertHTMLColorToDec($hcolor, &$spotc, $defcol=array('R'=>128,'G'=>128,'B'=>128)) {
    // remove class parent (i.e.: color.red)
    public static function getColorStringFromArray($c) {
    public static function _JScolor($color) {
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/include/tcpdf_filters.php
    // Description : This is a PHP class for decoding common PDF filters (PDF 32000-2008 - 7.4 Filters).
    * This is a PHP class for decoding common PDF filters (PDF 32000-2008 - 7.4 Filters).<br>
    * @class TCPDF_FILTERS
    * This is a PHP class for decoding common PDF filters (PDF 32000-2008 - 7.4 Filters).<br>
    * @brief This is a PHP class for decoding common PDF filters.
    class TCPDF_FILTERS {
    public static function getAvailableFilters() {
    public static function decodeFilter($filter, $data) {
    public static function decodeFilterStandard($data) {
    public static function decodeFilterASCIIHexDecode($data) {
    public static function decodeFilterASCII85Decode($data) {
    public static function decodeFilterLZWDecode($data) {
    public static function decodeFilterFlateDecode($data) {
    public static function decodeFilterRunLengthDecode($data) {
    public static function decodeFilterCCITTFaxDecode($data) {
    public static function decodeFilterJBIG2Decode($data) {
    public static function decodeFilterDCTDecode($data) {
    public static function decodeFilterJPXDecode($data) {
    public static function decodeFilterCrypt($data) {
    public static function Error($msg) {
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/include/tcpdf_fonts.php
    * @class TCPDF_FONTS
    class TCPDF_FONTS {
    public static function addTTFfont($fontfile, $fonttype='', $enc='', $flags=32, $outpath='', $platid=3, $encid=1, $addcbbox=false, $link=false) {
    public static function _getTTFtableChecksum($table, $length) {
    public static function _getTrueTypeFontSubset($font, $subsetchars) {
    public static function _putfontwidths($font, $cidoffset=0) {
    public static function updateCIDtoGIDmap($map, $cid, $gid) {
    public static function _getfontpath() {
    public static function getFontFullPath($file, $fontdir=false) {
    public static function getFontRefSize($size, $refsize=12) {
    public static function unichr($c, $unicode=true) {
    public static function unichrUnicode($c) {
    public static function unichrASCII($c) {
    public static function arrUTF8ToUTF16BE($unicode, $setbom=false) {
    public static function UTF8ArrayToUniArray($ta, $isunicode=true) {
    public static function UTF8ArrSubString($strarr, $start='', $end='', $unicode=true) {
    public static function UniArrSubString($uniarr, $start='', $end='') {
    public static function UTF8ArrToLatin1Arr($unicode) {
    public static function UTF8ArrToLatin1($unicode) {
    public static function uniord($uch) {
    public static function getUniord($uch) {
    public static function UTF8StringToArray($str, $isunicode, &$currentfont) {
    public static function UTF8ToLatin1($str, $isunicode, &$currentfont) {
    public static function UTF8ToUTF16BE($str, $setbom, $isunicode, &$currentfont) {
    public static function utf8StrRev($str, $setbom, $forcertl, $isunicode, &$currentfont) {
    public static function utf8StrArrRev($arr, $str, $setbom, $forcertl, $isunicode, &$currentfont) {
    public static function utf8Bidi($ta, $str, $forcertl, $isunicode, &$currentfont) {
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/include/tcpdf_font_data.php
    * @class TCPDF_FONT_DATA
    class TCPDF_FONT_DATA {
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/include/tcpdf_images.php
    * This is a PHP class that contains static image methods for the TCPDF class.<br>
    * @class TCPDF_IMAGES
    * @brief PHP class for generating PDF documents without requiring external extensions.
    class TCPDF_IMAGES {
    public static function getImageFileType($imgfile, $iminfo=array()) {
    public static function setGDImageTransparency($new_image, $image) {
    * This function requires GD library and write access to the directory defined on K_PATH_CACHE constant.
    public static function _toPNG($image, $tempfile) {
    * This function requires GD library and write access to the directory defined on K_PATH_CACHE constant.
    public static function _toJPEG($image, $quality, $tempfile) {
    public static function _parsejpeg($file) {
    public static function _parsepng($file) {
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/include/tcpdf_static.php
    * This is a PHP class that contains static methods for the TCPDF class.<br>
    * @class TCPDF_STATIC
    * @brief PHP class for generating PDF documents without requiring external extensions.
    class TCPDF_STATIC {
    public static function getTCPDFVersion() {
    public static function getTCPDFProducer() {
    public static function isValidURL($url) {
    public static function removeSHY($txt='', $unicode=true) {
    public static function getBorderMode($brd, $position='start', $opencell=true) {
    public static function empty_string($str) {
    public static function getObjFilename($type='tmp', $file_id='') {
    public static function _escape($s) {
    public static function _escapeXML($str) {
    * Creates a copy of a class object
    * @param object $object class object to be cloned
    public static function objclone($object) {
    public static function sendOutputData($data, $length) {
    public static function replacePageNumAliases($page, $replace, $diff=0) {
    public static function getTimestamp($date) {
    public static function getFormattedDate($time) {
    public static function getRandomSeed($seed='') {
    public static function _md5_16($str) {
    public static function _AES($key, $text) {
    public static function _AESnopad($key, $text) {
    public static function _RC4($key, $text, &$last_enc_key, &$last_enc_key_c) {
    // try to use mcrypt function if exist
    public static function getUserPermissionCode($permissions, $mode=0) {
    public static function convertHexStringToString($bs) {
    public static function convertStringToHexString($s) {
    public static function getEncPermissionsString($protection) {
    public static function encodeNameObject($name) {
    public static function getAnnotOptFromJSProp($prop, &$spot_colors, $rtl=false) {
    public static function formatPageNumber($num) {
    public static function formatTOCPageNumber($num) {
    public static function extractCSSproperties($cssdata) {
    public static function fixHTMLCode($html, $default_css, $tagvs, $tidy_options, &$tagvspaces) {
    public static function isValidCSSSelectorForTag($dom, $key, $selector) {
    $class = array();
    $class = explode(' ', strtolower($dom[$key]['attribute']['class']));
    // check if matches class, id, attribute, pseudo-class or pseudo-element
    case ':': { // pseudo-class or pseudo-element
    public static function getCSSdataArray($dom, $key, $css) {
    public static function getTagStyleFromCSSarray($css) {
    public static function intToRoman($number) {
    public static function revstrpos($haystack, $needle, $offset = 0) {
    public static function getHyphenPatternsFromTEX($file) {
    public static function getPathPaintOperator($style, $default='S') {
    public static function getTransformationMatrixProduct($ta, $tb) {
    public static function getSVGTransformMatrix($attribute) {
    public static function getVectorsAngle($x1, $y1, $x2, $y2) {
    * This is a wrapper for the preg_split function to avoid the bug: https://bugs.php.net/bug.php?id=45850
    public static function pregSplit($pattern, $modifiers, $subject, $limit=NULL, $flags=NULL) {
    public static function fopenLocal($filename, $mode) {
    public static function url_exists($url) {
    public static function encodeUrlQuery($url) {
    public static function file_exists($filename) {
    * @return string|false The function returns the read data or FALSE on failure.
    public static function fileGetContents($file) {
    public static function _getULONG($str, $offset) {
    public static function _getUSHORT($str, $offset) {
    public static function _getSHORT($str, $offset) {
    public static function _getFWORD($str, $offset) {
    public static function _getUFWORD($str, $offset) {
    public static function _getFIXED($str, $offset) {
    public static function _getBYTE($str, $offset) {
    public static function rfread($handle, $length) {
    public static function _freadint($f) {
    public static function getPageSizeFromFormat($format) {
    public static function setPageBoxes($page, $type, $llx, $lly, $urx, $ury, $points, $k, $pagedim=array()) {
    public static function swapPageBoxCoordinates($page, $pagedim) {
    public static function getPageLayoutMode($layout='SinglePage') {
    public static function getPageMode($mode='UseNone') {
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/tcpdf.php
    //   This is a PHP class for generating PDF documents without requiring external extensions.
    //   This class was originally derived in 2002 from the Public
    //   Domain FPDF class by Olivier Plathey (http://www.fpdf.org),
    * This is a PHP class for generating PDF documents without requiring external extensions.<br>
    * TCPDF project (http://www.tcpdf.org) was originally derived in 2002 from the Public Domain FPDF class by Olivier Plathey (http://www.fpdf.org), but now is almost entirely rewritten.<br>
    * @class TCPDF
    * PHP class for generating PDF documents without requiring external extensions.
    * TCPDF project (http://www.tcpdf.org) has been originally derived in 2002 from the Public Domain FPDF class by Olivier Plathey (http://www.fpdf.org), but now is almost entirely rewritten.<br>
    * @brief PHP class for generating PDF documents without requiring external extensions.
    class TCPDF {
    * Cloned copy of the current class object.
    * This is the class constructor.
    public function __construct($orientation='P', $unit='mm', $format='A4', $unicode=true, $encoding='UTF-8', $diskcache=false, $pdfa=false) {
    public function __destruct() {
    public function setPageUnit($unit) {
    protected function setPageFormat($format, $orientation='P') {
    public function setPageOrientation($orientation, $autopagebreak=null, $bottommargin=null) {
    * if PCRE unicode support is turned ON ("\P" is the negate class of "\p"):
    public function setSpacesRE($re='/[^\S\xa0]/') {
    public function setRTL($enable, $resetx=true) {
    public function getRTL() {
    public function setTempRTL($mode) {
    public function isRTLTextDir() {
    public function setLastH($h) {
    public function getCellHeight($fontsize, $padding=TRUE) {
    public function resetLastH() {
    public function getLastH() {
    public function setImageScale($scale) {
    public function getImageScale() {
    public function getPageDimensions($pagenum=null) {
    public function getPageWidth($pagenum=null) {
    public function getPageHeight($pagenum=null) {
    public function getBreakMargin($pagenum=null) {
    public function getScaleFactor() {
    public function setMargins($left, $top, $right=null, $keepmargins=false) {
    public function setLeftMargin($margin) {
    public function setTopMargin($margin) {
    public function setRightMargin($margin) {
    public function setCellPadding($pad) {
    public function setCellPaddings($left=null, $top=null, $right=null, $bottom=null) {
    public function getCellPaddings() {
    public function setCellMargins($left=null, $top=null, $right=null, $bottom=null) {
    public function getCellMargins() {
    protected function adjustCellPadding($brd=0) {
    public function setAutoPageBreak($auto, $margin=0) {
    public function getAutoPageBreak() {
    public function setDisplayMode($zoom, $layout='SinglePage', $mode='UseNone') {
    public function setCompression($compress=true) {
    public function setSRGBmode($mode=false) {
    public function setDocInfoUnicode($unicode=true) {
    public function setTitle($title) {
    public function setSubject($subject) {
    public function setAuthor($author) {
    public function setKeywords($keywords) {
    public function setCreator($creator) {
    public function setAllowLocalFiles($allowLocalFiles) {
    public function Error($msg) {
    // unset all class variables
    public function Open() {
    public function Close() {
    // unset all class variables (except critical ones)
    public function setPage($pnum, $resetmargins=false) {
    public function lastPage($resetmargins=false) {
    public function getPage() {
    public function getNumPages() {
    public function addTOCPage($orientation='', $format='', $keepmargins=false) {
    public function endTOCPage() {
    public function AddPage($orientation='', $format='', $keepmargins=false, $tocpage=false) {
    public function endPage($tocpage=false) {
    public function startPage($orientation='', $format='', $tocpage=false) {
    * This function must be called after calling Image() function for a background image.
    public function setPageMark() {
    protected function setContentMark($page=0) {
    public function setHeaderData($ln='', $lw=0, $ht='', $hs='', $tc=array(0,0,0), $lc=array(0,0,0)) {
    public function setFooterData($tc=array(0,0,0), $lc=array(0,0,0)) {
    public function getHeaderData() {
    public function setHeaderMargin($hm=10) {
    public function getHeaderMargin() {
    public function setFooterMargin($fm=10) {
    public function getFooterMargin() {
    public function setPrintHeader($val=true) {
    public function setPrintFooter($val=true) {
    public function getImageRBX() {
    public function getImageRBY() {
    public function resetHeaderTemplate() {
    public function setHeaderTemplateAutoreset($val=true) {
    public function Header() {
    public function Footer() {
    protected function setHeader() {
    protected function setFooter() {
    protected function inPageBody() {
    protected function setTableHeader() {
    public function PageNo() {
    public function getAllSpotColors() {
    public function AddSpotColor($name, $c, $m, $y, $k) {
    public function setSpotColor($type, $name, $tint=100) {
    public function setDrawSpotColor($name, $tint=100) {
    public function setFillSpotColor($name, $tint=100) {
    public function setTextSpotColor($name, $tint=100) {
    public function setColorArray($type, $color, $ret=false) {
    public function setDrawColorArray($color, $ret=false) {
    public function setFillColorArray($color, $ret=false) {
    public function setTextColorArray($color, $ret=false) {
    public function setColor($type, $col1=0, $col2=-1, $col3=-1, $col4=-1, $ret=false, $name='') {
    public function setDrawColor($col1=0, $col2=-1, $col3=-1, $col4=-1, $ret=false, $name='') {
    public function setFillColor($col1=0, $col2=-1, $col3=-1, $col4=-1, $ret=false, $name='') {
    public function setTextColor($col1=0, $col2=-1, $col3=-1, $col4=-1, $ret=false, $name='') {
    public function GetStringWidth($s, $fontname='', $fontstyle='', $fontsize=0, $getarray=false) {
    public function GetArrStringWidth($sa, $fontname='', $fontstyle='', $fontsize=0, $getarray=false) {
    public function GetCharWidth($char, $notlast=true) {
    public function getRawCharWidth($char) {
    public function GetNumChars($s) {
    protected function getFontsList() {
    public function AddFont($family, $style='', $fontfile='', $subset='default') {
    public function setFont($family, $style='', $size=null, $fontfile='', $subset='default', $out=true) {
    public function setFontSize($size, $out=true) {
    public function getFontBBox() {
    public function getAbsFontMeasure($s) {
    public function getCharBBox($char) {
    public function getFontDescent($font, $style='', $size=0) {
    public function getFontAscent($font, $style='', $size=0) {
    public function isCharDefined($char, $font='', $style='') {
    public function replaceMissingChars($text, $font='', $style='', $subs=array()) {
    public function setDefaultMonospacedFont($font) {
    public function AddLink() {
    public function setLink($link, $y=0, $page=-1) {
    public function Link($x, $y, $w, $h, $link, $spaces=0) {
    public function Annotation($x, $y, $w, $h, $text, $opt=array('Subtype'=>'Text'), $spaces=0) {
    public function EmbedFile($opt) {
    public function EmbedFileFromString($filename, $content) {
    protected function _putEmbeddedFiles() {
    * @param boolean $fclip if true activate clipping mode (you must call StartTransform() before this function and StopTransform() to stop the clipping tranformation).
    public function Text($x, $y, $txt, $fstroke=0, $fclip=false, $ffill=true, $border=0, $ln=0, $align='', $fill=false, $link='', $stretch=0, $ignore_min_height=false, $calign='T', $valign='M', $rtloff=false) {
    public function AcceptPageBreak() {
    protected function checkPageBreak($h=0, $y=null, $addpage=true) {
    public function Cell($w, $h=0, $txt='', $border=0, $ln=0, $align='', $fill=false, $link='', $stretch=0, $ignore_min_height=false, $calign='T', $valign='M') {
    protected function getCellCode($w, $h=0, $txt='', $border=0, $ln=0, $align='', $fill=false, $link='', $stretch=0, $ignore_min_height=false, $calign='T', $valign='M') {
    protected function replaceChar($oldchar, $newchar) {
    protected function getCellBorder($x, $y, $w, $h, $brd) {
    public function MultiCell($w, $h, $txt, $border=0, $align='J', $fill=false, $ln=1, $x=null, $y=null, $reseth=true, $stretch=0, $ishtml=false, $autopadding=true, $maxh=0, $valign='T', $fitcell=false) {
    public function getNumLines($txt, $w=0, $reseth=false, $autopadding=true, $cellpadding=null, $border=0) {
    public function getStringHeight($w, $txt, $reseth=false, $autopadding=true, $cellpadding=null, $border=0) {
    public function Write($h, $txt, $link='', $fill=false, $align='', $ln=false, $stretch=0, $firstline=false, $firstblock=false, $maxh=0, $wadj=0, $margin=null) {
    protected function getRemainingWidth() {
    protected function fitBlock($w, $h, $x, $y, $fitonpage=false) {
    * @param mixed $imgmask image object returned by this function or false
    public function Image($file, $x=null, $y=null, $w=0, $h=0, $type='', $link='', $align='', $resize=false, $dpi=300, $palign='', $ismask=false, $imgmask=false, $border=0, $fitbox=false, $hidden=false, $fitonpage=false, $alt=false, $altimgs=array()) {
    $gdfunction = 'imagecreatefrom'.$type;
    protected function ImagePngAlpha($file, $x, $y, $wpx, $hpx, $w, $h, $type, $link, $align, $resize, $dpi, $palign, $filehash='') {
    protected function getGDgamma($img, $c) {
    public function Ln($h=null, $cell=false) {
    public function GetX() {
    public function GetAbsX() {
    public function GetY() {
    public function setX($x, $rtloff=false) {
    public function setY($y, $resetx=true, $rtloff=false) {
    public function setXY($x, $y, $rtloff=false) {
    public function setAbsX($x) {
    public function setAbsY($y) {
    public function setAbsXY($x, $y) {
    public function Output($name='doc.pdf', $dest='I') {
    * Unset all class variables except the following critical variables.
    * @param boolean $destroyall if true destroys all class variables, otherwise preserves critical variables.
    public function _destroy($destroyall=false, $preserve_objcopy=false) {
    protected function _dochecks() {
    $this->Error('Don\'t alter the locale before including class file');
    protected function getInternalPageNumberAliases($a= '') {
    protected function getAllInternalPageNumberAliases() {
    protected function replaceRightShiftPageNumAliases($page, $aliases, $diff) {
    protected function setPageBoxTypes($boxes) {
    protected function _putpages() {
    protected function _getannotsrefs($n) {
    protected function _putannotsobjs() {
    protected function _putAPXObject($w=0, $h=0, $stream='') {
    protected function _putfonts() {
    protected function _puttruetypeunicode($font) {
    protected function _putcidfont0($font) {
    protected function _putimages() {
    protected function _putxobjects() {
    protected function _putspotcolors() {
    protected function _getxobjectdict() {
    protected function _putresourcedict() {
    protected function _putresources() {
    protected function _putinfo() {
    public function setExtraXMP($xmp) {
    public function setExtraXMPRDF($xmp) {
    public function setExtraXMPPdfaextension($xmp) {
    protected function _putXMP() {
    protected function _putcatalog() {
    protected function _putviewerpreferences() {
    protected function _putheader() {
    protected function _enddoc() {
    protected function _beginpage($orientation='', $format='') {
    protected function _endpage() {
    protected function _newobj() {
    protected function _getobj($objid=null) {
    protected function _dounderline($x, $y, $txt) {
    protected function _dounderlinew($x, $y, $w) {
    protected function _dolinethrough($x, $y, $txt) {
    protected function _dolinethroughw($x, $y, $w) {
    protected function _dooverline($x, $y, $txt) {
    protected function _dooverlinew($x, $y, $w) {
    protected function _datastring($s, $n=0) {
    public function setDocCreationTimestamp($time) {
    public function setDocModificationTimestamp($time) {
    public function getDocCreationTimestamp() {
    public function getDocModificationTimestamp() {
    protected function _datestring($n=0, $timestamp=0) {
    protected function _textstring($s, $n=0) {
    protected function _getrawstream($s, $n=0) {
    protected function _out($s) {
    public function setHeaderFont($font) {
    public function getHeaderFont() {
    public function setFooterFont($font) {
    public function getFooterFont() {
    public function setLanguageArray($language) {
    public function getPDFData() {
    public function addHtmlLink($url, $name, $fill=false, $firstline=false, $color=null, $style=-1, $firstblock=false) {
    public function pixelsToUnits($px) {
    * Reverse function for htmlentities.
    public function unhtmlentities($text_to_convert) {
    protected function _objectkey($n) {
    protected function _encrypt_data($n, $s) {
    protected function _putencryption() {
    protected function _Uvalue() {
    protected function _UEvalue() {
    protected function _Ovalue() {
    protected function _OEvalue() {
    protected function _fixAES256Password($password) {
    protected function _generateencryptionkey() {
    public function setProtection($permissions=array('print', 'modify', 'copy', 'annot-forms', 'fill-forms', 'extract', 'assemble', 'print-high'), $user_pass='', $owner_pass=null, $mode=0, $pubkeys=null) {
    * This function must be called before scaling, mirroring, translation, rotation and skewing.
    public function StartTransform() {
    * This function must be called after scaling, mirroring, translation, rotation and skewing.
    public function StopTransform() {
    public function ScaleX($s_x, $x='', $y='') {
    public function ScaleY($s_y, $x='', $y='') {
    public function ScaleXY($s, $x='', $y='') {
    public function Scale($s_x, $s_y, $x=null, $y=null) {
    public function MirrorH($x=null) {
    public function MirrorV($y=null) {
    public function MirrorP($x=null,$y=null) {
    public function MirrorL($angle=0, $x=null,$y=null) {
    public function TranslateX($t_x) {
    public function TranslateY($t_y) {
    public function Translate($t_x, $t_y) {
    public function Rotate($angle, $x=null, $y=null) {
    public function SkewX($angle_x, $x=null, $y=null) {
    public function SkewY($angle_y, $x=null, $y=null) {
    public function Skew($angle_x, $angle_y, $x=null, $y=null) {
    protected function Transform($tm) {
    public function setLineWidth($width) {
    public function GetLineWidth() {
    public function setLineStyle($style, $ret=false) {
    protected function _outPoint($x, $y) {
    protected function _outLine($x, $y) {
    protected function _outRect($x, $y, $w, $h, $op) {
    protected function _outCurve($x1, $y1, $x2, $y2, $x3, $y3) {
    protected function _outCurveV($x2, $y2, $x3, $y3) {
    protected function _outCurveY($x1, $y1, $x3, $y3) {
    public function Line($x1, $y1, $x2, $y2, $style=array()) {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function Rect($x, $y, $w, $h, $style='', $border_style=array(), $fill_color=array()) {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function Curve($x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3, $style='', $line_style=array(), $fill_color=array()) {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function Polycurve($x0, $y0, $segments, $style='', $line_style=array(), $fill_color=array()) {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function Ellipse($x0, $y0, $rx, $ry=0, $angle=0, $astart=0, $afinish=360, $style='', $line_style=array(), $fill_color=array(), $nc=2) {
    protected function _outellipticalarc($xc, $yc, $rx, $ry, $xang=0, $angs=0, $angf=360, $pie=false, $nc=2, $startpoint=true, $ccw=true, $svg=false) {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function Circle($x0, $y0, $r, $angstr=0, $angend=360, $style='', $line_style=array(), $fill_color=array(), $nc=2) {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function PolyLine($p, $style='', $line_style=array(), $fill_color=array()) {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function Polygon($p, $style='', $line_style=array(), $fill_color=array(), $closed=true) {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function RegularPolygon($x0, $y0, $r, $ns, $angle=0, $draw_circle=false, $style='', $line_style=array(), $fill_color=array(), $circle_style='', $circle_outLine_style=array(), $circle_fill_color=array()) {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function StarPolygon($x0, $y0, $r, $nv, $ng, $angle=0, $draw_circle=false, $style='', $line_style=array(), $fill_color=array(), $circle_style='', $circle_outLine_style=array(), $circle_fill_color=array()) {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function RoundedRect($x, $y, $w, $h, $r, $round_corner='1111', $style='', $border_style=array(), $fill_color=array()) {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function RoundedRectXY($x, $y, $w, $h, $rx, $ry, $round_corner='1111', $style='', $border_style=array(), $fill_color=array()) {
    public function Arrow($x0, $y0, $x1, $y1, $head_style=0, $arm_size=5, $arm_angle=15) {
    public function setDestination($name, $y=-1, $page='', $x=-1) {
    public function getDestination() {
    protected function _putdests() {
    public function setBookmark($txt, $level=0, $y=-1, $page='', $style='', $color=array(0,0,0), $x=-1, $link='') {
    public function Bookmark($txt, $level=0, $y=-1, $page='', $style='', $color=array(0,0,0), $x=-1, $link='') {
    protected function sortBookmarks() {
    protected function _putbookmarks() {
    public function IncludeJS($script) {
    public function addJavascriptObject($script, $onload=false) {
    protected function _putjavascript() {
    protected function _addfield($type, $name, $x, $y, $w, $h, $prop) {
    public function setFormDefaultProp($prop=array()) {
    public function getFormDefaultProp() {
    public function TextField($name, $w, $h, $prop=array(), $opt=array(), $x=null, $y=null, $js=false) {
    public function RadioButton($name, $w, $prop=array(), $opt=array(), $onvalue='On', $checked=false, $x=null, $y=null, $js=false) {
    public function ListBox($name, $w, $h, $values, $prop=array(), $opt=array(), $x=null, $y=null, $js=false) {
    public function ComboBox($name, $w, $h, $values, $prop=array(), $opt=array(), $x=null, $y=null, $js=false) {
    public function CheckBox($name, $w, $checked=false, $prop=array(), $opt=array(), $onvalue='Yes', $x=null, $y=null, $js=false) {
    public function Button($name, $w, $h, $caption, $action, $prop=array(), $opt=array(), $x=null, $y=null, $js=false) {
    protected function _putsignature() {
    public function setUserRights(
    public function setSignature($signing_cert='', $private_key='', $private_key_password='', $extracerts='', $cert_type=2, $info=array(), $approval='') {
    public function setSignatureAppearance($x=0, $y=0, $w=0, $h=0, $page=-1, $name='') {
    public function addEmptySignatureAppearance($x=0, $y=0, $w=0, $h=0, $page=-1, $name='') {
    protected function getSignatureAppearanceArray($x=0, $y=0, $w=0, $h=0, $page=-1, $name='') {
    public function setTimeStamp($tsa_host='', $tsa_username='', $tsa_password='', $tsa_cert='') {
    protected function applyTSA($signature) {
    * NOTE: call this function before calling AddPage()
    public function startPageGroup($page=null) {
    public function setStartingPageNumber($num=1) {
    public function getAliasRightShift() {
    public function getAliasNbPages() {
    public function getAliasNumPage() {
    public function getPageGroupAlias() {
    public function getPageNumGroupAlias() {
    public function getGroupPageNo() {
    public function getGroupPageNoFormatted() {
    public function PageNoFormatted() {
    protected function _putocg() {
    public function startLayer($name='', $print=true, $view=true, $lock=true) {
    public function endLayer() {
    public function setVisibility($v) {
    protected function addExtGState($parms) {
    protected function setExtGState($gs) {
    protected function _putextgstates() {
    public function setOverprint($stroking=true, $nonstroking=null, $mode=0) {
    public function getOverprint() {
    public function setAlpha($stroking=1, $bm='Normal', $nonstroking=null, $ais=false) {
    public function getAlpha() {
    public function setJPEGQuality($quality) {
    public function setDefaultTableColumns($cols=4) {
    public function setCellHeightRatio($h) {
    public function getCellHeightRatio() {
    public function setPDFVersion($version='1.7') {
    public function setViewerPreferences($preferences) {
    public function colorRegistrationBar($x, $y, $w, $h, $transition=true, $vertical=false, $colors='A,R,G,B,C,M,Y,K') {
    public function cropMark($x, $y, $w, $h, $type='T,R,B,L', $color=array(100,100,100,100,'All')) {
    public function registrationMark($x, $y, $r, $double=false, $cola=array(100,100,100,100,'All'), $colb=array(0,0,0,0,'None')) {
    public function registrationMarkCMYK($x, $y, $r) {
    public function LinearGradient($x, $y, $w, $h, $col1=array(), $col2=array(), $coords=array(0,0,1,0)) {
    public function RadialGradient($x, $y, $w, $h, $col1=array(), $col2=array(), $coords=array(0.5,0.5,0.5,0.5,1)) {
    * @param boolean $antialias A flag indicating whether to filter the shading function to prevent aliasing artifacts.
    public function CoonsPatchMesh($x, $y, $w, $h, $col1=array(), $col2=array(), $col3=array(), $col4=array(), $coords=array(0.00,0.0,0.33,0.00,0.67,0.00,1.00,0.00,1.00,0.33,1.00,0.67,1.00,1.00,0.67,1.00,0.33,1.00,0.00,1.00,0.00,0.67,0.00,0.33), $coords_min=0, $coords_max=1, $antialias=false) {
    protected function Clip($x, $y, $w, $h) {
    * @param array $stops array gradient color components: color = array of GRAY, RGB or CMYK color components; offset = (0 to 1) represents a location along the gradient vector; exponent = exponent of the exponential interpolation function (default = 1).
    * @param boolean $antialias A flag indicating whether to filter the shading function to prevent aliasing artifacts.
    public function Gradient($type, $coords, $stops, $background=array(), $antialias=false) {
    function _putshaders() {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function PieSector($xc, $yc, $r, $a, $b, $style='FD', $cw=true, $o=90) {
    * @param string $style Style of rendering. See the getPathPaintOperator() function for more information.
    public function PieSectorXY($xc, $yc, $rx, $ry, $a, $b, $style='FD', $cw=false, $o=0, $nc=2) {
    public function ImageEps($file, $x=null, $y=null, $w=0, $h=0, $link='', $useBoundingBox=true, $align='', $palign='', $border=0, $fitonpage=false, $fixoutvals=false) {
    public function setBarcode($bc='') {
    public function getBarcode() {
    public function write1DBarcode($code, $type, $x=null, $y=null, $w=null, $h=null, $xres=null, $style=array(), $align='') {
    public function write2DBarcode($code, $type, $x=null, $y=null, $w=null, $h=null, $style=array(), $align='', $distort=false) {
    public function getMargins() {
    public function getOriginalMargins() {
    public function getFontSize() {
    public function getFontSizePt() {
    public function getFontFamily() {
    public function getFontStyle() {
    public function fixHTMLCode($html, $default_css='', $tagvs=null, $tidy_options=null) {
    protected function getCSSBorderWidth($width) {
    protected function getCSSBorderDashStyle($style) {
    protected function getCSSBorderStyle($cssborder) {
    public function getCSSPadding($csspadding, $width=0) {
    public function getCSSMargin($cssmargin, $width=0) {
    public function getCSSBorderMargin($cssbspace, $width=0) {
    protected function getCSSFontSpacing($spacing, $parent=0) {
    protected function getCSSFontStretching($stretch, $parent=100) {
    public function getHTMLFontUnits($val, $refsize=12, $parent_size=12, $defaultunit='pt') {
    protected function getHtmlDomArray($html) {
    protected function getSpaceString() {
    protected function hashTCPDFtag($data) {
    public function serializeTCPDFtag($method, $params=array()) {
    protected function unserializeTCPDFtag($data) {
    protected function allowedTCPDFtag($method) {
    public function writeHTMLCell($w, $h, $x, $y, $html='', $border=0, $ln=0, $fill=false, $reseth=true, $align='', $autopadding=true) {
    public function writeHTML($html, $ln=true, $fill=false, $reseth=false, $cell=false, $align='') {
    protected function isRelativePath($path) {
    protected function hasExtForbiddenProtocol($path) {
    protected function openHTMLTagHandler($dom, $key, $cell) {
    protected function closeHTMLTagHandler($dom, $key, $cell, $maxbottomliney=0) {
    protected function addHTMLVertSpace($hbz=0, $hb=0, $cell=false, $firsttag=false, $lasttag=false) {
    protected function getBorderStartPosition() {
    protected function drawHTMLTagBorder($tag, $xmax) {
    public function setLIsymbol($symbol='!') {
    public function setBooklet($booklet=true, $inner=-1, $outer=-1) {
    protected function swapMargins($reverse=true) {
    public function setHtmlVSpace($tagvs) {
    public function setListIndentWidth($width) {
    public function setOpenCell($isopen) {
    public function setHtmlLinksStyle($color=array(0,0,255), $fontstyle='U') {
    public function getHTMLUnitToUnits($htmlval, $refsize=1, $defaultunit='px', $points=false) {
    protected function putHtmlListBullet($listdepth, $listtype='', $size=10) {
    protected function getGraphicVars() {
    protected function setGraphicVars($gvars, $extended=false) {
    protected function _outSaveGraphicsState() {
    protected function _outRestoreGraphicsState() {
    protected function setBuffer($data) {
    protected function replaceBuffer($data) {
    protected function getBuffer() {
    protected function setPageBuffer($page, $data, $append=false) {
    protected function getPageBuffer($page) {
    protected function setImageBuffer($image, $data) {
    protected function setImageSubBuffer($image, $key, $data) {
    protected function getImageBuffer($image) {
    protected function setFontBuffer($font, $data) {
    protected function setFontSubBuffer($font, $key, $data) {
    protected function getFontBuffer($font) {
    public function movePage($frompage, $topage) {
    public function deletePage($page) {
    public function copyPage($page=0) {
    public function addTOC($page=null, $numbersfont='', $filler='.', $toc_name='TOC', $style='', $color=array(0,0,0)) {
    public function addHTMLTOC($page=null, $toc_name='TOC', $templates=array(), $correct_align=true, $style='', $color=array(0,0,0)) {
    public function startTransaction() {
    public function commitTransaction() {
    * @param boolean $self if true restores current class object to previous state without the need of reassignment via the returned value.
    public function rollbackTransaction($self=false) {
    public function setEqualColumns($numcols=0, $width=0, $y=null) {
    public function resetColumns() {
    public function setColumnsArray($columns) {
    public function selectColumn($col=null) {
    public function getColumn() {
    public function getNumberOfColumns() {
    public function setTextRenderingMode($stroke=0, $fill=true, $clip=false) {
    public function setTextShadow($params=array('enabled'=>false, 'depth_w'=>0, 'depth_h'=>0, 'color'=>false, 'opacity'=>1, 'blend_mode'=>'Normal')) {
    public function getTextShadow() {
    protected function hyphenateWord($word, $patterns, $dictionary=array(), $leftmin=1, $rightmin=2, $charmin=1, $charmax=8) {
    public function hyphenateText($text, $patterns, $dictionary=array(), $leftmin=1, $rightmin=2, $charmin=1, $charmax=8) {
    public function setRasterizeVectorImages($mode) {
    public function setFontSubsetting($enable=true) {
    public function getFontSubsetting() {
    public function stringLeftTrim($str, $replace='') {
    public function stringRightTrim($str, $replace='') {
    public function stringTrim($str, $replace='') {
    public function isUnicodeFont() {
    public function getFontFamilyName($fontfamily) {
    public function startTemplate($w=0, $h=0, $group=false) {
    public function endTemplate() {
    public function printTemplate($id, $x=null, $y=null, $w=0, $h=0, $align='', $palign='', $fitonpage=false) {
    public function setFontStretching($perc=100) {
    public function getFontStretching() {
    public function setFontSpacing($spacing=0) {
    public function getFontSpacing() {
    public function getPageRegions() {
    public function setPageRegions($regions=array()) {
    public function addPageRegion($region) {
    public function removePageRegion($key) {
    protected function checkPageRegions($h, $x, $y) {
    public function ImageSVG($file, $x=null, $y=null, $w=0, $h=0, $link='', $align='', $palign='', $border=0, $fitonpage=false) {
    // sets the character data handler function for the XML parser
    protected function convertSVGtMatrix($tm) {
    protected function SVGTransform($tm) {
    * @param string $clip_function clip function
    protected function setSVGStyles($svgstyle, $prevsvgstyle, $x=0, $y=0, $w=1, $h=1, $clip_function='', $clip_params=array()) {
    protected function SVGPath($d, $style='') {
    protected function removeTagNamespace($name) {
    * Sets the opening SVG element handler function for the XML parser. (*** TO BE COMPLETED ***)
    protected function startSVGElementHandler($parser, $name, $attribs, $ctm=array()) {
    * Sets the closing SVG element handler function for the XML parser.
    protected function endSVGElementHandler($parser, $name) {
    * Sets the character data handler function for the XML parser.
    protected function segSVGContentHandler($parser, $data) {
    protected function getCachedFileContents($file)
    protected function fileExists($file)
    protected function _unlink($file)
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/tcpdf_autoconfig.php
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/tcpdf_barcodes_1d.php
    // Description : PHP class to creates array representations for
    * PHP class to creates array representations for common 1D barcodes to be used with TCPDF.
    * @class TCPDFBarcode
    * PHP class to creates array representations for common 1D barcodes to be used with TCPDF (http://www.tcpdf.org).<br>
    class TCPDFBarcode {
    * This is the class constructor.
    public function __construct($code, $type) {
    public function getBarcodeArray() {
    public function getBarcodeSVG($w=2, $h=30, $color='black') {
    public function getBarcodeSVGcode($w=2, $h=30, $color='black') {
    public function getBarcodeHTML($w=2, $h=30, $color='black') {
    public function getBarcodePNG($w=2, $h=30, $color=array(0,0,0)) {
    public function getBarcodePngData($w=2, $h=30, $color=array(0,0,0)) {
    public function setBarcode($code, $type) {
    protected function barcode_code39($code, $extended=false, $checksum=false) {
    protected function encode_code39_ext($code) {
    protected function checksum_code39($code) {
    protected function barcode_code93($code) {
    protected function checksum_code93($code) {
    protected function checksum_s25($code) {
    protected function barcode_msi($code, $checksum=false) {
    protected function barcode_s25($code, $checksum=false) {
    protected function binseq_to_array($seq, $bararray) {
    protected function barcode_i25($code, $checksum=false) {
    protected function barcode_c128($code, $type='') {
    protected function get128ABsequence($code) {
    protected function barcode_eanupc($code, $len=13) {
    protected function barcode_eanext($code, $len=5) {
    protected function barcode_postnet($code, $planet=false) {
    protected function barcode_rms4cc($code, $kix=false) {
    protected function barcode_codabar($code) {
    protected function barcode_code11($code) {
    protected function barcode_pharmacode($code) {
    protected function barcode_pharmacode2t($code) {
    * The fields are described as follows:<ul><li>The Barcode Identifier shall be assigned by USPS to encode the presort identification that is currently printed in human readable form on the optional endorsement line (OEL) as well as for future USPS use. This shall be two digits, with the second digit in the range of 0–4. The allowable encoding ranges shall be 00–04, 10–14, 20–24, 30–34, 40–44, 50–54, 60–64, 70–74, 80–84, and 90–94.</li><li>The Service Type Identifier shall be assigned by USPS for any combination of services requested on the mailpiece. The allowable encoding range shall be 000http://it2.php.net/manual/en/function.dechex.php–999. Each 3-digit value shall correspond to a particular mail class with a particular combination of service(s). Each service program, such as OneCode Confirm and OneCode ACS, shall provide the list of Service Type Identifier values.</li><li>The Mailer or Customer Identifier shall be assigned by USPS as a unique, 6 or 9 digit number that identifies a business entity. The allowable encoding range for the 6 digit Mailer ID shall be 000000- 899999, while the allowable encoding range for the 9 digit Mailer ID shall be 900000000-999999999.</li><li>The Serial or Sequence Number shall be assigned by the mailer for uniquely identifying and tracking mailpieces. The allowable encoding range shall be 000000000–999999999 when used with a 6 digit Mailer ID and 000000-999999 when used with a 9 digit Mailer ID. e. The Delivery Point ZIP Code shall be assigned by the mailer for routing the mailpiece. This shall replace POSTNET for routing the mailpiece to its final delivery point. The length may be 0, 5, 9, or 11 digits. The allowable encoding ranges shall be no ZIP Code, 00000–99999,  000000000–999999999, and 00000000000–99999999999.</li></ul>
    protected function barcode_imb($code) {
    protected function barcode_imb_pre($code) {
    public function dec_to_hex($number) {
    public function hex_to_dec($hex) {
    protected function imb_crc11fcs($code_arr) {
    protected function imb_reverse_us($num) {
    protected function imb_tables($n, $size) {
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/tcpdf_barcodes_2d.php
    // Description : PHP class to creates array representations for
    * PHP class to creates array representations for 2D barcodes to be used with TCPDF.
    * @class TCPDF2DBarcode
    * PHP class to creates array representations for 2D barcodes to be used with TCPDF (http://www.tcpdf.org).
    class TCPDF2DBarcode {
    * This is the class constructor.
    public function __construct($code, $type) {
    public function getBarcodeArray() {
    public function getBarcodeSVG($w=3, $h=3, $color='black') {
    public function getBarcodeSVGcode($w=3, $h=3, $color='black') {
    public function getBarcodeHTML($w=10, $h=10, $color='black') {
    public function getBarcodePNG($w=3, $h=3, $color=array(0,0,0)) {
    public function getBarcodePngData($w=3, $h=3, $color=array(0,0,0)) {
    public function setBarcode($code, $type) {
--------------------------------------------
Fichier : ./vendor/tecnickcom/tcpdf/tools/tcpdf_addfont.php
    function showHelp() {
--------------------------------------------
Fichier : ./vendor/theseer/tokenizer/src/Exception.php
    class Exception extends \Exception {
--------------------------------------------
Fichier : ./vendor/theseer/tokenizer/src/NamespaceUri.php
    class NamespaceUri {
    public function __construct(string $value) {
    public function asString(): string {
    private function ensureValidUri($value): void {
--------------------------------------------
Fichier : ./vendor/theseer/tokenizer/src/NamespaceUriException.php
    class NamespaceUriException extends Exception {
--------------------------------------------
Fichier : ./vendor/theseer/tokenizer/src/Token.php
    class Token {
    public function __construct(int $line, string $name, string $value) {
    public function getLine(): int {
    public function getName(): string {
    public function getValue(): string {
--------------------------------------------
Fichier : ./vendor/theseer/tokenizer/src/TokenCollection.php
    class TokenCollection implements \ArrayAccess, \Iterator, \Countable {
    public function addToken(Token $token): void {
    public function current(): Token {
    public function key(): int {
    public function next(): void {
    public function valid(): bool {
    public function rewind(): void {
    public function count(): int {
    public function offsetExists($offset): bool {
    public function offsetGet($offset): Token {
    public function offsetSet($offset, $value): void {
    public function offsetUnset($offset): void {
--------------------------------------------
Fichier : ./vendor/theseer/tokenizer/src/TokenCollectionException.php
    class TokenCollectionException extends Exception {
--------------------------------------------
Fichier : ./vendor/theseer/tokenizer/src/Tokenizer.php
    class Tokenizer {
    public function parse(string $source): TokenCollection {
    private function fillBlanks(TokenCollection $tokens, int $maxLine): TokenCollection {
--------------------------------------------
Fichier : ./vendor/theseer/tokenizer/src/XMLSerializer.php
    class XMLSerializer {
    public function __construct(?NamespaceUri $xmlns = null) {
    public function toDom(TokenCollection $tokens): DOMDocument {
    public function toXML(TokenCollection $tokens): string {
    private function addToken(Token $token): void {
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Dotenv.php
    class Dotenv
    public function __construct(
    public static function create(RepositoryInterface $repository, $paths, $names = null, bool $shortCircuit = true, ?string $fileEncoding = null)
    public static function createMutable($paths, $names = null, bool $shortCircuit = true, ?string $fileEncoding = null)
    public static function createUnsafeMutable($paths, $names = null, bool $shortCircuit = true, ?string $fileEncoding = null)
    public static function createImmutable($paths, $names = null, bool $shortCircuit = true, ?string $fileEncoding = null)
    public static function createUnsafeImmutable($paths, $names = null, bool $shortCircuit = true, ?string $fileEncoding = null)
    public static function createArrayBacked($paths, $names = null, bool $shortCircuit = true, ?string $fileEncoding = null)
    public static function parse(string $content)
    public function load()
    public function safeLoad()
    public function required($variables)
    public function ifPresent($variables)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Exception/ExceptionInterface.php
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Exception/InvalidEncodingException.php
    final class InvalidEncodingException extends InvalidArgumentException implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Exception/InvalidFileException.php
    final class InvalidFileException extends InvalidArgumentException implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Exception/InvalidPathException.php
    final class InvalidPathException extends InvalidArgumentException implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Exception/ValidationException.php
    final class ValidationException extends RuntimeException implements ExceptionInterface
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Loader/Loader.php
    final class Loader implements LoaderInterface
    public function load(RepositoryInterface $repository, array $entries)
    return \array_reduce($entries, static function (array $vars, Entry $entry) use ($repository) {
    $value = $entry->getValue()->map(static function (Value $value) use ($repository) {
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Loader/LoaderInterface.php
    public function load(RepositoryInterface $repository, array $entries);
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Loader/Resolver.php
    final class Resolver
    * This class is a singleton.
    private function __construct()
    public static function resolve(RepositoryInterface $repository, Value $value)
    return \array_reduce($value->getVars(), static function (string $s, int $i) use ($repository) {
    private static function resolveVariable(RepositoryInterface $repository, string $str)
    static function (array $matches) use ($repository) {
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Parser/Entry.php
    final class Entry
    public function __construct(string $name, ?Value $value = null)
    public function getName()
    public function getValue()
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Parser/EntryParser.php
    final class EntryParser
    * This class is a singleton.
    private function __construct()
    public static function parse(string $entry)
    return self::splitStringIntoParts($entry)->flatMap(static function (array $parts) {
    return self::parseName($name)->flatMap(static function (string $name) use ($value) {
    return $parsedValue->map(static function (?Value $value) use ($name) {
    private static function splitStringIntoParts(string $line)
    $result = Str::pos($line, '=')->map(static function () use ($line) {
    private static function parseName(string $name)
    private static function isQuotedName(string $name)
    private static function isValidName(string $name)
    private static function parseValue(string $value)
    return \array_reduce(\iterator_to_array(Lexer::lex($value)), static function (Result $data, string $token) {
    return $data->flatMap(static function (array $data) use ($token) {
    return self::processToken($data[1], $token)->map(static function (array $val) use ($data) {
    }, Success::create([Value::blank(), self::INITIAL_STATE]))->flatMap(static function (array $result) {
    })->mapError(static function (string $err) use ($value) {
    private static function processToken(int $state, string $token)
    private static function getErrorMessage(string $cause, string $subject)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Parser/Lexer.php
    final class Lexer
    * This class is a singleton.
    private function __construct()
    public static function lex(string $content)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Parser/Lines.php
    final class Lines
    * This class is a singleton.
    private function __construct()
    public static function process(array $lines)
    private static function multilineProcess(bool $multiline, string $line, array $buffer)
    private static function looksLikeMultilineStart(string $line)
    return Str::pos($line, '="')->map(static function () use ($line) {
    private static function looksLikeMultilineStop(string $line, bool $started)
    return Regex::occurrences('/(?=([^\\\\]"))/', \str_replace('\\\\', '', $line))->map(static function (int $count) use ($started) {
    private static function isCommentOrWhitespace(string $line)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Parser/Parser.php
    final class Parser implements ParserInterface
    public function parse(string $content)
    return Regex::split("/(\r\n|\n|\r)/", $content)->mapError(static function () {
    })->flatMap(static function (array $lines) {
    })->mapError(static function (string $error) {
    private static function process(array $entries)
    return \array_reduce($entries, static function (Result $result, string $raw) {
    return $result->flatMap(static function (array $entries) use ($raw) {
    return EntryParser::parse($raw)->map(static function (Entry $entry) use ($entries) {
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Parser/ParserInterface.php
    public function parse(string $content);
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Parser/Value.php
    final class Value
    private function __construct(string $chars, array $vars)
    public static function blank()
    public function append(string $chars, bool $var)
    public function getChars()
    public function getVars()
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/AdapterInterface.php
    public static function create();
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/ApacheAdapter.php
    final class ApacheAdapter implements AdapterInterface
    private function __construct()
    public static function create()
    private static function isSupported()
    public function read(string $name)
    return Option::fromValue(apache_getenv($name))->filter(static function ($value) {
    public function write(string $name, string $value)
    public function delete(string $name)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/ArrayAdapter.php
    final class ArrayAdapter implements AdapterInterface
    private function __construct()
    public static function create()
    public function read(string $name)
    public function write(string $name, string $value)
    public function delete(string $name)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/EnvConstAdapter.php
    final class EnvConstAdapter implements AdapterInterface
    private function __construct()
    public static function create()
    public function read(string $name)
    ->filter(static function ($value) {
    ->map(static function ($value) {
    public function write(string $name, string $value)
    public function delete(string $name)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/GuardedWriter.php
    final class GuardedWriter implements WriterInterface
    public function __construct(WriterInterface $writer, array $allowList)
    public function write(string $name, string $value)
    public function delete(string $name)
    private function isAllowed(string $name)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/ImmutableWriter.php
    final class ImmutableWriter implements WriterInterface
    public function __construct(WriterInterface $writer, ReaderInterface $reader)
    public function write(string $name, string $value)
    public function delete(string $name)
    private function isExternallyDefined(string $name)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/MultiReader.php
    final class MultiReader implements ReaderInterface
    public function __construct(array $readers)
    public function read(string $name)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/MultiWriter.php
    final class MultiWriter implements WriterInterface
    public function __construct(array $writers)
    public function write(string $name, string $value)
    public function delete(string $name)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/PutenvAdapter.php
    final class PutenvAdapter implements AdapterInterface
    private function __construct()
    public static function create()
    private static function isSupported()
    public function read(string $name)
    return Option::fromValue(\getenv($name), false)->filter(static function ($value) {
    public function write(string $name, string $value)
    public function delete(string $name)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/ReaderInterface.php
    public function read(string $name);
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/ReplacingWriter.php
    final class ReplacingWriter implements WriterInterface
    public function __construct(WriterInterface $writer, ReaderInterface $reader)
    public function write(string $name, string $value)
    public function delete(string $name)
    private function exists(string $name)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/ServerConstAdapter.php
    final class ServerConstAdapter implements AdapterInterface
    private function __construct()
    public static function create()
    public function read(string $name)
    ->filter(static function ($value) {
    ->map(static function ($value) {
    public function write(string $name, string $value)
    public function delete(string $name)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/Adapter/WriterInterface.php
    public function write(string $name, string $value);
    public function delete(string $name);
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/AdapterRepository.php
    final class AdapterRepository implements RepositoryInterface
    public function __construct(ReaderInterface $reader, WriterInterface $writer)
    public function has(string $name)
    public function get(string $name)
    public function set(string $name, string $value)
    public function clear(string $name)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/RepositoryBuilder.php
    final class RepositoryBuilder
    private function __construct(array $readers = [], array $writers = [], bool $immutable = false, ?array $allowList = null)
    public static function createWithNoAdapters()
    public static function createWithDefaultAdapters()
    private static function defaultAdapters()
    private static function isAnAdapterClass(string $name)
    public function addReader($reader)
    $optional = Some::create($reader)->flatMap(static function ($reader) {
    public function addWriter($writer)
    $optional = Some::create($writer)->flatMap(static function ($writer) {
    public function addAdapter($adapter)
    $optional = Some::create($adapter)->flatMap(static function ($adapter) {
    public function immutable()
    public function allowList(?array $allowList = null)
    public function make()
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Repository/RepositoryInterface.php
    public function has(string $name);
    public function get(string $name);
    public function set(string $name, string $value);
    public function clear(string $name);
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Store/File/Paths.php
    final class Paths
    * This class is a singleton.
    private function __construct()
    public static function filePaths(array $paths, array $names)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Store/File/Reader.php
    final class Reader
    * This class is a singleton.
    private function __construct()
    public static function read(array $filePaths, bool $shortCircuit = true, ?string $fileEncoding = null)
    private static function readFromFile(string $path, ?string $encoding = null)
    return $content->flatMap(static function (string $content) use ($encoding) {
    return Str::utf8($content, $encoding)->mapError(static function (string $error) {
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Store/FileStore.php
    final class FileStore implements StoreInterface
    public function __construct(array $filePaths, bool $shortCircuit, ?string $fileEncoding = null)
    public function read()
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Store/StoreBuilder.php
    final class StoreBuilder
    private function __construct(array $paths = [], array $names = [], bool $shortCircuit = false, ?string $fileEncoding = null)
    public static function createWithNoNames()
    public static function createWithDefaultName()
    public function addPath(string $path)
    public function addName(string $name)
    public function shortCircuit()
    public function fileEncoding(?string $fileEncoding = null)
    public function make()
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Store/StoreInterface.php
    public function read();
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Store/StringStore.php
    final class StringStore implements StoreInterface
    public function __construct(string $content)
    public function read()
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Util/Regex.php
    final class Regex
    * This class is a singleton.
    private function __construct()
    public static function matches(string $pattern, string $subject)
    return self::pregAndWrap(static function (string $subject) use ($pattern) {
    public static function occurrences(string $pattern, string $subject)
    return self::pregAndWrap(static function (string $subject) use ($pattern) {
    public static function replaceCallback(string $pattern, callable $callback, string $subject, ?int $limit = null)
    return self::pregAndWrap(static function (string $subject) use ($pattern, $callback, $limit) {
    public static function split(string $pattern, string $subject)
    return self::pregAndWrap(static function (string $subject) use ($pattern) {
    private static function pregAndWrap(callable $operation, string $subject)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Util/Str.php
    final class Str
    * This class is a singleton.
    private function __construct()
    public static function utf8(string $input, ?string $encoding = null)
    public static function pos(string $haystack, string $needle)
    public static function substr(string $input, int $start, ?int $length = null)
    public static function len(string $input)
--------------------------------------------
Fichier : ./vendor/vlucas/phpdotenv/src/Validator.php
    class Validator
    public function __construct(RepositoryInterface $repository, array $variables)
    public function required()
    static function (?string $value) {
    public function notEmpty()
    static function (string $value) {
    public function isInteger()
    static function (string $value) {
    public function isBoolean()
    static function (string $value) {
    public function allowedValues(array $choices)
    static function (string $value) use ($choices) {
    public function allowedRegexValues(string $regex)
    static function (string $value) use ($regex) {
    public function assert(callable $callback, string $message)
    public function assertNullable(callable $callback, string $message)
    static function (?string $value) use ($callback) {
