
/***********************************************************************************
 * Fichier: src/Backend/Controller\Administration\AdminDashboardController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Administration/AdminDashboardController.php

namespace App\Backend\Controller\Administration;

use App\Backend\Controller\BaseController;
use App\Config\Container;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Exception\PermissionException;

class AdminDashboardController extends BaseController
{
    protected ServiceSupervisionInterface $supervisionService;

    public function __construct(Container $container)
    {
        parent::__construct($container);
        $this->supervisionService = $container->get(ServiceSupervisionInterface::class);
    }

    /**
     * Affiche le tableau de bord principal de l'administrateur système.
     * Inclut des statistiques clés et des liens rapides vers les fonctionnalités d'administration.
     *
     * Permissions requises: TRAIT_ADMIN_DASHBOARD_ACCEDER
     *
     * @return void
     */
    public function index(): void
    {
        // Vérifier la permission d'accéder au tableau de bord administrateur
        $this->requirePermission('TRAIT_ADMIN_DASHBOARD_ACCEDER');

        try {
            // Récupérer les statistiques globales du système
            $stats = $this->supervisionService->genererStatistiquesDashboardAdmin();

            // Préparer les données pour la vue
            $data = [
                'title' => 'Tableau de Bord Administrateur',
                'stats' => $stats,
                // Vous pouvez ajouter ici d'autres données spécifiques au dashboard
                // comme des listes d'alertes récentes, des tâches en échec, etc.
            ];

            // Rendre la vue du tableau de bord administrateur
            $this->render('Administration/dashboard_admin', $data);

        } catch (PermissionException $e) {
            // Cette exception est déjà gérée par requirePermission qui appelle renderError(403)
            // Mais on la catch ici pour une gestion plus fine si nécessaire (ex: log spécifique)
            error_log("Accès non autorisé au dashboard admin pour l'utilisateur " . ($_SESSION['user_id'] ?? 'ANONYMOUS') . ": " . $e->getMessage());
            // Le renderError(403) est déjà appelé par requirePermission
        } catch (\Exception $e) {
            // Gérer toute autre exception inattendue
            $this->addFlashMessage('error', 'Une erreur est survenue lors du chargement du tableau de bord : ' . $e->getMessage());
            error_log("Erreur inattendue dans AdminDashboardController::index: " . $e->getMessage());
            $this->renderError(500, 'Impossible de charger le tableau de bord.');
        }
    }

    // Note: Les autres méthodes spécifiques à l'administration (gestion des utilisateurs,
    // configuration, supervision) seront implémentées dans leurs contrôleurs dédiés
    // (UtilisateurController, ConfigurationController, SupervisionController)
    // et non directement dans AdminDashboardController, qui sert de point d'entrée et de résumé.
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Administration\ConfigurationController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Administration/ConfigurationController.php

namespace App\Backend\Controller\Administration;

use App\Backend\Controller\BaseController;
use App\Config\Container;
use App\Backend\Service\Systeme\ServiceSystemeInterface;
use App\Backend\Service\Document\ServiceDocumentInterface;
use App\Backend\Service\Communication\ServiceCommunicationInterface;

use App\Backend\Exception\{ElementNonTrouveException, OperationImpossibleException, ValidationException, DoublonException};

class ConfigurationController extends BaseController
{
    private ServiceSystemeInterface $systemeService;
    private ServiceDocumentInterface $documentService;
    private ServiceCommunicationInterface $communicationService;// Injecter ServiceSecurite

    public function __construct(Container $container)
    {
        parent::__construct($container);
        $this->systemeService = $container->get(ServiceSystemeInterface::class);
        $this->documentService = $container->get(ServiceDocumentInterface::class);
        $this->communicationService = $container->get(ServiceCommunicationInterface::class);
    }


    public function showConfigurationPage(): void
    {
        $this->requirePermission('TRAIT_ADMIN_CONFIG_ACCEDER');

        try {
            $systemParameters = $this->systemeService->getAllParametres();
            $academicYears = $this->systemeService->listerAnneesAcademiques();
            $activeYear = $this->systemeService->getAnneeAcademiqueActive();

            $referentials = [
                'action' => $this->systemeService->gererReferentiel('list', 'action'),
                'critere_conformite_ref' => $this->systemeService->gererReferentiel('list', 'critere_conformite_ref'),
                'decision_passage_ref' => $this->systemeService->gererReferentiel('list', 'decision_passage_ref'),
                'decision_validation_pv_ref' => $this->systemeService->gererReferentiel('list', 'decision_validation_pv_ref'),
                'decision_vote_ref' => $this->systemeService->gererReferentiel('list', 'decision_vote_ref'),
                'ecue' => $this->systemeService->gererReferentiel('list', 'ecue'),
                'entreprise' => $this->systemeService->gererReferentiel('list', 'entreprise'),
                'fonction' => $this->systemeService->gererReferentiel('list', 'fonction'),
                'grade' => $this->systemeService->gererReferentiel('list', 'grade'),
                'groupe_utilisateur' => $this->systemeService->gererReferentiel('list', 'groupe_utilisateur'),
                'niveau_acces_donne' => $this->systemeService->gererReferentiel('list', 'niveau_acces_donne'),
                'niveau_etude' => $this->systemeService->gererReferentiel('list', 'niveau_etude'),
                'specialite' => $this->systemeService->gererReferentiel('list', 'specialite'),
                'statut_conformite_ref' => $this->systemeService->gererReferentiel('list', 'statut_conformite_ref'),
                'statut_jury' => $this->systemeService->gererReferentiel('list', 'statut_jury'),
                'statut_paiement_ref' => $this->systemeService->gererReferentiel('list', 'statut_paiement_ref'),
                'statut_penalite_ref' => $this->systemeService->gererReferentiel('list', 'statut_penalite_ref'),
                'statut_pv_ref' => $this->systemeService->gererReferentiel('list', 'statut_pv_ref'),
                'statut_rapport_ref' => $this->systemeService->gererReferentiel('list', 'statut_rapport_ref'),
                'statut_reclamation_ref' => $this->systemeService->gererReferentiel('list', 'statut_reclamation_ref'),
                'traitement' => $this->systemeService->gererReferentiel('list', 'traitement'),
                'type_document_ref' => $this->systemeService->gererReferentiel('list', 'type_document_ref'),
                'type_utilisateur' => $this->systemeService->gererReferentiel('list', 'type_utilisateur'),
                'ue' => $this->systemeService->gererReferentiel('list', 'ue'),
                // Tables de liaison pour les référentiels
                'acquerir' => $this->systemeService->gererReferentiel('list', 'acquerir'),
                'attribuer' => $this->systemeService->gererReferentiel('list', 'attribuer'),
                'occuper' => $this->systemeService->gererReferentiel('list', 'occuper'),
                'rapport_modele_assignation' => $this->systemeService->gererReferentiel('list', 'rapport_modele_assignation'),
                'rattacher' => $this->systemeService->gererReferentiel('list', 'rattacher'),
                'pv_session_rapport' => $this->systemeService->gererReferentiel('list', 'pv_session_rapport'),
                'session_rapport' => $this->systemeService->gererReferentiel('list', 'session_rapport'),
                'validation_pv' => $this->systemeService->gererReferentiel('list', 'validation_pv'),
                'vote_commission' => $this->systemeService->gererReferentiel('list', 'vote_commission'),
            ];

            $documentModels = $this->documentService->listerModelesDocument();
            $notificationTemplates = $this->communicationService->listerModelesNotification();
            $notificationRules = $this->communicationService->listerReglesMatrice();

            $data = [
                'title' => 'Configuration Système',
                'system_parameters' => $systemParameters,
                'academic_years' => $academicYears,
                'active_year' => $activeYear,
                'referentials' => $referentials,
                'document_models' => $documentModels,
                'notification_templates' => $notificationTemplates,
                'notification_rules' => $notificationRules,
                'csrf_token_params' => $this->generateCsrfToken('system_params_form'),
                'csrf_token_academic_years' => $this->generateCsrfToken('academic_years_form'),
                'csrf_token_referentials' => $this->generateCsrfToken('referentials_form'),
                'csrf_token_document_models' => $this->generateCsrfToken('document_models_form'),
                'csrf_token_notifications' => $this->generateCsrfToken('notifications_form'),
                'csrf_token_menu_order' => $this->generateCsrfToken('menu_order_form'),
            ];

            $this->render('Administration/gestion_referentiels', $data);

        } catch (ElementNonTrouveException $e) {
            $this->addFlashMessage('error', 'Erreur: ' . $e->getMessage());
            $this->renderError(404, 'Ressource non trouvée.');
        } catch (OperationImpossibleException $e) {
            $this->addFlashMessage('error', 'Opération impossible: ' . $e->getMessage());
            $this->renderError(500, 'Erreur interne du serveur.');
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur inattendue est survenue: ' . $e->getMessage());
            $this->renderError(500, 'Erreur interne du serveur.');
        }
    }

    public function handleSystemParameters(): void
    {
        $this->requirePermission('TRAIT_ADMIN_CONFIG_PARAMETRES_GERER');

        if (!$this->isPostRequest()) {
            $this->redirect('/admin/configuration');
        }

        $data = $this->getPostData();

        if (!$this->validateCsrfToken('system_params_form', $data['csrf_token_params'] ?? '')) {
            $this->redirect('/admin/configuration');
        }

        try {
            $paramsToUpdate = [];
            foreach ($data as $key => $value) {
                if (str_starts_with($key, 'param_')) {
                    $paramName = substr($key, 6);
                    $paramsToUpdate[$paramName] = $value;
                }
            }
            $this->systemeService->setParametres($paramsToUpdate);
            $this->addFlashMessage('success', 'Paramètres système mis à jour avec succès.');
        } catch (ValidationException $e) {
            $this->addFlashMessage('error', 'Erreur de validation: ' . implode(', ', $e->getErrors()));
        } catch (OperationImpossibleException $e) {
            $this->addFlashMessage('error', 'Opération impossible: ' . $e->getMessage());
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur inattendue est survenue: ' . $e->getMessage());
        }
        $this->redirect('/admin/configuration');
    }

    public function addAcademicYear(): void
    {
        $this->requirePermission('TRAIT_ADMIN_CONFIG_ANNEES_GERER');

        if (!$this->isPostRequest()) {
            $this->redirect('/admin/configuration');
        }

        $data = $this->getPostData();

        if (!$this->validateCsrfToken('academic_years_form', $data['csrf_token_academic_years'] ?? '')) {
            $this->redirect('/admin/configuration');
        }

        try {
            $libelle = $data['libelle_annee_academique'] ?? '';
            $dateDebut = $data['date_debut'] ?? '';
            $dateFin = $data['date_fin'] ?? '';
            $estActive = isset($data['est_active']);

            $this->systemeService->creerAnneeAcademique($libelle, $dateDebut, $dateFin, $estActive);
            $this->addFlashMessage('success', 'Année académique ajoutée avec succès.');
        } catch (DoublonException $e) {
            $this->addFlashMessage('error', 'Erreur: ' . $e->getMessage());
        } catch (ValidationException $e) {
            $this->addFlashMessage('error', 'Erreur de validation: ' . implode(', ', $e->getErrors()));
        } catch (OperationImpossibleException $e) {
            $this->addFlashMessage('error', 'Opération impossible: ' . $e->getMessage());
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur inattendue est survenue: ' . $e->getMessage());
        }
        $this->redirect('/admin/configuration');
    }

    public function updateAcademicYear(string $id): void
    {
        $this->requirePermission('TRAIT_ADMIN_CONFIG_ANNEES_GERER');

        if (!$this->isPostRequest()) {
            $this->redirect('/admin/configuration');
        }

        $data = $this->getPostData();

        if (!$this->validateCsrfToken('academic_years_form', $data['csrf_token_academic_years'] ?? '')) {
            $this->redirect('/admin/configuration');
        }

        try {
            $donnees = [
                'libelle_annee_academique' => $data['libelle_annee_academique'] ?? '',
                'date_debut' => $data['date_debut'] ?? '',
                'date_fin' => $data['date_fin'] ?? '',
                'est_active' => isset($data['est_active']) ? 1 : 0,
            ];
            $this->systemeService->mettreAJourAnneeAcademique($id, $donnees);
            $this->addFlashMessage('success', 'Année académique mise à jour avec succès.');
        } catch (ElementNonTrouveException $e) {
            $this->addFlashMessage('error', 'Erreur: ' . $e->getMessage());
        } catch (ValidationException $e) {
            $this->addFlashMessage('error', 'Erreur de validation: ' . implode(', ', $e->getErrors()));
        } catch (OperationImpossibleException $e) {
            $this->addFlashMessage('error', 'Opération impossible: ' . $e->getMessage());
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur inattendue est survenue: ' . $e->getMessage());
        }
        $this->redirect('/admin/configuration');
    }

    public function deleteAcademicYear(string $id): void
    {
        $this->requirePermission('TRAIT_ADMIN_CONFIG_ANNEES_GERER');

        if (!$this->isPostRequest()) {
            $this->redirect('/admin/configuration');
        }

        $data = $this->getPostData(); // Pour récupérer le CSRF token

        if (!$this->validateCsrfToken('academic_years_form', $data['csrf_token_academic_years'] ?? '')) {
            $this->redirect('/admin/configuration');
        }

        try {
            $this->systemeService->supprimerAnneeAcademique($id);
            $this->addFlashMessage('success', 'Année académique supprimée avec succès.');
        } catch (OperationImpossibleException $e) {
            $this->addFlashMessage('error', 'Suppression impossible: ' . $e->getMessage());
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur inattendue est survenue: ' . $e->getMessage());
        }
        $this->redirect('/admin/configuration');
    }

    public function setActiveAcademicYear(string $id): void
    {
        $this->requirePermission('TRAIT_ADMIN_CONFIG_ANNEES_GERER');

        if (!$this->isPostRequest()) {
            $this->redirect('/admin/configuration');
        }

        $data = $this->getPostData(); // Pour récupérer le CSRF token

        if (!$this->validateCsrfToken('academic_years_form', $data['csrf_token_academic_years'] ?? '')) {
            $this->redirect('/admin/configuration');
        }

        try {
            $this->systemeService->setAnneeAcademiqueActive($id);
            $this->addFlashMessage('success', 'Année académique active définie avec succès.');
        } catch (ElementNonTrouveException $e) {
            $this->addFlashMessage('error', 'Erreur: ' . $e->getMessage());
        } catch (OperationImpossibleException $e) {
            $this->addFlashMessage('error', 'Opération impossible: ' . $e->getMessage());
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur inattendue est survenue: ' . $e->getMessage());
        }
        $this->redirect('/admin/configuration');
    }

    public function handleReferential(string $entityName, ?string $id = null): void
    {
        $this->requirePermission('TRAIT_ADMIN_CONFIG_REFERENTIELS_GERER');

        if (!$this->isPostRequest()) {
            $this->redirect('/admin/configuration');
        }

        $data = $this->getPostData();

        if (!$this->validateCsrfToken('referentials_form', $data['csrf_token_referentials'] ?? '')) {
            $this->redirect('/admin/configuration');
        }

        $action = $data['action'] ?? '';
        unset($data['action'], $data['csrf_token_referentials']); // Nettoyer les données pour le service

        try {
            switch ($action) {
                case 'create':
                    $this->systemeService->gererReferentiel('create', $entityName, null, $data);
                    $this->addFlashMessage('success', 'Entrée de référentiel ajoutée avec succès.');
                    break;
                case 'update':
                    if (!$id) throw new ValidationException("ID manquant pour la mise à jour.");
                    $this->systemeService->gererReferentiel('update', $entityName, $id, $data);
                    $this->addFlashMessage('success', 'Entrée de référentiel mise à jour avec succès.');
                    break;
                case 'delete':
                    if (!$id) throw new ValidationException("ID manquant pour la suppression.");
                    $this->systemeService->gererReferentiel('delete', $entityName, $id);
                    $this->addFlashMessage('success', 'Entrée de référentiel supprimée avec succès.');
                    break;
                default:
                    throw new ValidationException("Action non reconnue pour le référentiel.");
            }
        } catch (DoublonException $e) {
            $this->addFlashMessage('error', 'Erreur: ' . $e->getMessage());
        } catch (ValidationException $e) {
            $this->addFlashMessage('error', 'Erreur de validation: ' . $e->getMessage());
        } catch (ElementNonTrouveException $e) {
            $this->addFlashMessage('error', 'Erreur: ' . $e->getMessage());
        } catch (OperationImpossibleException $e) {
            $this->addFlashMessage('error', 'Opération impossible: ' . $e->getMessage());
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur inattendue est survenue: ' . $e->getMessage());
        }
        $this->redirect('/admin/configuration#referentials-tab');
    }

    public function handleDocumentModel(?string $id = null): void
    {
        $this->requirePermission('TRAIT_ADMIN_CONFIG_MODELES_DOC_GERER');

        if (!$this->isPostRequest()) {
            $this->redirect('/admin/configuration');
        }

        $data = $this->getPostData();
        $fileData = $this->getFileData('word_file');

        if (!$this->validateCsrfToken('document_models_form', $data['csrf_token_document_models'] ?? '')) {
            $this->redirect('/admin/configuration');
        }

        $action = $data['action'] ?? '';
        unset($data['action'], $data['csrf_token_document_models']);

        try {
            switch ($action) {
                case 'create':
                    if ($fileData && $fileData['error'] === UPLOAD_ERR_OK) {
                        $this->documentService->importerModeleDocumentWord($fileData);
                        $this->addFlashMessage('success', 'Modèle de document Word importé et créé avec succès.');
                    } else {
                        $this->documentService->creerModeleDocument($data['nom_modele'] ?? '', $data['contenu_html'] ?? '');
                        $this->addFlashMessage('success', 'Modèle de document créé avec succès.');
                    }
                    break;
                case 'update':
                    if (!$id) throw new ValidationException("ID manquant pour la mise à jour.");
                    $this->documentService->mettreAJourModeleDocument($id, $data['nom_modele'] ?? '', $data['contenu_html'] ?? '');
                    $this->addFlashMessage('success', 'Modèle de document mis à jour avec succès.');
                    break;
                case 'delete':
                    if (!$id) throw new ValidationException("ID manquant pour la suppression.");
                    $this->documentService->supprimerModeleDocument($id);
                    $this->addFlashMessage('success', 'Modèle de document supprimé avec succès.');
                    break;
                default:
                    throw new ValidationException("Action non reconnue pour le modèle de document.");
            }
        } catch (ValidationException $e) {
            $this->addFlashMessage('error', 'Erreur de validation: ' . $e->getMessage());
        } catch (ElementNonTrouveException $e) {
            $this->addFlashMessage('error', 'Erreur: ' . $e->getMessage());
        } catch (OperationImpossibleException $e) {
            $this->addFlashMessage('error', 'Opération impossible: ' . $e->getMessage());
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur inattendue est survenue: ' . $e->getMessage());
        }
        $this->redirect('/admin/configuration#document-models-tab');
    }

    public function handleNotificationSettings(): void
    {
        $this->requirePermission('TRAIT_ADMIN_CONFIG_NOTIFS_GERER');

        if (!$this->isPostRequest()) {
            $this->redirect('/admin/configuration');
        }

        $data = $this->getPostData();

        if (!$this->validateCsrfToken('notifications_form', $data['csrf_token_notifications'] ?? '')) {
            $this->redirect('/admin/configuration');
        }

        $type = $data['type'] ?? '';
        unset($data['type'], $data['csrf_token_notifications']);

        try {
            switch ($type) {
                case 'template_update':
                    $this->communicationService->mettreAJourModeleNotification($data['id'] ?? '', $data['libelle'] ?? '', $data['contenu'] ?? '');
                    $this->addFlashMessage('success', 'Modèle de notification mis à jour avec succès.');
                    break;
                case 'rule_update':
                    $this->communicationService->mettreAJourRegleMatrice($data['id'] ?? '', $data['canal'] ?? '', isset($data['est_active']));
                    $this->addFlashMessage('success', 'Règle de matrice de notification mise à jour avec succès.');
                    break;
                default:
                    throw new ValidationException("Type d'action non reconnu pour les notifications.");
            }
        } catch (ValidationException $e) {
            $this->addFlashMessage('error', 'Erreur de validation: ' . $e->getMessage());
        } catch (ElementNonTrouveException $e) {
            $this->addFlashMessage('error', 'Erreur: ' . $e->getMessage());
        } catch (OperationImpossibleException $e) {
            $this->addFlashMessage('error', 'Opération impossible: ' . $e->getMessage());
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur inattendue est survenue: ' . $e->getMessage());
        }
        $this->redirect('/admin/configuration#notifications-tab');
    }

    public function handleMenuOrder(): void
    {
        $this->requirePermission('TRAIT_ADMIN_CONFIG_MENUS_GERER');

        if (!$this->isPostRequest()) {
            $this->redirect('/admin/configuration');
        }

        $data = $this->getPostData();

        if (!$this->validateCsrfToken('menu_order_form', $data['csrf_token_menu_order'] ?? '')) {
            $this->redirect('/admin/configuration');
        }

        try {
            // Récupère la chaîne JSON et la décode en tableau PHP
            $menuStructure = json_decode($data['menu_structure'] ?? '[]', true);

            if (!is_array($menuStructure) || empty($menuStructure)) {
                throw new ValidationException("Structure de menu invalide ou vide.");
            }

            // Appel au service pour mettre à jour la base de données
            $this->securiteService->updateMenuStructure($menuStructure);
            $this->addFlashMessage('success', 'Ordre des menus mis à jour avec succès.');
        } catch (ValidationException $e) {
            $this->addFlashMessage('error', 'Erreur de validation: ' . $e->getMessage());
        } catch (OperationImpossibleException $e) {
            $this->addFlashMessage('error', 'Opération impossible: ' . $e->getMessage());
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur inattendue est survenue: ' . $e->getMessage());
        }
        $this->redirect('/admin/configuration#menus-tab');
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Administration\SupervisionController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Administration/SupervisionController.php

namespace App\Backend\Controller\Administration;

use App\Backend\Controller\BaseController;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Service\Systeme\ServiceSystemeInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Config\Container;

class SupervisionController extends BaseController
{
    private ServiceSupervisionInterface $serviceSupervision;
    private ServiceSystemeInterface $serviceSysteme;

    public function __construct(
        Container $container,
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        ServiceSystemeInterface $serviceSysteme
    ) {
        parent::__construct($container, $serviceSecurite);
        $this->serviceSupervision = $serviceSupervision;
        $this->serviceSysteme = $serviceSysteme;
    }

    /**
     * Affiche les journaux d'audit avec filtres et pagination.
     */
    public function showAuditLogs(): void
    {
        $this->checkPermission('TRAIT_ADMIN_SUPERVISION_AUDIT_VIEW');
        // ... Logique de filtres et pagination ...
        $logs = $this->serviceSupervision->consulterJournaux($_GET);
        $this->render('Administration/supervision_audit.php', [
            'title' => 'Journaux d\'Audit',
            'logs' => $logs
        ]);
    }

    /**
     * Affiche les journaux d'erreurs du serveur.
     */
    public function showErrorLogs(): void
    {
        $this->checkPermission('TRAIT_ADMIN_SUPERVISION_ERRORS_VIEW');
        $logPath = $this->serviceSysteme->getParametre('PHP_ERROR_LOG_PATH');
        $logContent = $this->serviceSupervision->consulterJournauxErreurs($logPath);
        $this->render('Administration/supervision_errors.php', [
            'title' => 'Journaux d\'Erreurs',
            'logContent' => $logContent
        ]);
    }

    /**
     * Affiche l'état de la file d'attente des tâches asynchrones.
     */
    public function showQueueStatus(): void
    {
        $this->checkPermission('TRAIT_ADMIN_SUPERVISION_QUEUE_VIEW');
        $jobs = $this->serviceSupervision->listerTachesAsynchrones();
        $this->render('Administration/supervision_queue.php', [
            'title' => 'File d\'attente des Tâches',
            'jobs' => $jobs
        ]);
    }

    /**
     * Gère une action sur une tâche de la file d'attente (relancer, supprimer).
     */
    public function manageQueueTask(string $id, string $action): void
    {
        $this->checkPermission('TRAIT_ADMIN_SUPERVISION_QUEUE_MANAGE');
        $this->serviceSupervision->gererTacheAsynchrone($id, $action);
        $this->redirect('/admin/supervision/queue');
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Administration\UtilisateurController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Administration/UtilisateurController.php

namespace App\Backend\Controller\Administration;

use App\Backend\Controller\BaseController;
use App\Backend\Service\Utilisateur\ServiceUtilisateurInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Util\FormValidator;
use App\Config\Container;

class UtilisateurController extends BaseController
{
    private ServiceUtilisateurInterface $serviceUtilisateur;
    private FormValidator $validator;

    public function __construct(
        Container $container,
        ServiceSecuriteInterface $serviceSecurite,
        ServiceUtilisateurInterface $serviceUtilisateur,
        FormValidator $validator
    ) {
        parent::__construct($container, $serviceSecurite);
        $this->serviceUtilisateur = $serviceUtilisateur;
        $this->validator = $validator;
    }

    /**
     * Affiche la vue principale de gestion des utilisateurs avec filtres et pagination.
     */
    public function listUsers(): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_LIST');

        // Logique de filtrage et de recherche
        $filtres = [];
        if (!empty($_GET['q'])) $filtres['search'] = $_GET['q'];
        if (!empty($_GET['groupe'])) $filtres['id_groupe_utilisateur'] = $_GET['groupe'];
        if (!empty($_GET['statut'])) $filtres['statut_compte'] = $_GET['statut'];

        $utilisateurs = $this->serviceUtilisateur->listerUtilisateursComplets($filtres);

        $this->render('Administration/gestion_utilisateurs.php', [
            'title' => 'Gestion des Utilisateurs',
            'utilisateurs' => $utilisateurs,
            'filtres' => $_GET, // Pour pré-remplir les champs de filtre
            'flash' => $this->getFlashMessages()
        ]);
    }

    /**
     * Affiche le formulaire de création ou d'édition d'un utilisateur.
     */
    public function showUserForm(?string $id = null): void
    {
        $this->checkPermission($id ? 'TRAIT_ADMIN_USERS_EDIT' : 'TRAIT_ADMIN_USERS_CREATE');

        $utilisateur = null;
        if ($id) {
            $utilisateur = $this->serviceUtilisateur->lireUtilisateurComplet($id);
            if (!$utilisateur) {
                $this->setFlash('error', 'Utilisateur non trouvé.');
                $this->redirect('/admin/users');
                return;
            }
        }

        $this->render('Administration/form_utilisateur.php', [
            'title' => $id ? 'Modifier l\'Utilisateur' : 'Créer un Utilisateur',
            'utilisateur' => $utilisateur,
            'flash' => $this->getFlashMessages()
        ]);
    }

    /**
     * Traite la création ou la mise à jour d'un utilisateur.
     */
    public function saveUser(): void
    {
        if (!$this->verifyCsrfToken($_POST['csrf_token'] ?? null)) {
            $this->setFlash('error', 'Erreur de sécurité.');
            $this->redirect('/admin/users');
            return;
        }

        $id = $_POST['id_utilisateur'] ?? null;
        $this->checkPermission($id ? 'TRAIT_ADMIN_USERS_EDIT' : 'TRAIT_ADMIN_USERS_CREATE');

        // Logique de validation ici...

        try {
            if ($id) {
                // Logique de mise à jour
                $this->serviceUtilisateur->mettreAJourUtilisateur($id, $_POST['profil'], $_POST['compte']);
                $this->setFlash('success', 'Utilisateur mis à jour avec succès.');
            } else {
                // Logique de création
                $entiteId = $this->serviceUtilisateur->creerEntite($_POST['type_entite'], $_POST['profil']);
                $this->serviceUtilisateur->activerComptePourEntite($entiteId, $_POST['compte'], false);
                $this->setFlash('success', 'Utilisateur créé avec succès.');
            }
        } catch (\Exception $e) {
            $this->setFlash('error', $e->getMessage());
        }

        $this->redirect($id ? '/admin/users/edit/' . $id : '/admin/users');
    }

    /**
     * Traite la suppression physique d'un utilisateur.
     */
    public function deleteUser(string $id): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_DELETE');
        // CSRF check via POST

        try {
            $this->serviceUtilisateur->supprimerUtilisateurEtEntite($id);
            $this->setFlash('success', 'Utilisateur supprimé définitivement.');
        } catch (\Exception $e) {
            $this->setFlash('error', $e->getMessage());
        }
        $this->redirect('/admin/users');
    }

    /**
     * Traite les actions en masse sur une sélection d'utilisateurs.
     */
    public function handleBulkActions(): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_BULK_ACTION');
        // ... Logique pour récupérer les IDs et l'action, puis boucler en appelant les services ...
        // ... Construire un rapport et l'afficher via un message flash ...
        $this->redirect('/admin/users');
    }

    /**
     * Déclenche la réinitialisation du mot de passe par l'admin.
     */
    public function resetPassword(string $id): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_RESET_PASSWORD');
        try {
            $this->serviceUtilisateur->reinitialiserMotDePasseAdmin($id);
            $this->setFlash('success', 'Un nouveau mot de passe a été généré et envoyé à l\'utilisateur.');
        } catch (\Exception $e) {
            $this->setFlash('error', $e->getMessage());
        }
        $this->redirect('/admin/users/edit/' . $id);
    }

    /**
     * Démarre une session d'impersonation.
     */
    public function impersonate(string $id): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_IMPERSONATE');
        $adminId = $this->serviceSecurite->getUtilisateurConnecte()['numero_utilisateur'];

        if ($this->serviceSecurite->demarrerImpersonation($adminId, $id)) {
            $this->redirect('/dashboard'); // Redirige vers le dashboard de l'utilisateur cible
        } else {
            $this->setFlash('error', 'Impossible de démarrer l\'impersonation.');
            $this->redirect('/admin/users');
        }
    }

    /**
     * Arrête la session d'impersonation en cours.
     */
    public function stopImpersonating(): void
    {
        if ($this->serviceSecurite->arreterImpersonation()) {
            $this->redirect('/admin/dashboard');
        } else {
            $this->redirect('/');
        }
    }

    /**
     * Affiche l'interface d'importation en masse.
     */
    public function showImportForm(): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_IMPORT');
        $this->render('Administration/import_utilisateurs.php', [
            'title' => 'Importer des Utilisateurs'
        ]);
    }

    /**
     * Traite le fichier importé.
     */
    public function handleImport(): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_IMPORT');
        // ... Logique d'upload, de validation du fichier et appel à $this->serviceUtilisateur->importerEtudiantsDepuisFichier() ...
        $this->redirect('/admin/users');
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\AssetController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/AssetController.php

namespace App\Backend\Controller;

use App\Config\Container;
use App\Backend\Service\Document\ServiceDocumentInterface;
use App\Backend\Exception\ElementNonTrouveException;
use App\Backend\Exception\PermissionException;

class AssetController extends BaseController
{
    private ServiceDocumentInterface $documentService;

    public function __construct(Container $container)
    {
        parent::__construct($container);
        $this->documentService = $container->get(ServiceDocumentInterface::class);
    }

    public function serveProtectedFile(string $type, string $filename): void
    {
        $user = $this->securiteService->getUtilisateurConnecte();
        if (!$user) {
            $this->supervisionService->enregistrerAction('ANONYMOUS', 'ACCES_ASSET_ECHEC', null, null, ['reason' => 'Non connecté', 'file' => $type . '/' . $filename]);
            $this->renderError(401, "Accès non autorisé. Veuillez vous connecter.");
        }

        $fullPath = ROOT_PATH . '/Public/uploads/' . $type . '/' . $filename;

        if (!file_exists($fullPath) || !is_file($fullPath)) {
            $this->supervisionService->enregistrerAction($user['numero_utilisateur'], 'ACCES_ASSET_ECHEC', null, null, ['reason' => 'Fichier non trouvé', 'file' => $type . '/' . $filename]);
            $this->renderError(404, "Le fichier demandé n'existe pas.");
        }

        $hasPermission = false;

        if ($this->securiteService->utilisateurPossedePermission('TRAIT_ADMIN_ACCES_FICHIERS_PROTEGES')) {
            $hasPermission = true;
        }
        elseif ($this->documentService->verifierProprieteDocument($filename, $user['numero_utilisateur'])) {
            $hasPermission = true;
        }
        elseif ($this->securiteService->utilisateurPossedePermission('TRAIT_PERS_ADMIN_ACCES_DOCUMENTS_ETUDIANTS')) {
            $hasPermission = true;
        }

        if (!$hasPermission) {
            $this->supervisionService->enregistrerAction($user['numero_utilisateur'], 'ACCES_ASSET_ECHEC', null, null, ['reason' => 'Permission refusée', 'file' => $type . '/' . $filename]);
            $this->renderError(403, "Vous n'êtes pas autorisé à accéder à ce fichier.");
        }

        $mimeType = mime_content_type($fullPath);
        header('Content-Type: ' . $mimeType);
        header('Content-Length: ' . filesize($fullPath));
        header('Content-Disposition: inline; filename="' . basename($filename) . '"');
        readfile($fullPath);

        $this->supervisionService->enregistrerAction($user['numero_utilisateur'], 'ACCES_ASSET_SUCCES', null, null, ['file' => $type . '/' . $filename]);
        exit();
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\AuthentificationController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/AuthentificationController.php

namespace App\Backend\Controller;

use App\Config\Container;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Communication\ServiceCommunicationInterface;
use App\Backend\Exception\{IdentifiantsInvalidesException, CompteBloqueException, CompteNonValideException, MotDePasseInvalideException, TokenInvalideException, TokenExpireException, OperationImpossibleException}; // Ajout de OperationImpossibleException si nécessaire

class AuthentificationController extends BaseController
{
    // Supprimer les déclarations de propriétés si elles sont déjà 'protected' dans BaseController
    // private ServiceSecuriteInterface $securiteService; // <-- Supprimer cette ligne
    private ServiceCommunicationInterface $communicationService; // Garder si elle n'est pas dans BaseController

    public function __construct(Container $container)
    {
        parent::__construct($container); // Appelle le constructeur de BaseController qui initialise $this->securiteService
        // $this->securiteService = $container->get(ServiceSecuriteInterface::class); // <-- Supprimer cette ligne
        $this->communicationService = $container->get(ServiceCommunicationInterface::class);
    }

    public function showLoginForm(): void
    {
        if ($this->securiteService->estUtilisateurConnecte()) {
            $this->redirect('/dashboard');
        }
        $this->render('Auth/auth', ['title' => 'Connexion', 'csrf_token' => $this->generateCsrfToken('login_form')], 'layout/layout_auth');
    }

    public function handleLogin(): void
    {
        if (!$this->isPostRequest()) {
            $this->redirect('/login');
        }

        $data = $this->getPostData();

        if (!$this->validateCsrfToken('login_form', $data['csrf_token'] ?? '')) {
            $this->redirect('/login');
        }

        $identifiant = $data['identifiant'] ?? '';
        $motDePasse = $data['mot_de_passe'] ?? '';

        try {
            $result = $this->securiteService->tenterConnexion($identifiant, $motDePasse);

            if ($result['status'] === '2fa_required') {
                // L'ID utilisateur est déjà stocké en session par tenterConnexion si 2FA est requise
                $_SESSION['2fa_pending'] = true;
                $this->redirect('/2fa');
            } elseif ($result['status'] === 'success') {
                $this->addFlashMessage('success', 'Connexion réussie !');
                $this->redirect('/dashboard');
            }
        } catch (IdentifiantsInvalidesException $e) {
            $this->addFlashMessage('error', $e->getMessage());
            $this->redirect('/login');
        } catch (CompteBloqueException $e) {
            $this->addFlashMessage('error', $e->getMessage());
            $this->redirect('/login');
        } catch (CompteNonValideException $e) {
            $this->addFlashMessage('warning', $e->getMessage() . " Veuillez vérifier votre email pour valider votre compte.");
            $this->redirect('/login');
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur inattendue est survenue. Veuillez réessayer.');
            error_log("Erreur de connexion: " . $e->getMessage());
            $this->redirect('/login');
        }
    }

    public function show2faForm(): void
    {
        if (!isset($_SESSION['2fa_pending']) || !$_SESSION['2fa_pending'] || !isset($_SESSION['2fa_user_id'])) {
            $this->redirect('/login');
        }
        $this->render('Auth/2fa', ['title' => 'Vérification 2FA', 'csrf_token' => $this->generateCsrfToken('2fa_form')], 'layout/layout_auth');
    }

    public function handle2faVerification(): void
    {
        if (!$this->isPostRequest() || !isset($_SESSION['2fa_user_id'])) {
            $this->redirect('/login');
        }

        $data = $this->getPostData();

        if (!$this->validateCsrfToken('2fa_form', $data['csrf_token'] ?? '')) {
            $this->redirect('/2fa');
        }

        $codeTOTP = $data['code_totp'] ?? '';
        $userId = $_SESSION['2fa_user_id'];

        try {
            if ($this->securiteService->verifierCodeAuthentificationDeuxFacteurs($userId, $codeTOTP)) {
                $this->securiteService->demarrerSessionUtilisateur($userId);
                $this->addFlashMessage('success', 'Vérification 2FA réussie !');
                $this->redirect('/dashboard');
            } else {
                $this->addFlashMessage('error', 'Code 2FA incorrect. Veuillez réessayer.');
                $this->redirect('/2fa');
            }
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Erreur lors de la vérification 2FA. Veuillez réessayer.');
            error_log("Erreur 2FA: " . $e->getMessage());
            $this->redirect('/2fa');
        }
    }

    public function logout(): void
    {
        $this->securiteService->logout();
        $this->addFlashMessage('info', 'Vous avez été déconnecté.');
        $this->redirect('/login');
    }

    public function showForgotPasswordForm(): void
    {
        $this->render('Auth/forgot_password', ['title' => 'Mot de passe oublié', 'csrf_token' => $this->generateCsrfToken('forgot_password_form')], 'layout/layout_auth');
    }

    public function handleForgotPassword(): void
    {
        if (!$this->isPostRequest()) {
            $this->redirect('/forgot-password');
        }

        $data = $this->getPostData();

        if (!$this->validateCsrfToken('forgot_password_form', $data['csrf_token'] ?? '')) {
            $this->redirect('/forgot-password');
        }

        $email = $data['email'] ?? '';

        try {
            $this->securiteService->demanderReinitialisationMotDePasse($email, $this->communicationService);
            $this->addFlashMessage('success', 'Si votre adresse email est enregistrée chez nous, un lien de réinitialisation vous a été envoyé.');
            $this->redirect('/login');
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur est survenue lors de la demande de réinitialisation.');
            error_log("Erreur demande MDP oublié: " . $e->getMessage());
            $this->redirect('/forgot-password');
        }
    }

    public function showResetPasswordForm(string $token): void
    {
        $this->render('Auth/reset_password', ['title' => 'Réinitialiser le mot de passe', 'token' => $token, 'csrf_token' => $this->generateCsrfToken('reset_password_form')], 'layout/layout_auth');
    }

    public function handleResetPassword(): void
    {
        if (!$this->isPostRequest()) {
            $this->redirect('/login');
        }

        $data = $this->getPostData();

        if (!$this->validateCsrfToken('reset_password_form', $data['csrf_token'] ?? '')) {
            $this->redirect('/reset-password/' . ($data['token'] ?? ''));
        }

        $token = $data['token'] ?? '';
        $nouveauMotDePasse = $data['nouveau_mot_de_passe'] ?? '';
        $confirmationMotDePasse = $data['confirmation_mot_de_passe'] ?? '';

        if ($nouveauMotDePasse !== $confirmationMotDePasse) {
            $this->addFlashMessage('error', 'Les mots de passe ne correspondent pas.');
            $this->redirect('/reset-password/' . $token);
        }

        try {
            // Ordre des catch inversé pour capturer la plus spécifique en premier
            $this->securiteService->reinitialiserMotDePasseViaToken($token, $nouveauMotDePasse);
            $this->addFlashMessage('success', 'Votre mot de passe a été réinitialisé avec succès. Vous pouvez maintenant vous connecter.');
            $this->redirect('/login');
        } catch (TokenExpireException $e) { // Plus spécifique
            $this->addFlashMessage('error', $e->getMessage());
            $this->redirect('/forgot-password');
        } catch (TokenInvalideException $e) { // Moins spécifique
            $this->addFlashMessage('error', $e->getMessage());
            $this->redirect('/forgot-password');
        } catch (MotDePasseInvalideException $e) {
            $this->addFlashMessage('error', $e->getMessage());
            $this->redirect('/reset-password/' . $token);
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur inattendue est survenue lors de la réinitialisation.');
            error_log("Erreur réinitialisation MDP: " . $e->getMessage());
            $this->redirect('/reset-password/' . $token);
        }
    }

    public function validateEmail(string $token): void
    {
        try {
            $this->securiteService->validateEmailToken($token);
            $this->addFlashMessage('success', 'Votre adresse email a été validée avec succès ! Vous pouvez maintenant vous connecter.');
            $this->redirect('/login');
        } catch (TokenExpireException $e) { // Plus spécifique
            $this->addFlashMessage('error', $e->getMessage() . " Le lien a expiré. Veuillez demander un nouveau lien de validation.");
            $this->redirect('/login');
        } catch (TokenInvalideException $e) { // Moins spécifique
            $this->addFlashMessage('error', $e->getMessage() . " Le lien est invalide ou a déjà été utilisé.");
            $this->redirect('/login');
        } catch (OperationImpossibleException $e) { // Si l'email est déjà validé
            $this->addFlashMessage('warning', $e->getMessage());
            $this->redirect('/login');
        } catch (\Exception $e) {
            $this->addFlashMessage('error', 'Une erreur est survenue lors de la validation de votre email.');
            error_log("Erreur validation email: " . $e->getMessage());
            $this->redirect('/login');
        }
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\BaseController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/BaseController.php

namespace App\Backend\Controller;

use App\Config\Container;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
// use App\Backend\Exception\PermissionException; // Retiré car géré par renderError
use App\Backend\Exception\ElementNonTrouveException;
// use App\Backend\Util\FormValidator; // Retiré car non utilisé directement ici

use JetBrains\PhpStorm\NoReturn;
use Random\RandomException; // Import pour la gestion de l'exception RandomException

abstract class BaseController
{
    protected Container $container;
    protected ServiceSecuriteInterface $securiteService;
    protected ServiceSupervisionInterface $supervisionService;

    public function __construct(Container $container)
    {
        $this->container = $container;
        $this->securiteService = $container->get(ServiceSecuriteInterface::class);
        $this->supervisionService = $container->get(ServiceSupervisionInterface::class);

        // Démarrer la session si ce n'est pas déjà fait
        if (session_status() == PHP_SESSION_NONE) {
            session_start();
        }

        // Mettre à jour l'activité de la session
        // La durée d'inactivité est gérée par le ServiceSecurite lors de la connexion
        // Ici, on s'assure juste que la session est active et on met à jour le timestamp
        if (isset($_SESSION['user_id'])) {
            $_SESSION['last_activity'] = time();
        }
    }

    /**
     * Rend une vue en incluant le layout principal.
     *
     * @param string $viewPath Chemin de la vue (ex: 'Auth/login').
     * @param array $data Données à passer à la vue.
     * @param string $layout Chemin du layout (ex: 'layout/app').
     * @return void
     *
     * Note: Le paramètre $viewPath est utilisé implicitement par le layout qui inclut la vue.
     * Le linter peut signaler qu'il est inutilisé, mais c'est la conception voulue.
     */
    protected function render(string $viewPath, array $data = [], string $layout = 'layout/app'): void
    {
        // Récupérer les messages flash
        $data['flash_messages'] = $_SESSION['flash_messages'] ?? [];
        unset($_SESSION['flash_messages']);

        // Récupérer l'utilisateur connecté et ses permissions
        $data['user'] = $this->securiteService->getUtilisateurConnecte();
        $data['is_impersonating'] = $this->securiteService->estEnModeImpersonation();
        $data['impersonator_data'] = $this->securiteService->getImpersonatorData();

        // Construire le menu de navigation dynamique
        $data['menu_items'] = $this->securiteService->construireMenuPourUtilisateurConnecte();

        // Extraire les données pour les rendre accessibles directement dans la vue
        extract($data);

        // CORRECTION ICI : Utiliser ROOT_PATH pour construire le chemin absolu
        $layoutPath = ROOT_PATH . '/src/Frontend/views/' . $layout . '.php';
        if (!file_exists($layoutPath)) {
            throw new ElementNonTrouveException("Layout non trouvé: " . $layoutPath);
        }
        require_once $layoutPath;
    }

    /**
     * Rend une vue d'erreur spécifique.
     *
     * @param int $statusCode Code HTTP de l'erreur (ex: 404, 403, 500).
     * @param string $message Message d'erreur à afficher.
     * @return void
     * @throws ElementNonTrouveException Si le layout d'erreur n'est pas trouvé.
     */
    #[NoReturn]
    public function renderError(int $statusCode, string $message = ''): void
    {
        http_response_code($statusCode);
        $viewPath = 'errors/' . $statusCode;
        $data = ['message' => $message];
        // Utiliser un layout minimal pour les erreurs
        $this->render($viewPath, $data, 'layout/layout_auth');
        exit();
    }

    /**
     * Redirige l'utilisateur vers une URL donnée.
     *
     * @param string $url L'URL de destination.
     * @return void
     */
    #[NoReturn]
    protected function redirect(string $url): void
    {
        header('Location: ' . $url);
        exit();
    }

    /**
     * Ajoute un message flash à la session.
     *
     * @param string $type Type de message (success, error, warning, info).
     * @param string $message Contenu du message.
     * @return void
     */
    protected function addFlashMessage(string $type, string $message): void
    {
        if (!isset($_SESSION['flash_messages'])) {
            $_SESSION['flash_messages'] = [];
        }
        $_SESSION['flash_messages'][] = ['type' => $type, 'message' => $message];
    }

    /**
     * Récupère les données POST de la requête.
     *
     * @return array Les données POST nettoyées.
     */
    protected function getPostData(): array
    {
        // FILTER_SANITIZE_FULL_SPECIAL_CHARS est suffisant pour la plupart des cas
        // Pour des données plus complexes (HTML riche), une validation/nettoyage spécifique est nécessaire.
        return filter_input_array(INPUT_POST, FILTER_SANITIZE_FULL_SPECIAL_CHARS, true) ?? [];
    }

    /**
     * Récupère les données GET de la requête.
     *
     * @return array Les données GET nettoyées.
     */
    protected function getGetData(): array
    {
        return filter_input_array(INPUT_GET, FILTER_SANITIZE_FULL_SPECIAL_CHARS, true) ?? [];
    }

    /**
     * Récupère les données d'un fichier uploadé.
     *
     * @param string $fieldName Le nom du champ de fichier dans le formulaire.
     * @return array|null Les données du fichier ou null si non présent.
     */
    protected function getFileData(string $fieldName): ?array
    {
        return $_FILES[$fieldName] ?? null;
    }

    /**
     * Vérifie si la requête est de type POST.
     *
     * @return bool
     */
    protected function isPostRequest(): bool
    {
        return $_SERVER['REQUEST_METHOD'] === 'POST';
    }

    /**
     * Vérifie si la requête est de type GET.
     *
     * @return bool
     */
    protected function isGetRequest(): bool
    {
        return $_SERVER['REQUEST_METHOD'] === 'GET';
    }

    /**
     * Vérifie la permission de l'utilisateur connecté.
     * Redirige vers une page 403 si la permission est refusée.
     *
     * @param string $permissionCode Le code de la permission requise.
     * @param string|null $contexteId L'ID de l'entité concernée par la permission.
     * @param string|null $contexteType Le type de l'entité concernée par la permission.
     * @return void
     * @throws \App\Backend\Exception\PermissionException Si l'utilisateur n'a pas la permission.
     */
    protected function requirePermission(string $permissionCode, ?string $contexteId = null, ?string $contexteType = null): void
    {
        if (!$this->securiteService->utilisateurPossedePermission($permissionCode, $contexteId, $contexteType)) {
            $this->supervisionService->enregistrerAction(
                $_SESSION['user_id'] ?? 'ANONYMOUS',
                'ACCES_REFUSE',
                $contexteId,
                $contexteType,
                ['permission_requise' => $permissionCode, 'url' => $_SERVER['REQUEST_URI']]
            );
            // Lève une exception pour que le routeur ou un gestionnaire d'erreurs global puisse la capturer
            // ou, comme implémenté ici, appelle directement renderError.
            $this->renderError(403, "Vous n'avez pas la permission d'accéder à cette ressource ou d'effectuer cette action.");
        }
    }

    /**
     * Génère et vérifie un jeton CSRF pour protéger les formulaires.
     *
     * @param string $formName Nom unique du formulaire.
     * @return string Le jeton CSRF à inclure dans le formulaire.
     * @throws RandomException Si une source de hasard cryptographiquement sûre n'est pas disponible.
     */
    protected function generateCsrfToken(string $formName): string
    {
        try {
            if (empty($_SESSION['csrf_tokens'][$formName])) {
                $_SESSION['csrf_tokens'][$formName] = bin2hex(random_bytes(32));
            }
            return $_SESSION['csrf_tokens'][$formName];
        } catch (RandomException $e) {
            // Log l'erreur et/ou affiche un message générique à l'utilisateur
            error_log("Erreur de génération CSRF: " . $e->getMessage());
            $this->addFlashMessage('error', 'Une erreur de sécurité est survenue. Veuillez réessayer.');
            // En production, on pourrait rediriger ou afficher une page d'erreur critique.
            throw $e; // Re-lancer l'exception pour une gestion plus globale si nécessaire
        }
    }

    /**
     * Valide un jeton CSRF soumis.
     *
     * @param string $formName Nom unique du formulaire.
     * @param string $token Le jeton soumis par l'utilisateur.
     * @return bool Vrai si le jeton est valide, faux sinon.
     */
    protected function validateCsrfToken(string $formName, string $token): bool
    {
        if (!isset($_SESSION['csrf_tokens'][$formName]) || $_SESSION['csrf_tokens'][$formName] !== $token) {
            unset($_SESSION['csrf_tokens'][$formName]); // Invalide le token après usage ou échec
            $this->addFlashMessage('error', 'Jeton de sécurité invalide. Veuillez réessayer.');
            return false;
        }
        unset($_SESSION['csrf_tokens'][$formName]); // Le token est à usage unique
        return true;
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Commission\CommissionDashboardController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Commission/CommissionDashboardController.php

namespace App\Backend\Controller\Commission;

use App\Backend\Controller\BaseController;
use App\Backend\Service\WorkflowSoutenance\ServiceWorkflowSoutenanceInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class CommissionDashboardController extends BaseController
{
    private ServiceWorkflowSoutenanceInterface $serviceWorkflow;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceWorkflowSoutenanceInterface $serviceWorkflow
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceWorkflow = $serviceWorkflow;
    }

    /**
     * Affiche le tableau de bord pour un membre de la commission.
     */
    public function index(): void
    {
        $this->checkPermission('TRAIT_COMMISSION_DASHBOARD_ACCEDER');
        $user = $this->serviceSecurite->getUtilisateurConnecte();

        try {
// Récupérer les rapports en attente de vote pour cet utilisateur
            $rapportsAVoter = $this->serviceWorkflow->listerRapports(['statut' => 'en_commission', 'votant' => $user['numero_utilisateur']]);
// Récupérer les PV en attente d'approbation
            $pvsAApprouver = $this->serviceWorkflow->listerPvAApprouver($user['numero_utilisateur']);

            $this->render('Commission/dashboard_commission.php', [
                'title' => 'Tableau de Bord Commission',
                'rapportsAVoter' => $rapportsAVoter,
                'pvsAApprouver' => $pvsAApprouver
            ]);
        } catch (\Exception $e) {
            $this->serviceSupervision->enregistrerAction($user['numero_utilisateur'], 'DASHBOARD_COMMISSION_ERROR', null, null, ['error' => $e->getMessage()]);
            $this->render('errors/500.php', ['error_message' => "Impossible de charger les données du tableau de bord."]);
        }
    }
}


/***********************************************************************************
 * Fichier: src/Backend/Controller\Commission\WorkflowCommissionController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Commission/WorkflowCommissionController.php

namespace App\Backend\Controller\Commission;

use App\Backend\Controller\BaseController;
use App\Backend\Service\WorkflowSoutenance\ServiceWorkflowSoutenanceInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class WorkflowCommissionController extends BaseController
{
    private ServiceWorkflowSoutenanceInterface $serviceWorkflow;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceWorkflowSoutenanceInterface $serviceWorkflow
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceWorkflow = $serviceWorkflow;
    }

    public function listSessions(): void
    {
        $this->checkPermission('COMMISSION_SESSIONS_LIST');
        $sessions = $this->serviceWorkflow->listerSessionsPourCommission();
        $this->render('Commission/workflow_commission.php', [
            'title' => 'Gestion des Sessions de Validation',
            'sessions' => $sessions
        ]);
    }

    public function createSession(): void
    {
        $this->checkPermission('COMMISSION_SESSIONS_CREATE');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $user = $this->serviceSecurite->getUtilisateurConnecte();
        try {
            $idSession = $this->serviceWorkflow->creerSession($user['numero_utilisateur'], $_POST);
            $this->jsonResponse(['success' => true, 'message' => 'Session créée avec succès.', 'id' => $idSession]);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }

    public function viewSession(string $id): void
    {
        $this->checkPermission('COMMISSION_SESSIONS_VIEW');
        $session = $this->serviceWorkflow->lireSessionComplete($id);
        if (!$session) {
            $this->render('errors/404.php');
            return;
        }
        $this->render('Commission/view_session.php', [
            'title' => 'Détails de la Session',
            'session' => $session
        ]);
    }

    public function submitVote(string $idSession, string $idRapport): void
    {
        $this->checkPermission('COMMISSION_VOTE');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $user = $this->serviceSecurite->getUtilisateurConnecte();
        try {
            $this->serviceWorkflow->enregistrerVote($idRapport, $user['numero_utilisateur'], $_POST['decision'], $_POST['commentaire'] ?? null);
            $this->jsonResponse(['success' => true, 'message' => 'Vote enregistré.']);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }
}


/***********************************************************************************
 * Fichier: src/Backend/Controller\DashboardController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/DashboardController.php

namespace App\Backend\Controller;

use App\Config\Container;

class DashboardController extends BaseController
{
    public function __construct(Container $container)
    {
        parent::__construct($container);
    }

    public function index(): void
    {
        // 1. Vérifier si l'utilisateur est connecté. Si non, rediriger vers la page de connexion.
        if (!$this->securiteService->estUtilisateurConnecte()) {
            $this->redirect('/login');
        }

        // 2. Récupérer les données de l'utilisateur connecté pour déterminer son groupe.
        $user = $this->securiteService->getUtilisateurConnecte();
        $dashboardUrl = null; // Initialiser à null pour détecter si une URL est trouvée

        // 3. Déterminer l'URL du tableau de bord en fonction du groupe de l'utilisateur.
        switch ($user['id_groupe_utilisateur']) {
            case 'GRP_ADMIN_SYS':
                $dashboardUrl = '/admin/dashboard';
                break;
            case 'GRP_ETUDIANT':
                $dashboardUrl = '/etudiant/dashboard';
                break;
            case 'GRP_ENSEIGNANT': // Rôle de base enseignant, peut être un dashboard générique
            case 'GRP_COMMISSION': // Membre de commission
                $dashboardUrl = '/commission/dashboard';
                break;
            case 'GRP_PERS_ADMIN': // Personnel administratif de base
            case 'GRP_RS': // Responsable Scolarité
            case 'GRP_AGENT_CONFORMITE': // Agent de Conformité
                $dashboardUrl = '/personnel/dashboard';
                break;
            default:
                // Si le groupe de l'utilisateur n'est pas reconnu ou n'a pas de dashboard spécifique.
                // L'utilisateur est connecté mais n'a pas de destination claire.
                $this->addFlashMessage('error', 'Votre rôle ne vous donne pas accès à un tableau de bord spécifique.');
                // Enregistrer l'action d'accès refusé pour audit
                $this->supervisionService->enregistrerAction(
                    $user['numero_utilisateur'],
                    'ACCES_DASHBOARD_REFUSE',
                    null,
                    null,
                    ['reason' => 'Groupe utilisateur non géré pour le dashboard', 'group' => $user['id_groupe_utilisateur']]
                );
                // Rendre une page d'erreur 403 (Accès Interdit)
                $this->renderError(403, 'Accès non autorisé à un tableau de bord.');
                break; // Le `exit()` dans `renderError` termine l'exécution ici.
        }

        // 4. Si une URL de tableau de bord a été déterminée, rediriger l'utilisateur.
        if ($dashboardUrl) {
            $this->supervisionService->enregistrerAction(
                $user['numero_utilisateur'],
                'ACCES_DASHBOARD_REUSSI',
                null,
                $dashboardUrl,
                ['group' => $user['id_groupe_utilisateur']]
            );
            $this->redirect($dashboardUrl);
        }
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Etudiant\EtudiantDashboardController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Etudiant/EtudiantDashboardController.php

namespace App\Backend\Controller\Etudiant;

use App\Backend\Controller\BaseController;
use App\Backend\Service\WorkflowSoutenance\ServiceWorkflowSoutenanceInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class EtudiantDashboardController extends BaseController
{
    private ServiceWorkflowSoutenanceInterface $serviceWorkflow;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceWorkflowSoutenanceInterface $serviceWorkflow
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceWorkflow = $serviceWorkflow;
    }

    /**
     * Affiche le tableau de bord de l'étudiant.
     */
    public function index(): void
    {
        $this->checkPermission('TRAIT_ETUDIANT_DASHBOARD_ACCEDER');
        $user = $this->serviceSecurite->getUtilisateurConnecte();

        try {
            $rapports = $this->serviceWorkflow->listerRapports(['numero_carte_etudiant' => $user['numero_utilisateur']]);
            $rapportActif = !empty($rapports) ? $rapports[0] : null;

            $this->render('Etudiant/dashboard_etudiant.php', [
                'title' => 'Mon Tableau de Bord',
                'rapportActif' => $rapportActif
            ]);
        } catch (\Exception $e) {
            $this->serviceSupervision->enregistrerAction($user['numero_utilisateur'], 'DASHBOARD_ETUDIANT_ERROR', null, null, ['error' => $e->getMessage()]);
            $this->render('errors/500.php', ['error_message' => "Impossible de charger les données de votre tableau de bord."]);
        }
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Etudiant\ProfilEtudiantController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Etudiant/ProfilEtudiantController.php

namespace App\Backend\Controller\Etudiant;

use App\Backend\Controller\BaseController;
use App\Backend\Service\Utilisateur\ServiceUtilisateurInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class ProfilEtudiantController extends BaseController
{
    private ServiceUtilisateurInterface $serviceUtilisateur;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceUtilisateurInterface $serviceUtilisateur
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceUtilisateur = $serviceUtilisateur;
    }

    /**
     * Affiche le profil de l'étudiant connecté.
     */
    public function showProfile(): void
    {
        $this->checkPermission('ETUDIANT_PROFIL_READ');
        $user = $this->serviceSecurite->getUtilisateurConnecte();
        $this->render('Etudiant/profil_etudiant.php', [
            'title' => 'Mon Profil',
            'user' => $user
        ]);
    }

    /**
     * Traite la mise à jour du profil de l'étudiant.
     */
    public function updateProfile(): void
    {
        $this->checkPermission('ETUDIANT_PROFIL_UPDATE');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $user = $this->serviceSecurite->getUtilisateurConnecte();
        $rules = [
            'telephone' => 'max:20',
            'email_contact_secondaire' => 'email|max:255',
            'adresse_postale' => 'max:500'
        ];

        if (!$this->formValidator->validate($_POST, $rules)) {
            $this->jsonResponse(['success' => false, 'errors' => $this->formValidator->getErrors()], 422);
            return;
        }

        try {
            $donneesProfil = [
                'telephone' => $_POST['telephone'],
                'email_contact_secondaire' => $_POST['email_contact_secondaire'],
                'adresse_postale' => $_POST['adresse_postale']
            ];
            $this->serviceUtilisateur->mettreAJourUtilisateur($user['numero_utilisateur'], $donneesProfil, []);
            $this->jsonResponse(['success' => true, 'message' => 'Profil mis à jour avec succès.']);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Etudiant\RapportController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Etudiant/RapportController.php

namespace App\Backend\Controller\Etudiant;

use App\Backend\Controller\BaseController;
use App\Backend\Service\WorkflowSoutenance\ServiceWorkflowSoutenanceInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class RapportController extends BaseController
{
    private ServiceWorkflowSoutenanceInterface $serviceWorkflow;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceWorkflowSoutenanceInterface $serviceWorkflow
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceWorkflow = $serviceWorkflow;
    }

    /**
     * Affiche le formulaire de rédaction/édition du rapport.
     */
    public function showRapportForm(): void
    {
        $this->checkPermission('TRAIT_ETUDIANT_RAPPORT_SUIVRE');
        $user = $this->serviceSecurite->getUtilisateurConnecte();
        $rapport = $this->serviceWorkflow->lireRapportCompletParEtudiant($user['numero_utilisateur']);
        $this->render('Etudiant/redaction_rapport.php', [
            'title' => 'Mon Rapport',
            'rapport' => $rapport
        ]);
    }

    /**
     * Sauvegarde le brouillon du rapport.
     */
    public function saveRapport(): void
    {
        $this->checkPermission('ETUDIANT_RAPPORT_EDIT');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $user = $this->serviceSecurite->getUtilisateurConnecte();
        try {
            $metadonnees = ['libelle_rapport_etudiant' => $_POST['titre'], 'theme' => $_POST['theme']];
            $sections = $_POST['sections'] ?? []; // Supposant que les sections sont envoyées sous forme de tableau
            $this->serviceWorkflow->creerOuMettreAJourBrouillon($user['numero_utilisateur'], $metadonnees, $sections);
            $this->jsonResponse(['success' => true, 'message' => 'Brouillon sauvegardé.']);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }

    /**
     * Soumet le rapport pour validation.
     */
    public function submitRapport(): void
    {
        $this->checkPermission('TRAIT_ETUDIANT_RAPPORT_SOUMETTRE');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $user = $this->serviceSecurite->getUtilisateurConnecte();
        $idRapport = $_POST['id_rapport'];
        try {
            $this->serviceWorkflow->soumettreRapport($idRapport, $user['numero_utilisateur']);
            $this->jsonResponse(['success' => true, 'message' => 'Rapport soumis avec succès !', 'redirect' => '/etudiant/dashboard']);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\HomeController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/HomeController.php

namespace App\Backend\Controller;

use App\Config\Container;
use App\Backend\Service\Systeme\ServiceSystemeInterface;

class HomeController extends BaseController
{
    private ServiceSystemeInterface $systemeService;

    public function __construct(Container $container)
    {
        parent::__construct($container);
        $this->systemeService = $container->get(ServiceSystemeInterface::class);
    }

    public function index(): void
    {
        if ($this->systemeService->estEnMaintenance()) {
            $message = $this->systemeService->getParametre('MAINTENANCE_MODE_MESSAGE', "Le site est actuellement en maintenance. Veuillez réessayer plus tard.");
            $this->renderError(503, $message);
        }

        if ($this->securiteService->estUtilisateurConnecte()) {
            $this->redirect('/dashboard');
        }

        $this->render('home/index', ['title' => 'Bienvenue sur GestionMySoutenance'], 'layout/layout_auth');
    }

    public function about(): void
    {
        $this->render('home/about', ['title' => 'À propos de nous'], 'layout/layout_auth');
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\PersonnelAdministratif\PersonnelDashboardController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/PersonnelAdministratif/PersonnelDashboardController.php

namespace App\Backend\Controller\PersonnelAdministratif;

use App\Backend\Controller\BaseController;
use App\Backend\Service\WorkflowSoutenance\ServiceWorkflowSoutenanceInterface;
use App\Backend\Service\Utilisateur\ServiceUtilisateurInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class PersonnelDashboardController extends BaseController
{
    private ServiceWorkflowSoutenanceInterface $serviceWorkflow;
    private ServiceUtilisateurInterface $serviceUtilisateur;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceWorkflowSoutenanceInterface $serviceWorkflow,
        ServiceUtilisateurInterface $serviceUtilisateur
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceWorkflow = $serviceWorkflow;
        $this->serviceUtilisateur = $serviceUtilisateur;
    }

    /**
     * Affiche le tableau de bord pour le personnel administratif.
     * Le contenu est adapté en fonction du rôle (Agent de conformité ou RS).
     */
    public function index(): void
    {
        $this->checkPermission('TRAIT_PERS_ADMIN_DASHBOARD_ACCEDER');
        $user = $this->serviceSecurite->getUtilisateurConnecte();
        $data = ['title' => 'Tableau de Bord Administratif'];

        try {
            if ($user['id_groupe_utilisateur'] === 'GRP_AGENT_CONFORMITE') {
                $data['rapportsEnAttente'] = $this->serviceWorkflow->listerRapports(['id_statut_rapport' => 'RAP_SOUMIS']);
            } elseif ($user['id_groupe_utilisateur'] === 'GRP_RS') {
                $data['etudiantsAActiver'] = $this->serviceUtilisateur->listerUtilisateursComplets(['statut_compte' => 'en_attente_activation']);
            }
            $this->render('PersonnelAdministratif/dashboard_personnel.php', $data);
        } catch (\Exception $e) {
            $this->serviceSupervision->enregistrerAction($user['numero_utilisateur'], 'DASHBOARD_PERSONNEL_ERROR', null, null, ['error' => $e->getMessage()]);
            $this->render('errors/500.php', ['error_message' => "Impossible de charger les données du tableau de bord."]);
        }
    }
}


/***********************************************************************************
 * Fichier: src/Backend/Controller\PersonnelAdministratif\ScolariteController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/PersonnelAdministratif/ScolariteController.php

namespace App\Backend\Controller\PersonnelAdministratif;

use App\Backend\Controller\BaseController;
use App\Backend\Service\WorkflowSoutenance\ServiceWorkflowSoutenanceInterface;
use App\Backend\Service\Utilisateur\ServiceUtilisateurInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class ScolariteController extends BaseController
{
    private ServiceWorkflowSoutenanceInterface $serviceWorkflow;
    private ServiceUtilisateurInterface $serviceUtilisateur;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceWorkflowSoutenanceInterface $serviceWorkflow,
        ServiceUtilisateurInterface $serviceUtilisateur
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceWorkflow = $serviceWorkflow;
        $this->serviceUtilisateur = $serviceUtilisateur;
    }

    public function listConformiteQueue(): void
    {
        $this->checkPermission('TRAIT_PERS_ADMIN_CONFORMITE_LISTER');
        $rapports = $this->serviceWorkflow->listerRapports(['id_statut_rapport' => 'RAP_SOUMIS']);
        $this->render('PersonnelAdministratif/gestion_conformite.php', [
            'title' => 'File de Vérification de Conformité',
            'rapports' => $rapports
        ]);
    }

    public function showConformiteForm(string $id): void
    {
        $this->checkPermission('TRAIT_PERS_ADMIN_CONFORMITE_VERIFIER');
        $rapport = $this->serviceWorkflow->lireRapportComplet($id);
        if (!$rapport) {
            $this->render('errors/404.php');
            return;
        }
        $this->render('PersonnelAdministratif/form_conformite.php', [
            'title' => 'Vérification du Rapport',
            'rapport' => $rapport
        ]);
    }

    public function processConformite(string $id): void
    {
        $this->checkPermission('TRAIT_PERS_ADMIN_CONFORMITE_VERIFIER');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $user = $this->serviceSecurite->getUtilisateurConnecte();
        try {
            $estConforme = ($_POST['decision_conformite'] === 'conforme');
            $details = $_POST['checklist'] ?? [];
            $commentaire = $_POST['commentaire_general'] ?? null;
            $this->serviceWorkflow->traiterVerificationConformite($id, $user['numero_utilisateur'], $estConforme, $details, $commentaire);
            $this->jsonResponse(['success' => true, 'message' => 'Vérification enregistrée.', 'redirect' => '/personnel/conformite']);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }

    public function listStudentRecords(): void
    {
        $this->checkPermission('TRAIT_PERS_ADMIN_SCOLARITE_ACCEDER');
        $etudiants = $this->serviceUtilisateur->listerUtilisateursComplets(['id_type_utilisateur' => 'TYPE_ETUD']);
        $this->render('PersonnelAdministratif/gestion_scolarite.php', [
            'title' => 'Gestion des Dossiers Étudiants',
            'etudiants' => $etudiants
        ]);
    }

    public function activateStudentAccount(): void
    {
        $this->checkPermission('PERS_ADMIN_ACTIVATE_ACCOUNT');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $numeroEtudiant = $_POST['numero_etudiant'];
        try {
// Le service doit vérifier les prérequis (paiement, stage) avant d'activer
            $this->serviceUtilisateur->activerComptePourEntite($numeroEtudiant, $_POST, true);
            $this->jsonResponse(['success' => true, 'message' => 'Compte étudiant activé avec succès.']);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }
}
