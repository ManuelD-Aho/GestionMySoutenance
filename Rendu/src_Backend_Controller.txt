
/***********************************************************************************
 * Fichier: src/Backend/Controller\Administration\AdminDashboardController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Administration/AdminDashboardController.php

namespace App\Backend\Controller\Administration;

use App\Backend\Controller\BaseController;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Config\Container;

class AdminDashboardController extends BaseController
{
    private ServiceSupervisionInterface $serviceSupervision;

    public function __construct(
        Container $container,
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision
    ) {
        parent::__construct($container, $serviceSecurite);
        $this->serviceSupervision = $serviceSupervision;
    }

    /**
     * Affiche le tableau de bord principal de l'administrateur.
     * Récupère et affiche les statistiques clés de la plateforme.
     */
    public function index(): void
    {
        $this->checkPermission('TRAIT_ADMIN_DASHBOARD_ACCEDER');

        try {
            $stats = $this->serviceSupervision->genererStatistiquesDashboardAdmin();
            $this->render('Administration/dashboard_admin.php', [
                'title' => 'Tableau de Bord Administrateur',
                'stats' => $stats,
                'flash' => $this->getFlashMessages()
            ]);
        } catch (\Exception $e) {
            error_log("Erreur Dashboard Admin: " . $e->getMessage());
            $this->setFlash('error', "Impossible de charger les statistiques du tableau de bord.");
            $this->render('Administration/dashboard_admin.php', [
                'title' => 'Tableau de Bord Administrateur',
                'stats' => [],
                'flash' => $this->getFlashMessages()
            ]);
        }
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Administration\ConfigurationController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Administration/ConfigurationController.php

namespace App\Backend\Controller\Administration;

use App\Backend\Controller\BaseController;
use App\Backend\Service\Systeme\ServiceSystemeInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Config\Container;

class ConfigurationController extends BaseController
{
    private ServiceSystemeInterface $serviceSysteme;

    public function __construct(
        Container $container,
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSystemeInterface $serviceSysteme
    ) {
        parent::__construct($container, $serviceSecurite);
        $this->serviceSysteme = $serviceSysteme;
    }

    /**
     * Affiche la page de configuration principale avec ses onglets.
     */
    public function showConfigurationPage(): void
    {
        $this->checkPermission('TRAIT_ADMIN_CONFIG_PAGE_VIEW');
        $this->render('Administration/configuration.php', [
            'title' => 'Configuration du Système',
            'activeTab' => $_GET['tab'] ?? 'general'
        ]);
    }

    /**
     * Sauvegarde les paramètres système généraux.
     */
    public function saveSystemParameters(): void
    {
        $this->checkPermission('TRAIT_ADMIN_CONFIG_PARAMS_EDIT');
        // ... Logique de validation et appel à $this->serviceSysteme->setParametres() ...
        $this->jsonResponse(['success' => true, 'message' => 'Paramètres sauvegardés.']);
    }

    /**
     * API pour lister les entrées d'un référentiel.
     */
    public function listReferentielEntries(string $name): void
    {
        $this->checkPermission('TRAIT_ADMIN_CONFIG_REFERENTIELS_VIEW');
        $data = $this->serviceSysteme->gererReferentiel('list', $name);
        $this->jsonResponse(['success' => true, 'data' => $data]);
    }

    /**
     * API pour sauvegarder une entrée de référentiel.
     */
    public function saveReferentielEntry(string $name): void
    {
        $this->checkPermission('TRAIT_ADMIN_CONFIG_REFERENTIELS_EDIT');
        $id = $_POST['id'] ?? null;
        $data = $_POST['data'];
        $this->serviceSysteme->gererReferentiel($id ? 'update' : 'create', $name, $id, $data);
        $this->jsonResponse(['success' => true]);
    }

    /**
     * API pour supprimer une entrée de référentiel.
     */
    public function deleteReferentielEntry(string $name, string $id): void
    {
        $this->checkPermission('TRAIT_ADMIN_CONFIG_REFERENTIELS_EDIT');
        $this->serviceSysteme->gererReferentiel('delete', $name, $id);
        $this->jsonResponse(['success' => true]);
    }

    /**
     * API pour mettre à jour l'ordre des menus (reçoit un tableau JSON).
     */
    public function updateMenuOrder(): void
    {
        $this->checkPermission('TRAIT_ADMIN_CONFIG_MENUS_EDIT');
        $orderData = json_decode(file_get_contents('php://input'), true);
        // ... Logique pour appeler un service qui met à jour la colonne 'ordre_affichage' ...
        $this->jsonResponse(['success' => true]);
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Administration\SupervisionController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Administration/SupervisionController.php

namespace App\Backend\Controller\Administration;

use App\Backend\Controller\BaseController;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Service\Systeme\ServiceSystemeInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Config\Container;

class SupervisionController extends BaseController
{
    private ServiceSupervisionInterface $serviceSupervision;
    private ServiceSystemeInterface $serviceSysteme;

    public function __construct(
        Container $container,
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        ServiceSystemeInterface $serviceSysteme
    ) {
        parent::__construct($container, $serviceSecurite);
        $this->serviceSupervision = $serviceSupervision;
        $this->serviceSysteme = $serviceSysteme;
    }

    /**
     * Affiche les journaux d'audit avec filtres et pagination.
     */
    public function showAuditLogs(): void
    {
        $this->checkPermission('TRAIT_ADMIN_SUPERVISION_AUDIT_VIEW');
        // ... Logique de filtres et pagination ...
        $logs = $this->serviceSupervision->consulterJournaux($_GET);
        $this->render('Administration/supervision_audit.php', [
            'title' => 'Journaux d\'Audit',
            'logs' => $logs
        ]);
    }

    /**
     * Affiche les journaux d'erreurs du serveur.
     */
    public function showErrorLogs(): void
    {
        $this->checkPermission('TRAIT_ADMIN_SUPERVISION_ERRORS_VIEW');
        $logPath = $this->serviceSysteme->getParametre('PHP_ERROR_LOG_PATH');
        $logContent = $this->serviceSupervision->consulterJournauxErreurs($logPath);
        $this->render('Administration/supervision_errors.php', [
            'title' => 'Journaux d\'Erreurs',
            'logContent' => $logContent
        ]);
    }

    /**
     * Affiche l'état de la file d'attente des tâches asynchrones.
     */
    public function showQueueStatus(): void
    {
        $this->checkPermission('TRAIT_ADMIN_SUPERVISION_QUEUE_VIEW');
        $jobs = $this->serviceSupervision->listerTachesAsynchrones();
        $this->render('Administration/supervision_queue.php', [
            'title' => 'File d\'attente des Tâches',
            'jobs' => $jobs
        ]);
    }

    /**
     * Gère une action sur une tâche de la file d'attente (relancer, supprimer).
     */
    public function manageQueueTask(string $id, string $action): void
    {
        $this->checkPermission('TRAIT_ADMIN_SUPERVISION_QUEUE_MANAGE');
        $this->serviceSupervision->gererTacheAsynchrone($id, $action);
        $this->redirect('/admin/supervision/queue');
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Administration\UtilisateurController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Administration/UtilisateurController.php

namespace App\Backend\Controller\Administration;

use App\Backend\Controller\BaseController;
use App\Backend\Service\Utilisateur\ServiceUtilisateurInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Util\FormValidator;
use App\Config\Container;

class UtilisateurController extends BaseController
{
    private ServiceUtilisateurInterface $serviceUtilisateur;
    private FormValidator $validator;

    public function __construct(
        Container $container,
        ServiceSecuriteInterface $serviceSecurite,
        ServiceUtilisateurInterface $serviceUtilisateur,
        FormValidator $validator
    ) {
        parent::__construct($container, $serviceSecurite);
        $this->serviceUtilisateur = $serviceUtilisateur;
        $this->validator = $validator;
    }

    /**
     * Affiche la vue principale de gestion des utilisateurs avec filtres et pagination.
     */
    public function listUsers(): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_LIST');

        // Logique de filtrage et de recherche
        $filtres = [];
        if (!empty($_GET['q'])) $filtres['search'] = $_GET['q'];
        if (!empty($_GET['groupe'])) $filtres['id_groupe_utilisateur'] = $_GET['groupe'];
        if (!empty($_GET['statut'])) $filtres['statut_compte'] = $_GET['statut'];

        $utilisateurs = $this->serviceUtilisateur->listerUtilisateursComplets($filtres);

        $this->render('Administration/gestion_utilisateurs.php', [
            'title' => 'Gestion des Utilisateurs',
            'utilisateurs' => $utilisateurs,
            'filtres' => $_GET, // Pour pré-remplir les champs de filtre
            'flash' => $this->getFlashMessages()
        ]);
    }

    /**
     * Affiche le formulaire de création ou d'édition d'un utilisateur.
     */
    public function showUserForm(?string $id = null): void
    {
        $this->checkPermission($id ? 'TRAIT_ADMIN_USERS_EDIT' : 'TRAIT_ADMIN_USERS_CREATE');

        $utilisateur = null;
        if ($id) {
            $utilisateur = $this->serviceUtilisateur->lireUtilisateurComplet($id);
            if (!$utilisateur) {
                $this->setFlash('error', 'Utilisateur non trouvé.');
                $this->redirect('/admin/users');
                return;
            }
        }

        $this->render('Administration/form_utilisateur.php', [
            'title' => $id ? 'Modifier l\'Utilisateur' : 'Créer un Utilisateur',
            'utilisateur' => $utilisateur,
            'flash' => $this->getFlashMessages()
        ]);
    }

    /**
     * Traite la création ou la mise à jour d'un utilisateur.
     */
    public function saveUser(): void
    {
        if (!$this->verifyCsrfToken($_POST['csrf_token'] ?? null)) {
            $this->setFlash('error', 'Erreur de sécurité.');
            $this->redirect('/admin/users');
            return;
        }

        $id = $_POST['id_utilisateur'] ?? null;
        $this->checkPermission($id ? 'TRAIT_ADMIN_USERS_EDIT' : 'TRAIT_ADMIN_USERS_CREATE');

        // Logique de validation ici...

        try {
            if ($id) {
                // Logique de mise à jour
                $this->serviceUtilisateur->mettreAJourUtilisateur($id, $_POST['profil'], $_POST['compte']);
                $this->setFlash('success', 'Utilisateur mis à jour avec succès.');
            } else {
                // Logique de création
                $entiteId = $this->serviceUtilisateur->creerEntite($_POST['type_entite'], $_POST['profil']);
                $this->serviceUtilisateur->activerComptePourEntite($entiteId, $_POST['compte'], false);
                $this->setFlash('success', 'Utilisateur créé avec succès.');
            }
        } catch (\Exception $e) {
            $this->setFlash('error', $e->getMessage());
        }

        $this->redirect($id ? '/admin/users/edit/' . $id : '/admin/users');
    }

    /**
     * Traite la suppression physique d'un utilisateur.
     */
    public function deleteUser(string $id): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_DELETE');
        // CSRF check via POST

        try {
            $this->serviceUtilisateur->supprimerUtilisateurEtEntite($id);
            $this->setFlash('success', 'Utilisateur supprimé définitivement.');
        } catch (\Exception $e) {
            $this->setFlash('error', $e->getMessage());
        }
        $this->redirect('/admin/users');
    }

    /**
     * Traite les actions en masse sur une sélection d'utilisateurs.
     */
    public function handleBulkActions(): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_BULK_ACTION');
        // ... Logique pour récupérer les IDs et l'action, puis boucler en appelant les services ...
        // ... Construire un rapport et l'afficher via un message flash ...
        $this->redirect('/admin/users');
    }

    /**
     * Déclenche la réinitialisation du mot de passe par l'admin.
     */
    public function resetPassword(string $id): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_RESET_PASSWORD');
        try {
            $this->serviceUtilisateur->reinitialiserMotDePasseAdmin($id);
            $this->setFlash('success', 'Un nouveau mot de passe a été généré et envoyé à l\'utilisateur.');
        } catch (\Exception $e) {
            $this->setFlash('error', $e->getMessage());
        }
        $this->redirect('/admin/users/edit/' . $id);
    }

    /**
     * Démarre une session d'impersonation.
     */
    public function impersonate(string $id): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_IMPERSONATE');
        $adminId = $this->serviceSecurite->getUtilisateurConnecte()['numero_utilisateur'];

        if ($this->serviceSecurite->demarrerImpersonation($adminId, $id)) {
            $this->redirect('/dashboard'); // Redirige vers le dashboard de l'utilisateur cible
        } else {
            $this->setFlash('error', 'Impossible de démarrer l\'impersonation.');
            $this->redirect('/admin/users');
        }
    }

    /**
     * Arrête la session d'impersonation en cours.
     */
    public function stopImpersonating(): void
    {
        if ($this->serviceSecurite->arreterImpersonation()) {
            $this->redirect('/admin/dashboard');
        } else {
            $this->redirect('/');
        }
    }

    /**
     * Affiche l'interface d'importation en masse.
     */
    public function showImportForm(): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_IMPORT');
        $this->render('Administration/import_utilisateurs.php', [
            'title' => 'Importer des Utilisateurs'
        ]);
    }

    /**
     * Traite le fichier importé.
     */
    public function handleImport(): void
    {
        $this->checkPermission('TRAIT_ADMIN_USERS_IMPORT');
        // ... Logique d'upload, de validation du fichier et appel à $this->serviceUtilisateur->importerEtudiantsDepuisFichier() ...
        $this->redirect('/admin/users');
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\AssetController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/AssetController.php

namespace App\Backend\Controller;

use App\Backend\Model\RapportEtudiant;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Document\ServiceDocumentInterface;
use App\Backend\Service\Systeme\ServiceSystemeInterface;
use App\Config\Container;
use App\Backend\Exception\PermissionException;

class AssetController extends BaseController
{
    private ServiceDocumentInterface $serviceDocument;
    private ServiceSystemeInterface $serviceSysteme;

    public function __construct(
        Container $container,
        ServiceSecuriteInterface $serviceSecurite,
        ServiceDocumentInterface $serviceDocument,
        ServiceSystemeInterface $serviceSysteme
    ) {
        parent::__construct($container, $serviceSecurite);
        $this->serviceDocument = $serviceDocument;
        $this->serviceSysteme = $serviceSysteme;
    }

    public function serveProtectedAsset(string $type, string $filename): void
    {
        try {
            // La vérification de connexion est la première étape
            if (!$this->serviceSecurite->estUtilisateurConnecte()) {
                throw new PermissionException("Accès non authentifié.");
            }

            $utilisateurConnecte = $this->serviceSecurite->getUtilisateurConnecte();
            $numeroUtilisateur = $utilisateurConnecte['numero_utilisateur'];
            $idGroupe = $utilisateurConnecte['id_groupe_utilisateur'];

            // CORRECTION : Utilisation de la méthode correcte getParametre
            $basePath = $this->serviceSysteme->getParametre('UPLOADS_PATH_BASE');
            if (!$basePath) {
                error_log("Le paramètre système 'UPLOADS_PATH_BASE' n'est pas configuré.");
                $this->serveNotFound();
                return;
            }

            // Sécurisation du chemin
            $fullPath = realpath($basePath . DIRECTORY_SEPARATOR . $type . DIRECTORY_SEPARATOR . $filename);
            if ($fullPath === false || strpos($fullPath, realpath($basePath)) !== 0) {
                $this->serveNotFound();
                return;
            }

            $hasAccess = false;
            switch ($type) {
                case 'documents_generes':
                    // L'admin a toujours accès
                    if ($idGroupe === 'GRP_ADMIN_SYS') {
                        $hasAccess = true;
                    } else {
                        // CORRECTION : Utilisation de la nouvelle méthode du service
                        $hasAccess = $this->serviceDocument->verifierProprieteDocument($filename, $numeroUtilisateur);
                    }
                    break;

                case 'profile_pictures':
                    // Tout utilisateur connecté peut voir les photos de profil
                    $hasAccess = true;
                    break;

                case 'rapport_images':
                    // Logique plus complexe : vérifier si l'utilisateur est l'étudiant propriétaire,
                    // un membre de la commission qui évalue le rapport, ou un admin.
                    // Cette logique serait implémentée dans un service.
                    // Pour l'exemple, on autorise l'admin et le propriétaire.
                    $rapportId = explode('_', $filename)[0]; // Suppose un nommage de fichier comme 'RAP-ID_image.jpg'
                    $rapport = $this->container->get(RapportEtudiant::class)->trouverParIdentifiant($rapportId);
                    if ($idGroupe === 'GRP_ADMIN_SYS' || ($rapport && $rapport['numero_carte_etudiant'] === $numeroUtilisateur)) {
                        $hasAccess = true;
                    }
                    // Il faudrait ajouter la vérification pour les membres de la commission
                    break;
            }

            if ($hasAccess) {
                $this->serveFile($fullPath);
            } else {
                throw new PermissionException("Vous n'avez pas les droits pour accéder à ce fichier.");
            }

        } catch (PermissionException $e) {
            $this->serveForbidden($e->getMessage());
        } catch (\Exception $e) {
            error_log("Erreur dans AssetController: " . $e->getMessage());
            $this->serveNotFound();
        }
    }

    private function serveFile(string $filePath): void
    {
        if (!file_exists($filePath) || !is_readable($filePath)) {
            $this->serveNotFound();
            return;
        }
        $finfo = finfo_open(FILEINFO_MIME_TYPE);
        $mimeType = finfo_file($finfo, $filePath);
        finfo_close($finfo);

        header('Content-Type: ' . $mimeType);
        header('Content-Length: ' . filesize($filePath));
        header('Content-Disposition: inline; filename="' . basename($filePath) . '"');
        header('Cache-Control: private, max-age=0, must-revalidate');
        header('Pragma: public');

        ob_clean();
        flush();
        readfile($filePath);
        exit();
    }

    private function serveForbidden(string $message = "Accès interdit."): void
    {
        http_response_code(403);
        // On utilise le layout 'app' car l'utilisateur est connecté mais n'a pas les droits
        $this->render('errors/403.php', ['error_message' => $message], 'app');
    }

    private function serveNotFound(): void
    {
        http_response_code(404);
        $layout = $this->serviceSecurite->estUtilisateurConnecte() ? 'app' : 'auth';
        $this->render('errors/404.php', [], $layout);
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\AuthentificationController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/AuthentificationController.php

namespace App\Backend\Controller;

use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Communication\ServiceCommunicationInterface;
use App\Backend\Util\FormValidator;
use App\Config\Container;
use App\Backend\Exception\{
    IdentifiantsInvalidesException,
    CompteBloqueException,
    CompteNonValideException,
    TokenInvalideException,
    TokenExpireException,
    MotDePasseInvalideException
};

class AuthentificationController extends BaseController
{
    private FormValidator $validator;
    private ServiceCommunicationInterface $communicationService;

    public function __construct(
        Container $container,
        ServiceSecuriteInterface $serviceSecurite,
        FormValidator $validator,
        ServiceCommunicationInterface $communicationService
    ) {
        parent::__construct($container, $serviceSecurite);
        $this->validator = $validator;
        $this->communicationService = $communicationService;
    }

    public function showLoginForm(): void
    {
        if ($this->serviceSecurite->estUtilisateurConnecte()) {
            $this->redirect('/dashboard');
            return;
        }
        $this->render('Auth/auth.php', ['form' => 'login', 'flash' => $this->getFlashMessages()], 'auth');
    }

    public function handleLogin(): void
    {
        if (!$this->verifyCsrfToken($_POST['csrf_token'] ?? null)) {
            $this->setFlash('error', 'Erreur de sécurité. Veuillez réessayer.');
            $this->redirect('/login');
            return;
        }

        if (!$this->validator->validate($_POST, ['identifiant' => 'required', 'mot_de_passe' => 'required'])) {
            $this->setFlash('error', 'L\'identifiant et le mot de passe sont requis.');
            $this->redirect('/login');
            return;
        }

        try {
            $resultat = $this->serviceSecurite->tenterConnexion($_POST['identifiant'], $_POST['mot_de_passe']);

            if (isset($resultat['status']) && $resultat['status'] === '2fa_required') {
                $this->redirect('/login/2fa');
            } else {
                $this->redirect('/dashboard');
            }
        } catch (IdentifiantsInvalidesException | CompteNonValideException | CompteBloqueException $e) {
            $this->setFlash('error', $e->getMessage());
            $this->redirect('/login');
        } catch (\Exception $e) {
            error_log("Login Error: " . $e->getMessage());
            $this->setFlash('error', 'Une erreur inattendue est survenue.');
            $this->redirect('/login');
        }
    }

    public function show2faForm(): void
    {
        if (!isset($_SESSION['2fa_pending']) || $_SESSION['2fa_pending'] !== true) {
            $this->redirect('/login');
            return;
        }
        $this->render('Auth/auth.php', ['form' => '2fa', 'flash' => $this->getFlashMessages()], 'auth');
    }

    public function handle2faVerification(): void
    {
        if (!isset($_SESSION['2fa_user_id']) || !$this->verifyCsrfToken($_POST['csrf_token'] ?? null)) {
            $this->redirect('/login');
            return;
        }
        if (!$this->validator->validate($_POST, ['code_2fa' => 'required|numeric'])) {
            $this->setFlash('error', 'Le code de vérification est requis.');
            $this->redirect('/login/2fa');
            return;
        }

        $userId = $_SESSION['2fa_user_id'];
        $code = $_POST['code_2fa'];

        if ($this->serviceSecurite->verifierCodeAuthentificationDeuxFacteurs($userId, $code)) {
            $this->serviceSecurite->demarrerSessionUtilisateur($userId);
            $this->redirect('/dashboard');
        } else {
            $this->setFlash('error', 'Le code de vérification est incorrect.');
            $this->redirect('/login/2fa');
        }
    }

    public function logout(): void
    {
        $this->serviceSecurite->logout();
        $this->redirect('/login');
    }

    public function showForgotPasswordForm(): void
    {
        $this->render('Auth/auth.php', ['form' => 'forgot_password', 'flash' => $this->getFlashMessages()], 'auth');
    }

    public function handleForgotPassword(): void
    {
        if (!$this->verifyCsrfToken($_POST['csrf_token'] ?? null)) {
            $this->setFlash('error', 'Erreur de sécurité. Veuillez réessayer.');
            $this->redirect('/forgot-password');
            return;
        }

        if (!$this->validator->validate($_POST, ['email' => 'required|email'])) {
            $this->setFlash('error', 'Une adresse email valide est requise.');
            $this->redirect('/forgot-password');
            return;
        }

        try {
            $this->serviceSecurite->demanderReinitialisationMotDePasse($_POST['email'], $this->communicationService);
        } catch (\Exception $e) {
            error_log("Forgot Password Error: " . $e->getMessage());
        }

        $this->setFlash('success', 'Si un compte correspondant à cet email existe, un lien de réinitialisation a été envoyé.');
        $this->redirect('/forgot-password');
    }

    public function showResetPasswordForm(string $token): void
    {
        $this->render('Auth/auth.php', ['form' => 'reset_password', 'token' => $token, 'flash' => $this->getFlashMessages()], 'auth');
    }

    public function handleResetPassword(): void
    {
        if (!$this->verifyCsrfToken($_POST['csrf_token'] ?? null)) {
            $this->setFlash('error', 'Erreur de sécurité. Veuillez réessayer.');
            $this->redirect('/reset-password/' . ($_POST['token'] ?? ''));
            return;
        }

        $rules = [
            'token' => 'required',
            'nouveau_mot_de_passe' => 'required|min:8',
            'confirmer_mot_de_passe' => 'required|same:nouveau_mot_de_passe'
        ];

        if (!$this->validator->validate($_POST, $rules)) {
            $errors = $this->validator->getErrors();
            $this->setFlash('error', reset($errors));
            $this->redirect('/reset-password/' . $_POST['token']);
            return;
        }

        try {
            $this->serviceSecurite->reinitialiserMotDePasseViaToken($_POST['token'], $_POST['nouveau_mot_de_passe']);
            $this->setFlash('success', 'Votre mot de passe a été réinitialisé avec succès. Vous pouvez maintenant vous connecter.');
            $this->redirect('/login');
        } catch (TokenInvalideException | TokenExpireException | MotDePasseInvalideException $e) {
            $this->setFlash('error', $e->getMessage());
            $this->redirect('/reset-password/' . $_POST['token']);
        } catch (\Exception $e) {
            error_log("Reset Password Error: " . $e->getMessage());
            $this->setFlash('error', 'Une erreur inattendue est survenue.');
            $this->redirect('/reset-password/' . $_POST['token']);
        }
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\BaseController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/BaseController.php

namespace App\Backend\Controller;

use App\Config\Container;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Exception\PermissionException;

/**
 * Contrôleur de base dont tous les autres contrôleurs héritent.
 * Il fournit des fonctionnalités communes comme le rendu des vues, la gestion des redirections,
 * la vérification des permissions et la protection CSRF.
 */
abstract class BaseController
{
    protected Container $container;
    protected ServiceSecuriteInterface $serviceSecurite;

    public function __construct(Container $container, ServiceSecuriteInterface $serviceSecurite)
    {
        $this->container = $container;
        $this->serviceSecurite = $serviceSecurite;
        $this->initializeCsrf();
    }

    /**
     * Rend une vue en l'intégrant dans un layout principal.
     */
    protected function render(string $viewPath, array $data = [], string $layout = 'app'): void
    {
        extract($data);
        if ($layout === 'app') {
            $utilisateurConnecte = $this->serviceSecurite->getUtilisateurConnecte();
            $menuItems = $this->serviceSecurite->construireMenuPourUtilisateurConnecte();
            $estEnModeImpersonation = $this->serviceSecurite->estEnModeImpersonation();
            $impersonatorData = $this->serviceSecurite->getImpersonatorData();
        }

        // Ajoute le jeton CSRF à toutes les vues pour l'utiliser dans les formulaires
        $csrfToken = $_SESSION['csrf_token']['value'] ?? '';

        ob_start();
        // --- CORRECTION DU CHEMIN ---
        require_once __DIR__ . '/../../Frontend/views/' . $viewPath;
        $content = ob_get_clean();

        // --- CORRECTION DU CHEMIN ---
        $layoutFile = __DIR__ . '/../../Frontend/views/layout/' . ($layout === 'app' ? 'app.php' : 'layout_auth.php');
        if (file_exists($layoutFile)) {
            require_once $layoutFile;
        } else {
            echo $content;
        }
    }

    /**
     * Effectue une redirection vers une URL spécifiée.
     */
    protected function redirect(string $url): void
    {
        header('Location: ' . $url);
        exit();
    }

    /**
     * Stocke un message "flash" dans la session.
     */
    protected function setFlash(string $key, string $message): void
    {
        $_SESSION['flash_messages'][$key] = $message;
    }

    /**
     * Récupère et supprime les messages "flash" de la session.
     */
    protected function getFlashMessages(): array
    {
        $messages = $_SESSION['flash_messages'] ?? [];
        unset($_SESSION['flash_messages']);
        return $messages;
    }

    /**
     * Retourne une réponse JSON.
     */
    protected function jsonResponse($data, int $statusCode = 200): void
    {
        http_response_code($statusCode);
        header('Content-Type: application/json');
        echo json_encode($data);
        exit();
    }

    /**
     * Vérifie si l'utilisateur connecté possède une permission.
     * Lance une PermissionException si ce n'est pas le cas.
     * Cette exception est tracée dans les logs d'audit.
     */
    protected function checkPermission(string $permissionCode): void
    {
        if (!$this->serviceSecurite->utilisateurPossedePermission($permissionCode)) {
            // Utilise le conteneur pour obtenir le service de supervision à la demande
            $supervisionService = $this->container->get(ServiceSupervisionInterface::class);
            $supervisionService->enregistrerAction(
                $_SESSION['user_id'] ?? 'ANONYMOUS',
                'ACCES_ASSET_ECHEC', // Action d'échec d'accès
                $permissionCode,
                'Traitement'
            );
            throw new PermissionException("Accès refusé. Vous n'avez pas la permission '{$permissionCode}'.");
        }
    }

    /**
     * Initialise le jeton CSRF en session s'il n'existe pas ou a expiré.
     */
    private function initializeCsrf(): void
    {
        if (session_status() === PHP_SESSION_NONE) return;

        if (empty($_SESSION['csrf_token']) || empty($_SESSION['csrf_token']['expires_at']) || $_SESSION['csrf_token']['expires_at'] < time()) {
            $_SESSION['csrf_token'] = [
                'value' => bin2hex(random_bytes(32)),
                'expires_at' => time() + 3600 // Durée de vie de 1 heure
            ];
        }
    }

    /**
     * Vérifie la validité d'un jeton CSRF soumis.
     */
    protected function verifyCsrfToken(?string $submittedToken): bool
    {
        if (empty($submittedToken) || empty($_SESSION['csrf_token']['value'])) {
            return false;
        }
        return hash_equals($_SESSION['csrf_token']['value'], $submittedToken);
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Commission\CommissionDashboardController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Commission/CommissionDashboardController.php

namespace App\Backend\Controller\Commission;

use App\Backend\Controller\BaseController;
use App\Backend\Service\WorkflowSoutenance\ServiceWorkflowSoutenanceInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class CommissionDashboardController extends BaseController
{
    private ServiceWorkflowSoutenanceInterface $serviceWorkflow;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceWorkflowSoutenanceInterface $serviceWorkflow
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceWorkflow = $serviceWorkflow;
    }

    /**
     * Affiche le tableau de bord pour un membre de la commission.
     */
    public function index(): void
    {
        $this->checkPermission('TRAIT_COMMISSION_DASHBOARD_ACCEDER');
        $user = $this->serviceSecurite->getUtilisateurConnecte();

        try {
// Récupérer les rapports en attente de vote pour cet utilisateur
            $rapportsAVoter = $this->serviceWorkflow->listerRapports(['statut' => 'en_commission', 'votant' => $user['numero_utilisateur']]);
// Récupérer les PV en attente d'approbation
            $pvsAApprouver = $this->serviceWorkflow->listerPvAApprouver($user['numero_utilisateur']);

            $this->render('Commission/dashboard_commission.php', [
                'title' => 'Tableau de Bord Commission',
                'rapportsAVoter' => $rapportsAVoter,
                'pvsAApprouver' => $pvsAApprouver
            ]);
        } catch (\Exception $e) {
            $this->serviceSupervision->enregistrerAction($user['numero_utilisateur'], 'DASHBOARD_COMMISSION_ERROR', null, null, ['error' => $e->getMessage()]);
            $this->render('errors/500.php', ['error_message' => "Impossible de charger les données du tableau de bord."]);
        }
    }
}


/***********************************************************************************
 * Fichier: src/Backend/Controller\Commission\WorkflowCommissionController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Commission/WorkflowCommissionController.php

namespace App\Backend\Controller\Commission;

use App\Backend\Controller\BaseController;
use App\Backend\Service\WorkflowSoutenance\ServiceWorkflowSoutenanceInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class WorkflowCommissionController extends BaseController
{
    private ServiceWorkflowSoutenanceInterface $serviceWorkflow;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceWorkflowSoutenanceInterface $serviceWorkflow
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceWorkflow = $serviceWorkflow;
    }

    public function listSessions(): void
    {
        $this->checkPermission('COMMISSION_SESSIONS_LIST');
        $sessions = $this->serviceWorkflow->listerSessionsPourCommission();
        $this->render('Commission/workflow_commission.php', [
            'title' => 'Gestion des Sessions de Validation',
            'sessions' => $sessions
        ]);
    }

    public function createSession(): void
    {
        $this->checkPermission('COMMISSION_SESSIONS_CREATE');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $user = $this->serviceSecurite->getUtilisateurConnecte();
        try {
            $idSession = $this->serviceWorkflow->creerSession($user['numero_utilisateur'], $_POST);
            $this->jsonResponse(['success' => true, 'message' => 'Session créée avec succès.', 'id' => $idSession]);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }

    public function viewSession(string $id): void
    {
        $this->checkPermission('COMMISSION_SESSIONS_VIEW');
        $session = $this->serviceWorkflow->lireSessionComplete($id);
        if (!$session) {
            $this->render('errors/404.php');
            return;
        }
        $this->render('Commission/view_session.php', [
            'title' => 'Détails de la Session',
            'session' => $session
        ]);
    }

    public function submitVote(string $idSession, string $idRapport): void
    {
        $this->checkPermission('COMMISSION_VOTE');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $user = $this->serviceSecurite->getUtilisateurConnecte();
        try {
            $this->serviceWorkflow->enregistrerVote($idRapport, $user['numero_utilisateur'], $_POST['decision'], $_POST['commentaire'] ?? null);
            $this->jsonResponse(['success' => true, 'message' => 'Vote enregistré.']);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }
}


/***********************************************************************************
 * Fichier: src/Backend/Controller\DashboardController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/DashboardController.php

namespace App\Backend\Controller;

/**
 * Contrôleur de redirection qui aiguille l'utilisateur connecté
 * vers le tableau de bord correspondant à son rôle.
 */
class DashboardController extends BaseController
{
    /**
     * Redirige l'utilisateur vers son tableau de bord spécifique après la connexion.
     */
    public function index(): void
    {
        if (!$this->serviceSecurite->estUtilisateurConnecte()) {
            $this->redirect('/login');
            return;
        }

        $utilisateur = $this->serviceSecurite->getUtilisateurConnecte();
        $idGroupe = $utilisateur['id_groupe_utilisateur'] ?? null;

        $redirectionMap = [
            'GRP_ADMIN_SYS' => '/admin/dashboard',
            'GRP_ETUDIANT' => '/etudiant/dashboard',
            'GRP_COMMISSION' => '/commission/dashboard',
            'GRP_AGENT_CONFORMITE' => '/personnel/dashboard',
            'GRP_RS' => '/personnel/dashboard',
            'GRP_PERS_ADMIN' => '/personnel/dashboard',
        ];

        if (isset($redirectionMap[$idGroupe])) {
            $this->redirect($redirectionMap[$idGroupe]);
        } else {
            // Gère le cas d'un enseignant simple (GRP_ENSEIGNANT) ou de tout autre rôle
            // sans dashboard assigné. La session est détruite et un message clair est affiché.
            $this->setFlash('error', 'Votre rôle actuel ne vous donne pas accès à un tableau de bord. Veuillez contacter un administrateur.');
            $this->serviceSecurite->logout();
            $this->redirect('/login');
        }
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Etudiant\EtudiantDashboardController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Etudiant/EtudiantDashboardController.php

namespace App\Backend\Controller\Etudiant;

use App\Backend\Controller\BaseController;
use App\Backend\Service\WorkflowSoutenance\ServiceWorkflowSoutenanceInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class EtudiantDashboardController extends BaseController
{
    private ServiceWorkflowSoutenanceInterface $serviceWorkflow;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceWorkflowSoutenanceInterface $serviceWorkflow
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceWorkflow = $serviceWorkflow;
    }

    /**
     * Affiche le tableau de bord de l'étudiant.
     */
    public function index(): void
    {
        $this->checkPermission('TRAIT_ETUDIANT_DASHBOARD_ACCEDER');
        $user = $this->serviceSecurite->getUtilisateurConnecte();

        try {
            $rapports = $this->serviceWorkflow->listerRapports(['numero_carte_etudiant' => $user['numero_utilisateur']]);
            $rapportActif = !empty($rapports) ? $rapports[0] : null;

            $this->render('Etudiant/dashboard_etudiant.php', [
                'title' => 'Mon Tableau de Bord',
                'rapportActif' => $rapportActif
            ]);
        } catch (\Exception $e) {
            $this->serviceSupervision->enregistrerAction($user['numero_utilisateur'], 'DASHBOARD_ETUDIANT_ERROR', null, null, ['error' => $e->getMessage()]);
            $this->render('errors/500.php', ['error_message' => "Impossible de charger les données de votre tableau de bord."]);
        }
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Etudiant\ProfilEtudiantController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Etudiant/ProfilEtudiantController.php

namespace App\Backend\Controller\Etudiant;

use App\Backend\Controller\BaseController;
use App\Backend\Service\Utilisateur\ServiceUtilisateurInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class ProfilEtudiantController extends BaseController
{
    private ServiceUtilisateurInterface $serviceUtilisateur;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceUtilisateurInterface $serviceUtilisateur
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceUtilisateur = $serviceUtilisateur;
    }

    /**
     * Affiche le profil de l'étudiant connecté.
     */
    public function showProfile(): void
    {
        $this->checkPermission('ETUDIANT_PROFIL_READ');
        $user = $this->serviceSecurite->getUtilisateurConnecte();
        $this->render('Etudiant/profil_etudiant.php', [
            'title' => 'Mon Profil',
            'user' => $user
        ]);
    }

    /**
     * Traite la mise à jour du profil de l'étudiant.
     */
    public function updateProfile(): void
    {
        $this->checkPermission('ETUDIANT_PROFIL_UPDATE');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $user = $this->serviceSecurite->getUtilisateurConnecte();
        $rules = [
            'telephone' => 'max:20',
            'email_contact_secondaire' => 'email|max:255',
            'adresse_postale' => 'max:500'
        ];

        if (!$this->formValidator->validate($_POST, $rules)) {
            $this->jsonResponse(['success' => false, 'errors' => $this->formValidator->getErrors()], 422);
            return;
        }

        try {
            $donneesProfil = [
                'telephone' => $_POST['telephone'],
                'email_contact_secondaire' => $_POST['email_contact_secondaire'],
                'adresse_postale' => $_POST['adresse_postale']
            ];
            $this->serviceUtilisateur->mettreAJourUtilisateur($user['numero_utilisateur'], $donneesProfil, []);
            $this->jsonResponse(['success' => true, 'message' => 'Profil mis à jour avec succès.']);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\Etudiant\RapportController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/Etudiant/RapportController.php

namespace App\Backend\Controller\Etudiant;

use App\Backend\Controller\BaseController;
use App\Backend\Service\WorkflowSoutenance\ServiceWorkflowSoutenanceInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class RapportController extends BaseController
{
    private ServiceWorkflowSoutenanceInterface $serviceWorkflow;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceWorkflowSoutenanceInterface $serviceWorkflow
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceWorkflow = $serviceWorkflow;
    }

    /**
     * Affiche le formulaire de rédaction/édition du rapport.
     */
    public function showRapportForm(): void
    {
        $this->checkPermission('TRAIT_ETUDIANT_RAPPORT_SUIVRE');
        $user = $this->serviceSecurite->getUtilisateurConnecte();
        $rapport = $this->serviceWorkflow->lireRapportCompletParEtudiant($user['numero_utilisateur']);
        $this->render('Etudiant/redaction_rapport.php', [
            'title' => 'Mon Rapport',
            'rapport' => $rapport
        ]);
    }

    /**
     * Sauvegarde le brouillon du rapport.
     */
    public function saveRapport(): void
    {
        $this->checkPermission('ETUDIANT_RAPPORT_EDIT');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $user = $this->serviceSecurite->getUtilisateurConnecte();
        try {
            $metadonnees = ['libelle_rapport_etudiant' => $_POST['titre'], 'theme' => $_POST['theme']];
            $sections = $_POST['sections'] ?? []; // Supposant que les sections sont envoyées sous forme de tableau
            $this->serviceWorkflow->creerOuMettreAJourBrouillon($user['numero_utilisateur'], $metadonnees, $sections);
            $this->jsonResponse(['success' => true, 'message' => 'Brouillon sauvegardé.']);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }

    /**
     * Soumet le rapport pour validation.
     */
    public function submitRapport(): void
    {
        $this->checkPermission('TRAIT_ETUDIANT_RAPPORT_SOUMETTRE');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $user = $this->serviceSecurite->getUtilisateurConnecte();
        $idRapport = $_POST['id_rapport'];
        try {
            $this->serviceWorkflow->soumettreRapport($idRapport, $user['numero_utilisateur']);
            $this->jsonResponse(['success' => true, 'message' => 'Rapport soumis avec succès !', 'redirect' => '/etudiant/dashboard']);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\HomeController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/HomeController.php

namespace App\Backend\Controller;

/**
 * Gère la page d'accueil publique de l'application.
 * Son unique rôle est de rediriger l'utilisateur.
 */
class HomeController extends BaseController
{
    /**
     * Redirige vers le tableau de bord si l'utilisateur est déjà connecté,
     * sinon, redirige vers la page de connexion.
     */
    public function index(): void
    {
        if ($this->serviceSecurite->estUtilisateurConnecte()) {
            $this->redirect('/dashboard');
        } else {
            $this->redirect('/login');
        }
    }
}

/***********************************************************************************
 * Fichier: src/Backend/Controller\PersonnelAdministratif\PersonnelDashboardController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/PersonnelAdministratif/PersonnelDashboardController.php

namespace App\Backend\Controller\PersonnelAdministratif;

use App\Backend\Controller\BaseController;
use App\Backend\Service\WorkflowSoutenance\ServiceWorkflowSoutenanceInterface;
use App\Backend\Service\Utilisateur\ServiceUtilisateurInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class PersonnelDashboardController extends BaseController
{
    private ServiceWorkflowSoutenanceInterface $serviceWorkflow;
    private ServiceUtilisateurInterface $serviceUtilisateur;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceWorkflowSoutenanceInterface $serviceWorkflow,
        ServiceUtilisateurInterface $serviceUtilisateur
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceWorkflow = $serviceWorkflow;
        $this->serviceUtilisateur = $serviceUtilisateur;
    }

    /**
     * Affiche le tableau de bord pour le personnel administratif.
     * Le contenu est adapté en fonction du rôle (Agent de conformité ou RS).
     */
    public function index(): void
    {
        $this->checkPermission('TRAIT_PERS_ADMIN_DASHBOARD_ACCEDER');
        $user = $this->serviceSecurite->getUtilisateurConnecte();
        $data = ['title' => 'Tableau de Bord Administratif'];

        try {
            if ($user['id_groupe_utilisateur'] === 'GRP_AGENT_CONFORMITE') {
                $data['rapportsEnAttente'] = $this->serviceWorkflow->listerRapports(['id_statut_rapport' => 'RAP_SOUMIS']);
            } elseif ($user['id_groupe_utilisateur'] === 'GRP_RS') {
                $data['etudiantsAActiver'] = $this->serviceUtilisateur->listerUtilisateursComplets(['statut_compte' => 'en_attente_activation']);
            }
            $this->render('PersonnelAdministratif/dashboard_personnel.php', $data);
        } catch (\Exception $e) {
            $this->serviceSupervision->enregistrerAction($user['numero_utilisateur'], 'DASHBOARD_PERSONNEL_ERROR', null, null, ['error' => $e->getMessage()]);
            $this->render('errors/500.php', ['error_message' => "Impossible de charger les données du tableau de bord."]);
        }
    }
}


/***********************************************************************************
 * Fichier: src/Backend/Controller\PersonnelAdministratif\ScolariteController.php
 ***********************************************************************************/

<?php
// src/Backend/Controller/PersonnelAdministratif/ScolariteController.php

namespace App\Backend\Controller\PersonnelAdministratif;

use App\Backend\Controller\BaseController;
use App\Backend\Service\WorkflowSoutenance\ServiceWorkflowSoutenanceInterface;
use App\Backend\Service\Utilisateur\ServiceUtilisateurInterface;
use App\Backend\Service\Securite\ServiceSecuriteInterface;
use App\Backend\Service\Supervision\ServiceSupervisionInterface;
use App\Backend\Util\FormValidator;

class ScolariteController extends BaseController
{
    private ServiceWorkflowSoutenanceInterface $serviceWorkflow;
    private ServiceUtilisateurInterface $serviceUtilisateur;

    public function __construct(
        ServiceSecuriteInterface $serviceSecurite,
        ServiceSupervisionInterface $serviceSupervision,
        FormValidator $formValidator,
        ServiceWorkflowSoutenanceInterface $serviceWorkflow,
        ServiceUtilisateurInterface $serviceUtilisateur
    ) {
        parent::__construct($serviceSecurite, $serviceSupervision, $formValidator);
        $this->serviceWorkflow = $serviceWorkflow;
        $this->serviceUtilisateur = $serviceUtilisateur;
    }

    public function listConformiteQueue(): void
    {
        $this->checkPermission('TRAIT_PERS_ADMIN_CONFORMITE_LISTER');
        $rapports = $this->serviceWorkflow->listerRapports(['id_statut_rapport' => 'RAP_SOUMIS']);
        $this->render('PersonnelAdministratif/gestion_conformite.php', [
            'title' => 'File de Vérification de Conformité',
            'rapports' => $rapports
        ]);
    }

    public function showConformiteForm(string $id): void
    {
        $this->checkPermission('TRAIT_PERS_ADMIN_CONFORMITE_VERIFIER');
        $rapport = $this->serviceWorkflow->lireRapportComplet($id);
        if (!$rapport) {
            $this->render('errors/404.php');
            return;
        }
        $this->render('PersonnelAdministratif/form_conformite.php', [
            'title' => 'Vérification du Rapport',
            'rapport' => $rapport
        ]);
    }

    public function processConformite(string $id): void
    {
        $this->checkPermission('TRAIT_PERS_ADMIN_CONFORMITE_VERIFIER');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $user = $this->serviceSecurite->getUtilisateurConnecte();
        try {
            $estConforme = ($_POST['decision_conformite'] === 'conforme');
            $details = $_POST['checklist'] ?? [];
            $commentaire = $_POST['commentaire_general'] ?? null;
            $this->serviceWorkflow->traiterVerificationConformite($id, $user['numero_utilisateur'], $estConforme, $details, $commentaire);
            $this->jsonResponse(['success' => true, 'message' => 'Vérification enregistrée.', 'redirect' => '/personnel/conformite']);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }

    public function listStudentRecords(): void
    {
        $this->checkPermission('TRAIT_PERS_ADMIN_SCOLARITE_ACCEDER');
        $etudiants = $this->serviceUtilisateur->listerUtilisateursComplets(['id_type_utilisateur' => 'TYPE_ETUD']);
        $this->render('PersonnelAdministratif/gestion_scolarite.php', [
            'title' => 'Gestion des Dossiers Étudiants',
            'etudiants' => $etudiants
        ]);
    }

    public function activateStudentAccount(): void
    {
        $this->checkPermission('PERS_ADMIN_ACTIVATE_ACCOUNT');
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !$this->verifyCsrfToken($_POST['csrf_token'] ?? '')) {
            $this->jsonResponse(['success' => false, 'message' => 'Requête invalide.'], 403);
            return;
        }

        $numeroEtudiant = $_POST['numero_etudiant'];
        try {
// Le service doit vérifier les prérequis (paiement, stage) avant d'activer
            $this->serviceUtilisateur->activerComptePourEntite($numeroEtudiant, $_POST, true);
            $this->jsonResponse(['success' => true, 'message' => 'Compte étudiant activé avec succès.']);
        } catch (\Exception $e) {
            $this->jsonResponse(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }
}
