services:
  # Service PHP-FPM (image de production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: final # Cible le stage 'final' (production) de notre Dockerfile
    container_name: gestionmysoutenance_app_prod
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - DB_HOST=db_prod # Nom du service de la base de données de production (pour test local)
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_AUTH=${SMTP_AUTH}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_SECURE=${SMTP_SECURE}
      - MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS}
      - MAIL_FROM_NAME=${MAIL_FROM_NAME}
    networks:
      - app-network

  # Service Webserver NGINX (pour la production)
  webserver:
    image: nginx:alpine
    container_name: gestionmysoutenance_nginx_prod
    ports:
      - "80:80" # Expose le port 80 pour la production
    volumes:
      - ./Public:/var/www/html/Public:ro # Montage en lecture seule pour Nginx
      - ./docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    networks:
      - app-network

  # Service Base de Données MySQL (pour le test de production local)
  db_prod: # Nom différent pour éviter les conflits avec 'db' du dev
    image: mysql:8.3
    container_name: gestionmysoutenance_db_prod
    restart: unless-stopped
    command: --default-authentication-plugin=caching_sha2_password
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - db_prod_data:/var/lib/mysql # Volume persistant pour les données de prod
      - ./mysoutenance.sql:/docker-entrypoint-initdb.d/mysoutenance.sql # Initialisation de la DB
    ports:
      - "3307:3306" # Expose sur un port différent pour éviter les conflits avec le dev DB
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u${DB_USER}", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_prod_data:
    driver: local